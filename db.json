{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1737108027699},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1737108030041},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1737108030040},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1737108027702},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1737108027706},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1737108027708},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1737108027708},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1737108027710},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1737108027827},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1737108027700},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1737108027700},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1737108027701},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1737108027702},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1737108027706},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1737108027708},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1737108027701},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1737108027705},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1737108027710},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1737108027710},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1737108030041},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1737108030041},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1737108027700},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1737108030040},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1737108027705},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1737108027706},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1737108027708},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1737108027711},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1737108030042},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1737108030042},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1737108030042},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1737108030043},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1737108030043},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1737108030043},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1737108030044},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1737108030044},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1737108030044},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1737108030043},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1737108030044},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1737108030038},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1737108027842},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1737108027826},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1737108447295},{"_id":"source/_posts/blog/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1737108510768},{"_id":"source/_posts/blog/README.md","hash":"6bf5adac6f03518fe16890df501972d5a57327ff","modified":1737108510768},{"_id":"source/_posts/blog/hash_in_c.md","hash":"3d275327f5ce896c0b5b686eb7e6bbb90a4c0a45","modified":1737108510768},{"_id":"source/_posts/blog/input_method-on-ubuntu.md","hash":"6605716a7c6af971c67eb5b7c1142212529ef18d","modified":1737108510769},{"_id":"source/_posts/blog/.git/COMMIT_EDITMSG","hash":"ea47b7848851fd5de63701a12d34d059974c1a05","modified":1737108510770},{"_id":"source/_posts/blog/.git/HEAD","hash":"9f1df7eea4156be8a871c292b549b3325e425aa2","modified":1737108510770},{"_id":"source/_posts/blog/.git/config","hash":"82f08b4d7a2d459dad5a95170b63541c9f9e212f","modified":1737108510770},{"_id":"source/_posts/blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1737108510770},{"_id":"source/_posts/blog/.git/index","hash":"6222333cf631e7a69ce72268fac533877193b1d4","modified":1737108510769},{"_id":"source/_posts/blog/.git/packed-refs","hash":"e9c951352cab435220b82f67b674125ccde540b4","modified":1737108510770},{"_id":"source/_posts/blog/2d_arry-in-c_function_arg/2D_array.md","hash":"9738387eb8ffd654c5f555c77674d7dc2e36d4ed","modified":1737108510794},{"_id":"source/_posts/blog/2d_arry-in-c_function_arg/compiling.png","hash":"3842abb3e2c193198dca949ec0ef0163e4b998e7","modified":1737108510795},{"_id":"source/_posts/blog/cloud-server/free-cloud-server.md","hash":"0545a8a48fc47dbc353520af630de6596788734a","modified":1737108510795},{"_id":"source/_posts/blog/create-google-account/base-info.png","hash":"6301a8f27ea5e77670ad183878423162653ae6db","modified":1737108510799},{"_id":"source/_posts/blog/create-google-account/usrname.png","hash":"ad39f0fccec3b3626da2c94a9f3a6e31924dffb1","modified":1737108510804},{"_id":"source/_posts/blog/create-google-account/创建google账户.md","hash":"56dff3638fc7076e5f85409109081a4da5f669f9","modified":1737108510804},{"_id":"source/_posts/blog/termux-for-android/termux-remote.md","hash":"8d7b5da5565901a3f80d4251e00bffcee89d75bc","modified":1737108510805},{"_id":"source/_posts/blog/webserver_on_termux_of_android/build_webserver_on_android.md","hash":"0ba906081d9772ee73ce0e5bae56b4fcabc4d1c5","modified":1737108510811},{"_id":"source/_posts/blog/下载chrome安卓版/下载chrome安卓版.md","hash":"5ab780bfa71fece5441a59a9d1c7aea7c6cd3758","modified":1737108510811},{"_id":"source/_posts/blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/pre-commit.sample","hash":"8093d68e142db52dcab2215e770ba0bbe4cfbf24","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1737108510771},{"_id":"source/_posts/blog/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/sendemail-validate.sample","hash":"74cf1d5415a5c03c110240f749491297d65c4c98","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1737108510772},{"_id":"source/_posts/blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1737108510771},{"_id":"source/_posts/blog/.git/logs/HEAD","hash":"1f49be8405326ba868c6660d54ade7b2099440ba","modified":1737108510792},{"_id":"source/_posts/blog/cloud-server/pictures/abeiyun-free_version-performance.png","hash":"fe8afea79d249d8adf624574e25bd8b276c18216","modified":1737108510798},{"_id":"source/_posts/blog/termux-for-android/pictures/login-ubuntu.png","hash":"ae59f6a7b7b3652c6b3f81b8489f4e29eac74ab6","modified":1737108510807},{"_id":"source/_posts/blog/termux-for-android/pictures/open-web-termux.png","hash":"30688598cf7badfa6836a91ed6054bc31be16d03","modified":1737108510808},{"_id":"source/_posts/blog/termux-for-android/pictures/remote-login.png","hash":"c8b8d0e21d55a913613b1e4a5ff5f57e64701b3d","modified":1737108510809},{"_id":"source/_posts/blog/.git/objects/1c/da61185f9a7852d7b6595ff63fed283d374a85","hash":"297d7a063373744d980b42e2b746adc6e9b03d24","modified":1737108510790},{"_id":"source/_posts/blog/.git/objects/pack/pack-19ed93ea1fa28f11d57746ae2248244754ca7143.idx","hash":"b3753c0581662b846ea49a4f1f9bd4c2239c246d","modified":1737108510789},{"_id":"source/_posts/blog/.git/objects/pack/pack-19ed93ea1fa28f11d57746ae2248244754ca7143.rev","hash":"8c5f07a55efa597969cbe2586b1e59aa5fe0d729","modified":1737108510789},{"_id":"source/_posts/blog/.git/objects/52/a6ef2d000b565598bfc82d8597c52a061b88f1","hash":"3310867e3a2f1e8198cefa0ac5c3d531e0b600d3","modified":1737108510790},{"_id":"source/_posts/blog/.git/refs/heads/main","hash":"f683dfa428a06af08eaf4f3c67f9ca22224e8118","modified":1737108510790},{"_id":"source/_posts/blog/.git/logs/refs/heads/main","hash":"1f49be8405326ba868c6660d54ade7b2099440ba","modified":1737108510794},{"_id":"source/_posts/blog/.git/refs/remotes/origin/HEAD","hash":"5ae7c22895c35af5f56ba1891a4dd62b4dc1f955","modified":1737108510792},{"_id":"source/_posts/blog/.git/refs/remotes/origin/main","hash":"f683dfa428a06af08eaf4f3c67f9ca22224e8118","modified":1737108510792},{"_id":"source/_posts/blog/.git/logs/refs/remotes/origin/HEAD","hash":"4314d1a1e70ad91cf351a10accefad791ab394b7","modified":1737108510793},{"_id":"source/_posts/blog/.git/logs/refs/remotes/origin/main","hash":"f1b2e667e8e016cbff2ebce0b8dff34910440ddd","modified":1737108510793},{"_id":"source/_posts/blog/create-google-account/gen-email.png","hash":"9a92fe0637997d73b810a45dfc1a0e5e1e2adbc0","modified":1737108510801},{"_id":"source/_posts/blog/create-google-account/recovery-email.png","hash":"87def69564682f08d870cd3d2df217cff5720917","modified":1737108510803},{"_id":"source/_posts/blog/create-google-account/user-password.png","hash":"3a8ab43ef12d1cd5205e69a59149c63c68dbd21d","modified":1737108510804},{"_id":"source/_posts/blog/termux-for-android/pictures/install-termux.png","hash":"50c98100a148ad61e1cd79089962206381647d4d","modified":1737108510806},{"_id":"source/_posts/blog/termux-for-android/pictures/install-ubuntu.png","hash":"dea5f30a9fd346a839f493998ab677415927d989","modified":1737108510807},{"_id":"source/_posts/blog/termux-for-android/pictures/termux.png","hash":"8ac29f72d411997fa03239ce0439272fc1be1413","modified":1737108510810},{"_id":"source/_posts/blog/下载chrome安卓版/apk-downloader/apk-downloader-ui.png","hash":"e8f1174a8c3584f38cc8c3acbb094c4c05b205d2","modified":1737108510812},{"_id":"source/_posts/blog/create-google-account/create-a-google-account.png","hash":"03df1a57b5b57394b7e75ad3df6556508d18a50b","modified":1737108510800},{"_id":"source/_posts/blog/cloud-server/pictures/abeiyum.png","hash":"19c0ce798038693a0f82df8ebb7f7e8e008c66e9","modified":1737108510797},{"_id":"source/_posts/blog/termux-for-android/pictures/open-termux.png","hash":"eb2f1a29cd73cc625b6ad631ba7f2a07027490ac","modified":1737108510808},{"_id":"source/_posts/blog/下载chrome安卓版/apk-downloader/download-chrome.png","hash":"0e9423e8c2404ed2183761028a439469a1388fc0","modified":1737108510813},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/click-chrome.png","hash":"12896241e823f39f4cdbd08cf0a35770758f22d8","modified":1737108510815},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/get-chrome-url.png","hash":"7c6db0f6a3b9f3b3ff2dacdbc5618adca906f3d5","modified":1737108510817},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/share-url.png","hash":"26b424b4a46adc2e0758992dcfb3f8c8588a533b","modified":1737108510827},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/search-chrome.png","hash":"b27e32a6bc254e3243aded3a58caf4dcacb01143","modified":1737108510826},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/google-play-url.png","hash":"f0125bde63141e21af68dce9c150dfb0223dbcba","modified":1737108510823},{"_id":"source/_posts/blog/.git/objects/pack/pack-19ed93ea1fa28f11d57746ae2248244754ca7143.pack","hash":"c2732ea0665006315ceac7c54a3a1c10a4225cf0","modified":1737108510788}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-01-17T10:07:27.295Z","updated":"2025-01-17T10:07:27.295Z","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfa0000p5jx3aa228fe","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"_content":"[toc]\n\n# 简介  \n作为一名工程师，都了解**记录**的重要性，毕竟**好记性不如烂笔头嘛**。而作为一个新手工程师，本人显然没有这个好习惯，但在工作两连后的今天(2024.12.8)，突然意识到做记录的必要性。所以，我要开启我的blog！\n# 为什么在github\n耳濡目染之中，让我觉得 \"开源\" 将比其他任何方式更能够促进技术的发展和人类的进步(说的有点儿假大空了哈哈哈)，人类的经验教训，也应该是共享的。而不是向某些平台那样，拿着**借鉴**(抄袭)了前辈们总结的东西，然后稍加包装之后打着**原创**的旗号割韭菜,想来还真是蛮讨厌的。**github**上的所有东西都是“开源”的，那么我的网络笔记优先放在这里也再好不过了(主要还是免费哈哈哈)。\n","source":"_posts/blog/README.md","raw":"[toc]\n\n# 简介  \n作为一名工程师，都了解**记录**的重要性，毕竟**好记性不如烂笔头嘛**。而作为一个新手工程师，本人显然没有这个好习惯，但在工作两连后的今天(2024.12.8)，突然意识到做记录的必要性。所以，我要开启我的blog！\n# 为什么在github\n耳濡目染之中，让我觉得 \"开源\" 将比其他任何方式更能够促进技术的发展和人类的进步(说的有点儿假大空了哈哈哈)，人类的经验教训，也应该是共享的。而不是向某些平台那样，拿着**借鉴**(抄袭)了前辈们总结的东西，然后稍加包装之后打着**原创**的旗号割韭菜,想来还真是蛮讨厌的。**github**上的所有东西都是“开源”的，那么我的网络笔记优先放在这里也再好不过了(主要还是免费哈哈哈)。\n","slug":"blog/README","published":1,"date":"2025-01-17T10:08:30.768Z","updated":"2025-01-17T10:08:30.768Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtff0001p5jxhq2he7ee","content":"<p>[toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>作为一名工程师，都了解<strong>记录</strong>的重要性，毕竟<strong>好记性不如烂笔头嘛</strong>。而作为一个新手工程师，本人显然没有这个好习惯，但在工作两连后的今天(2024.12.8)，突然意识到做记录的必要性。所以，我要开启我的blog！</p>\n<h1 id=\"为什么在github\"><a href=\"#为什么在github\" class=\"headerlink\" title=\"为什么在github\"></a>为什么在github</h1><p>耳濡目染之中，让我觉得 “开源” 将比其他任何方式更能够促进技术的发展和人类的进步(说的有点儿假大空了哈哈哈)，人类的经验教训，也应该是共享的。而不是向某些平台那样，拿着<strong>借鉴</strong>(抄袭)了前辈们总结的东西，然后稍加包装之后打着<strong>原创</strong>的旗号割韭菜,想来还真是蛮讨厌的。<strong>github</strong>上的所有东西都是“开源”的，那么我的网络笔记优先放在这里也再好不过了(主要还是免费哈哈哈)。</p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>作为一名工程师，都了解<strong>记录</strong>的重要性，毕竟<strong>好记性不如烂笔头嘛</strong>。而作为一个新手工程师，本人显然没有这个好习惯，但在工作两连后的今天(2024.12.8)，突然意识到做记录的必要性。所以，我要开启我的blog！</p>\n<h1 id=\"为什么在github\"><a href=\"#为什么在github\" class=\"headerlink\" title=\"为什么在github\"></a>为什么在github</h1><p>耳濡目染之中，让我觉得 “开源” 将比其他任何方式更能够促进技术的发展和人类的进步(说的有点儿假大空了哈哈哈)，人类的经验教训，也应该是共享的。而不是向某些平台那样，拿着<strong>借鉴</strong>(抄袭)了前辈们总结的东西，然后稍加包装之后打着<strong>原创</strong>的旗号割韭菜,想来还真是蛮讨厌的。<strong>github</strong>上的所有东西都是“开源”的，那么我的网络笔记优先放在这里也再好不过了(主要还是免费哈哈哈)。</p>\n"},{"_content":"# C语言中巧用哈希\n## 前言\n&emsp;今天在刷 **leetcode** 的时候遇到一个 [简单题目](https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/)，要求求出字符串中的最大的不重复字符的字串长度。  \n&emsp;这个题目本身不难，但是在处理如何判断某个字符是否已经出现过的问题上，就出现了问题。看了下其他语言都可以使用自带的 **哈希** 来解决这个问题，但是 c 呢，就有点难搞了。当然也有为 c 开发的第三方库，但是如何自己解决呢？——我想的是用数组，没错，就是 **整形数组**\n## 整体思路\n* 问题转化\n    * 将对符号的标记转化为对数字的标记\n    * 将对数字的标记再转化为对变量数位的标记——独热\n* 通过位操作完成对某个特定位的标记和检测\n\n## 原理\n### 问题转化过程\n* 将对**符号**的标记转变为对**数字**的标记  \n在哈希中，要求键值对之间是1对1的关系。在 ASCII 中，她的编号和符号之间也是一对一的关系。有了这样的对应关系，我们就可以把题目要求的符号的标记问题，转换为对数字的处理。\n* 将对**数字**的标记转换为对整形变量**位**的标记  \n如果想标记一个数字，是否出现过，最直接的办法是遍历，一个更快的办法是把数字转变为相应的位，让后通过 **位操作** 来处理，当然，这也是c语言的强项  \n示例：\n    1. 标记数字 8\n    ```c\n    unsigned int hash = 0; // 初始化\n    hash |= 1<<8; //将 hash 的第8为设置为1,表示8存在过了\n    ```\n    2. 判断 8 是否存在\n    ```c\n    if (hash & (unsigned int)1<<8) {\n        printf(\"8 已存在\\n\")\n    } else {\n    printf(\"8 还未被标记\\n\")\n    }\n    ```\n### 单个整型变量的局限性\n* 无符号整形(unsigned int) 只有32位，那就意味着她能标记的范围是[1~32]——**独热表示法**, 如何标记大于32的数字呢？用数组。\n### 使用无符号整型数组扩展可以标记的数字的上限\n* 单个变量中标记数字时，可以直接将数字想象称在整型变量中的数位，在数组中，则需要知道应该在数字在整个数组中的数位,那么，可以这么办——通过整除确定数组下标，通过取余知道在整型变量中数位。  \n示例：标记数字 120  \n    1. 确定数组大小:120/32 = 3....24，则整型数组大小可谓4  \n    2. 标记  \n    ```c\n    int index = 120 / 32;\n    int position = 120 % 32;\n    unsigned int hash[4] = {0};\n    hash[index] |= (unsigned int)1<<position;\n    ```\n># NOTE\n> 1. 笔者在处理的过程中使用的是无符号整形变量，当然也可使使用其他类型，诸如`char, shot, long`等，处理思路都是一样的\n## 解题代码\n### 接口\n```c\n\tint s_len; // 字符串长度\n\tint count; //最长不重复字符串的长度\n\n\t// ASSCII码总共128\n\t// 找偏移位:'x'\n\t// 'x' 字符相对 0 偏移为：'x' - 0  = 120 -0 = 120\n\t// 对应 hash[]中字节的位置： index = 120 / 32 = 3\n\t// 对应 字节中位的位置：position = 120 $ 32 = 24\n\t// 则 x 可在hash中被标记：hash[index] |= 1<<position\n\tunsigned int hash[4] = {0}; // 哈希 32 x 4 = 128\n\n\tcount = 0;\n\tfor (s_len = 0; *(s+s_len) != '\\0'; s_len++); // 获得 s 的长度\n\n\tint r_ptr = 0; // 右边界指针\n\tint index; // 字符的索引\n\tint position; // 整型变量内部偏移\n\tchar c;\n\tfor (int i = 0; i < s_len; i++) {\n\n\t\t// 滑动左边界：取消对 s[i-1]的标记\n\t\tif (i > 0) {\n\t\t\tc = s[i-1];\n\t\t\tindex = (c - 0) / 32;\n\t\t\tposition = (c - 0) % 32;\n\t\t\thash[index] &= ~((unsigned int)1<<position); //将 s[i]存于 hash中\n\t\t}\n\n\t\tfor (; r_ptr < s_len;) {\n\t\t\tc = s[r_ptr];\n\n\t\t\tindex = (c - 0) / 32;\n\t\t\tposition = (c - 0) % 32;\n\t\t\tif (hash[index] & (unsigned int)1<<position) {\n\t\t\t\tbreak; //已经被标记过\n\t\t\t} else {\n\t\t\t\thash[index] |= (unsigned int)1<<position; //将 s[r_ptr]存于 hash中\n\t\t\t\tr_ptr++; // 滑动右边界\n\t\t\t}\n\t\t}\n\t\t\n\t\tcount = count > r_ptr-i ? count : r_ptr-i;\n\t}\n\n\treturn count;\n}\n\n```\n### 测试 \n```c\n#include <stdio.h>\n\nstruct data_type {\n\tchar* s;\n\tint expected_value;\n};\nenum {\n\tcaseBASE = -1,\n\tcase1,\n\tcase2,\n\tcase3,\n\tcase4,\n\tcase5,\n\tcaseTOP\n};\nstruct data_type test_data[] = {\n\t[case1] = {\"abcabcbb\", 3},\n\t[case2] = {\"bbbbb\", 1},\n\t[case3] = {\"pwwkew\", 3},\n\t[case4] = {\"sjdgisgjisg\", 5},\n\t[case5] = {\"abcABC,.ab\", 8},\n};\n\nint main(int argc, char* argv[])\n{\n\t\n\tchar* s = NULL;\n\tint expected_value = 0;\n\tint ret = 0;\n\tfor (int i = caseBASE + 1; i < caseTOP; i++) {\n\t\ts = test_data[i].s;\n\t\texpected_value = test_data[i].expected_value;\n\n\t\tret = lengthOfLongestSubstring(s);\n\t\tprintf(\"testcase No.%d \", i);\n\t\tif (ret == expected_value) {\n\t\t\tprintf(\"pass\\n\");\n\t\t} else {\n\t\t\tprintf(\"=========================\\n\");\n\t\t\tprintf(\"fail:ret=%d\\n\", ret);\n\t\t\tprintf(\"expected_value:%d\\n\", expected_value);\n\t\t\tprintf(\"=========================\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n","source":"_posts/blog/hash_in_c.md","raw":"# C语言中巧用哈希\n## 前言\n&emsp;今天在刷 **leetcode** 的时候遇到一个 [简单题目](https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/)，要求求出字符串中的最大的不重复字符的字串长度。  \n&emsp;这个题目本身不难，但是在处理如何判断某个字符是否已经出现过的问题上，就出现了问题。看了下其他语言都可以使用自带的 **哈希** 来解决这个问题，但是 c 呢，就有点难搞了。当然也有为 c 开发的第三方库，但是如何自己解决呢？——我想的是用数组，没错，就是 **整形数组**\n## 整体思路\n* 问题转化\n    * 将对符号的标记转化为对数字的标记\n    * 将对数字的标记再转化为对变量数位的标记——独热\n* 通过位操作完成对某个特定位的标记和检测\n\n## 原理\n### 问题转化过程\n* 将对**符号**的标记转变为对**数字**的标记  \n在哈希中，要求键值对之间是1对1的关系。在 ASCII 中，她的编号和符号之间也是一对一的关系。有了这样的对应关系，我们就可以把题目要求的符号的标记问题，转换为对数字的处理。\n* 将对**数字**的标记转换为对整形变量**位**的标记  \n如果想标记一个数字，是否出现过，最直接的办法是遍历，一个更快的办法是把数字转变为相应的位，让后通过 **位操作** 来处理，当然，这也是c语言的强项  \n示例：\n    1. 标记数字 8\n    ```c\n    unsigned int hash = 0; // 初始化\n    hash |= 1<<8; //将 hash 的第8为设置为1,表示8存在过了\n    ```\n    2. 判断 8 是否存在\n    ```c\n    if (hash & (unsigned int)1<<8) {\n        printf(\"8 已存在\\n\")\n    } else {\n    printf(\"8 还未被标记\\n\")\n    }\n    ```\n### 单个整型变量的局限性\n* 无符号整形(unsigned int) 只有32位，那就意味着她能标记的范围是[1~32]——**独热表示法**, 如何标记大于32的数字呢？用数组。\n### 使用无符号整型数组扩展可以标记的数字的上限\n* 单个变量中标记数字时，可以直接将数字想象称在整型变量中的数位，在数组中，则需要知道应该在数字在整个数组中的数位,那么，可以这么办——通过整除确定数组下标，通过取余知道在整型变量中数位。  \n示例：标记数字 120  \n    1. 确定数组大小:120/32 = 3....24，则整型数组大小可谓4  \n    2. 标记  \n    ```c\n    int index = 120 / 32;\n    int position = 120 % 32;\n    unsigned int hash[4] = {0};\n    hash[index] |= (unsigned int)1<<position;\n    ```\n># NOTE\n> 1. 笔者在处理的过程中使用的是无符号整形变量，当然也可使使用其他类型，诸如`char, shot, long`等，处理思路都是一样的\n## 解题代码\n### 接口\n```c\n\tint s_len; // 字符串长度\n\tint count; //最长不重复字符串的长度\n\n\t// ASSCII码总共128\n\t// 找偏移位:'x'\n\t// 'x' 字符相对 0 偏移为：'x' - 0  = 120 -0 = 120\n\t// 对应 hash[]中字节的位置： index = 120 / 32 = 3\n\t// 对应 字节中位的位置：position = 120 $ 32 = 24\n\t// 则 x 可在hash中被标记：hash[index] |= 1<<position\n\tunsigned int hash[4] = {0}; // 哈希 32 x 4 = 128\n\n\tcount = 0;\n\tfor (s_len = 0; *(s+s_len) != '\\0'; s_len++); // 获得 s 的长度\n\n\tint r_ptr = 0; // 右边界指针\n\tint index; // 字符的索引\n\tint position; // 整型变量内部偏移\n\tchar c;\n\tfor (int i = 0; i < s_len; i++) {\n\n\t\t// 滑动左边界：取消对 s[i-1]的标记\n\t\tif (i > 0) {\n\t\t\tc = s[i-1];\n\t\t\tindex = (c - 0) / 32;\n\t\t\tposition = (c - 0) % 32;\n\t\t\thash[index] &= ~((unsigned int)1<<position); //将 s[i]存于 hash中\n\t\t}\n\n\t\tfor (; r_ptr < s_len;) {\n\t\t\tc = s[r_ptr];\n\n\t\t\tindex = (c - 0) / 32;\n\t\t\tposition = (c - 0) % 32;\n\t\t\tif (hash[index] & (unsigned int)1<<position) {\n\t\t\t\tbreak; //已经被标记过\n\t\t\t} else {\n\t\t\t\thash[index] |= (unsigned int)1<<position; //将 s[r_ptr]存于 hash中\n\t\t\t\tr_ptr++; // 滑动右边界\n\t\t\t}\n\t\t}\n\t\t\n\t\tcount = count > r_ptr-i ? count : r_ptr-i;\n\t}\n\n\treturn count;\n}\n\n```\n### 测试 \n```c\n#include <stdio.h>\n\nstruct data_type {\n\tchar* s;\n\tint expected_value;\n};\nenum {\n\tcaseBASE = -1,\n\tcase1,\n\tcase2,\n\tcase3,\n\tcase4,\n\tcase5,\n\tcaseTOP\n};\nstruct data_type test_data[] = {\n\t[case1] = {\"abcabcbb\", 3},\n\t[case2] = {\"bbbbb\", 1},\n\t[case3] = {\"pwwkew\", 3},\n\t[case4] = {\"sjdgisgjisg\", 5},\n\t[case5] = {\"abcABC,.ab\", 8},\n};\n\nint main(int argc, char* argv[])\n{\n\t\n\tchar* s = NULL;\n\tint expected_value = 0;\n\tint ret = 0;\n\tfor (int i = caseBASE + 1; i < caseTOP; i++) {\n\t\ts = test_data[i].s;\n\t\texpected_value = test_data[i].expected_value;\n\n\t\tret = lengthOfLongestSubstring(s);\n\t\tprintf(\"testcase No.%d \", i);\n\t\tif (ret == expected_value) {\n\t\t\tprintf(\"pass\\n\");\n\t\t} else {\n\t\t\tprintf(\"=========================\\n\");\n\t\t\tprintf(\"fail:ret=%d\\n\", ret);\n\t\t\tprintf(\"expected_value:%d\\n\", expected_value);\n\t\t\tprintf(\"=========================\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n","slug":"blog/hash_in_c","published":1,"date":"2025-01-17T10:08:30.768Z","updated":"2025-01-17T10:08:30.768Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfh0002p5jxht3iezhz","content":"<h1 id=\"C语言中巧用哈希\"><a href=\"#C语言中巧用哈希\" class=\"headerlink\" title=\"C语言中巧用哈希\"></a>C语言中巧用哈希</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;今天在刷 <strong>leetcode</strong> 的时候遇到一个 <a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\">简单题目</a>，要求求出字符串中的最大的不重复字符的字串长度。<br>&emsp;这个题目本身不难，但是在处理如何判断某个字符是否已经出现过的问题上，就出现了问题。看了下其他语言都可以使用自带的 <strong>哈希</strong> 来解决这个问题，但是 c 呢，就有点难搞了。当然也有为 c 开发的第三方库，但是如何自己解决呢？——我想的是用数组，没错，就是 <strong>整形数组</strong></p>\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><ul>\n<li>问题转化<ul>\n<li>将对符号的标记转化为对数字的标记</li>\n<li>将对数字的标记再转化为对变量数位的标记——独热</li>\n</ul>\n</li>\n<li>通过位操作完成对某个特定位的标记和检测</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"问题转化过程\"><a href=\"#问题转化过程\" class=\"headerlink\" title=\"问题转化过程\"></a>问题转化过程</h3><ul>\n<li>将对<strong>符号</strong>的标记转变为对<strong>数字</strong>的标记<br>在哈希中，要求键值对之间是1对1的关系。在 ASCII 中，她的编号和符号之间也是一对一的关系。有了这样的对应关系，我们就可以把题目要求的符号的标记问题，转换为对数字的处理。</li>\n<li>将对<strong>数字</strong>的标记转换为对整形变量<strong>位</strong>的标记<br>如果想标记一个数字，是否出现过，最直接的办法是遍历，一个更快的办法是把数字转变为相应的位，让后通过 <strong>位操作</strong> 来处理，当然，这也是c语言的强项<br>示例：<ol>\n<li>标记数字 8</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">hash |= <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>; <span class=\"comment\">//将 hash 的第8为设置为1,表示8存在过了</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>判断 8 是否存在</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (hash &amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;8 已存在\\n&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;8 还未被标记\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"单个整型变量的局限性\"><a href=\"#单个整型变量的局限性\" class=\"headerlink\" title=\"单个整型变量的局限性\"></a>单个整型变量的局限性</h3><ul>\n<li>无符号整形(unsigned int) 只有32位，那就意味着她能标记的范围是[1~32]——<strong>独热表示法</strong>, 如何标记大于32的数字呢？用数组。</li>\n</ul>\n<h3 id=\"使用无符号整型数组扩展可以标记的数字的上限\"><a href=\"#使用无符号整型数组扩展可以标记的数字的上限\" class=\"headerlink\" title=\"使用无符号整型数组扩展可以标记的数字的上限\"></a>使用无符号整型数组扩展可以标记的数字的上限</h3><ul>\n<li>单个变量中标记数字时，可以直接将数字想象称在整型变量中的数位，在数组中，则需要知道应该在数字在整个数组中的数位,那么，可以这么办——通过整除确定数组下标，通过取余知道在整型变量中数位。<br>示例：标记数字 120  <ol>\n<li>确定数组大小:120&#x2F;32 &#x3D; 3….24，则整型数组大小可谓4  </li>\n<li>标记</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> index = <span class=\"number\">120</span> / <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> position = <span class=\"number\">120</span> % <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">hash[index] |= (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><ol>\n<li>笔者在处理的过程中使用的是无符号整形变量，当然也可使使用其他类型，诸如<code>char, shot, long</code>等，处理思路都是一样的</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"type\">int</span> s_len; <span class=\"comment\">// 字符串长度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count; <span class=\"comment\">//最长不重复字符串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ASSCII码总共128</span></span><br><span class=\"line\">\t<span class=\"comment\">// 找偏移位:&#x27;x&#x27;</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#x27;x&#x27; 字符相对 0 偏移为：&#x27;x&#x27; - 0  = 120 -0 = 120</span></span><br><span class=\"line\">\t<span class=\"comment\">// 对应 hash[]中字节的位置： index = 120 / 32 = 3</span></span><br><span class=\"line\">\t<span class=\"comment\">// 对应 字节中位的位置：position = 120 $ 32 = 24</span></span><br><span class=\"line\">\t<span class=\"comment\">// 则 x 可在hash中被标记：hash[index] |= 1&lt;&lt;position</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 哈希 32 x 4 = 128</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (s_len = <span class=\"number\">0</span>; *(s+s_len) != <span class=\"string\">&#x27;\\0&#x27;</span>; s_len++); <span class=\"comment\">// 获得 s 的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> r_ptr = <span class=\"number\">0</span>; <span class=\"comment\">// 右边界指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> index; <span class=\"comment\">// 字符的索引</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> position; <span class=\"comment\">// 整型变量内部偏移</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s_len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 滑动左边界：取消对 s[i-1]的标记</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tc = s[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t\tindex = (c - <span class=\"number\">0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\tposition = (c - <span class=\"number\">0</span>) % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\thash[index] &amp;= ~((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position); <span class=\"comment\">//将 s[i]存于 hash中</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; r_ptr &lt; s_len;) &#123;</span><br><span class=\"line\">\t\t\tc = s[r_ptr];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tindex = (c - <span class=\"number\">0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\tposition = (c - <span class=\"number\">0</span>) % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hash[index] &amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//已经被标记过</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\thash[index] |= (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position; <span class=\"comment\">//将 s[r_ptr]存于 hash中</span></span><br><span class=\"line\">\t\t\t\tr_ptr++; <span class=\"comment\">// 滑动右边界</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcount = count &gt; r_ptr-i ? count : r_ptr-i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data_type</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* s;</span><br><span class=\"line\">\t<span class=\"type\">int</span> expected_value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span></span><br><span class=\"line\">\tcaseBASE = <span class=\"number\">-1</span>,</span><br><span class=\"line\">\tcase1,</span><br><span class=\"line\">\tcase2,</span><br><span class=\"line\">\tcase3,</span><br><span class=\"line\">\tcase4,</span><br><span class=\"line\">\tcase5,</span><br><span class=\"line\">\tcaseTOP</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data_type</span> <span class=\"title\">test_data</span>[] =</span> &#123;</span><br><span class=\"line\">\t[case1] = &#123;<span class=\"string\">&quot;abcabcbb&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t[case2] = &#123;<span class=\"string\">&quot;bbbbb&quot;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t[case3] = &#123;<span class=\"string\">&quot;pwwkew&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t[case4] = &#123;<span class=\"string\">&quot;sjdgisgjisg&quot;</span>, <span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">\t[case5] = &#123;<span class=\"string\">&quot;abcABC,.ab&quot;</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* s = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> expected_value = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = caseBASE + <span class=\"number\">1</span>; i &lt; caseTOP; i++) &#123;</span><br><span class=\"line\">\t\ts = test_data[i].s;</span><br><span class=\"line\">\t\texpected_value = test_data[i].expected_value;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tret = lengthOfLongestSubstring(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;testcase No.%d &quot;</span>, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret == expected_value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pass\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;=========================\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fail:ret=%d\\n&quot;</span>, ret);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;expected_value:%d\\n&quot;</span>, expected_value);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;=========================\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"C语言中巧用哈希\"><a href=\"#C语言中巧用哈希\" class=\"headerlink\" title=\"C语言中巧用哈希\"></a>C语言中巧用哈希</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;今天在刷 <strong>leetcode</strong> 的时候遇到一个 <a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\">简单题目</a>，要求求出字符串中的最大的不重复字符的字串长度。<br>&emsp;这个题目本身不难，但是在处理如何判断某个字符是否已经出现过的问题上，就出现了问题。看了下其他语言都可以使用自带的 <strong>哈希</strong> 来解决这个问题，但是 c 呢，就有点难搞了。当然也有为 c 开发的第三方库，但是如何自己解决呢？——我想的是用数组，没错，就是 <strong>整形数组</strong></p>\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><ul>\n<li>问题转化<ul>\n<li>将对符号的标记转化为对数字的标记</li>\n<li>将对数字的标记再转化为对变量数位的标记——独热</li>\n</ul>\n</li>\n<li>通过位操作完成对某个特定位的标记和检测</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"问题转化过程\"><a href=\"#问题转化过程\" class=\"headerlink\" title=\"问题转化过程\"></a>问题转化过程</h3><ul>\n<li>将对<strong>符号</strong>的标记转变为对<strong>数字</strong>的标记<br>在哈希中，要求键值对之间是1对1的关系。在 ASCII 中，她的编号和符号之间也是一对一的关系。有了这样的对应关系，我们就可以把题目要求的符号的标记问题，转换为对数字的处理。</li>\n<li>将对<strong>数字</strong>的标记转换为对整形变量<strong>位</strong>的标记<br>如果想标记一个数字，是否出现过，最直接的办法是遍历，一个更快的办法是把数字转变为相应的位，让后通过 <strong>位操作</strong> 来处理，当然，这也是c语言的强项<br>示例：<ol>\n<li>标记数字 8</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">hash |= <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>; <span class=\"comment\">//将 hash 的第8为设置为1,表示8存在过了</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>判断 8 是否存在</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (hash &amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;8 已存在\\n&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;8 还未被标记\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"单个整型变量的局限性\"><a href=\"#单个整型变量的局限性\" class=\"headerlink\" title=\"单个整型变量的局限性\"></a>单个整型变量的局限性</h3><ul>\n<li>无符号整形(unsigned int) 只有32位，那就意味着她能标记的范围是[1~32]——<strong>独热表示法</strong>, 如何标记大于32的数字呢？用数组。</li>\n</ul>\n<h3 id=\"使用无符号整型数组扩展可以标记的数字的上限\"><a href=\"#使用无符号整型数组扩展可以标记的数字的上限\" class=\"headerlink\" title=\"使用无符号整型数组扩展可以标记的数字的上限\"></a>使用无符号整型数组扩展可以标记的数字的上限</h3><ul>\n<li>单个变量中标记数字时，可以直接将数字想象称在整型变量中的数位，在数组中，则需要知道应该在数字在整个数组中的数位,那么，可以这么办——通过整除确定数组下标，通过取余知道在整型变量中数位。<br>示例：标记数字 120  <ol>\n<li>确定数组大小:120&#x2F;32 &#x3D; 3….24，则整型数组大小可谓4  </li>\n<li>标记</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> index = <span class=\"number\">120</span> / <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> position = <span class=\"number\">120</span> % <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">hash[index] |= (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><ol>\n<li>笔者在处理的过程中使用的是无符号整形变量，当然也可使使用其他类型，诸如<code>char, shot, long</code>等，处理思路都是一样的</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"type\">int</span> s_len; <span class=\"comment\">// 字符串长度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count; <span class=\"comment\">//最长不重复字符串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ASSCII码总共128</span></span><br><span class=\"line\">\t<span class=\"comment\">// 找偏移位:&#x27;x&#x27;</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#x27;x&#x27; 字符相对 0 偏移为：&#x27;x&#x27; - 0  = 120 -0 = 120</span></span><br><span class=\"line\">\t<span class=\"comment\">// 对应 hash[]中字节的位置： index = 120 / 32 = 3</span></span><br><span class=\"line\">\t<span class=\"comment\">// 对应 字节中位的位置：position = 120 $ 32 = 24</span></span><br><span class=\"line\">\t<span class=\"comment\">// 则 x 可在hash中被标记：hash[index] |= 1&lt;&lt;position</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 哈希 32 x 4 = 128</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (s_len = <span class=\"number\">0</span>; *(s+s_len) != <span class=\"string\">&#x27;\\0&#x27;</span>; s_len++); <span class=\"comment\">// 获得 s 的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> r_ptr = <span class=\"number\">0</span>; <span class=\"comment\">// 右边界指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> index; <span class=\"comment\">// 字符的索引</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> position; <span class=\"comment\">// 整型变量内部偏移</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s_len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 滑动左边界：取消对 s[i-1]的标记</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tc = s[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t\tindex = (c - <span class=\"number\">0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\tposition = (c - <span class=\"number\">0</span>) % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\thash[index] &amp;= ~((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position); <span class=\"comment\">//将 s[i]存于 hash中</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; r_ptr &lt; s_len;) &#123;</span><br><span class=\"line\">\t\t\tc = s[r_ptr];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tindex = (c - <span class=\"number\">0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\tposition = (c - <span class=\"number\">0</span>) % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hash[index] &amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//已经被标记过</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\thash[index] |= (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position; <span class=\"comment\">//将 s[r_ptr]存于 hash中</span></span><br><span class=\"line\">\t\t\t\tr_ptr++; <span class=\"comment\">// 滑动右边界</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcount = count &gt; r_ptr-i ? count : r_ptr-i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data_type</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* s;</span><br><span class=\"line\">\t<span class=\"type\">int</span> expected_value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span></span><br><span class=\"line\">\tcaseBASE = <span class=\"number\">-1</span>,</span><br><span class=\"line\">\tcase1,</span><br><span class=\"line\">\tcase2,</span><br><span class=\"line\">\tcase3,</span><br><span class=\"line\">\tcase4,</span><br><span class=\"line\">\tcase5,</span><br><span class=\"line\">\tcaseTOP</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data_type</span> <span class=\"title\">test_data</span>[] =</span> &#123;</span><br><span class=\"line\">\t[case1] = &#123;<span class=\"string\">&quot;abcabcbb&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t[case2] = &#123;<span class=\"string\">&quot;bbbbb&quot;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t[case3] = &#123;<span class=\"string\">&quot;pwwkew&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t[case4] = &#123;<span class=\"string\">&quot;sjdgisgjisg&quot;</span>, <span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">\t[case5] = &#123;<span class=\"string\">&quot;abcABC,.ab&quot;</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* s = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> expected_value = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = caseBASE + <span class=\"number\">1</span>; i &lt; caseTOP; i++) &#123;</span><br><span class=\"line\">\t\ts = test_data[i].s;</span><br><span class=\"line\">\t\texpected_value = test_data[i].expected_value;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tret = lengthOfLongestSubstring(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;testcase No.%d &quot;</span>, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret == expected_value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pass\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;=========================\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fail:ret=%d\\n&quot;</span>, ret);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;expected_value:%d\\n&quot;</span>, expected_value);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;=========================\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# ubuntu中使用中文输入法\n# 前言\n选择那个输入法，对笔者来说需要考虑以下几点：  \n1. 安装简易程度：安装配置越简单越好;\n2. 易用程度：对笔者来说也就是联想词是否更符合日常使用习惯了;\n3. 对环境的依赖：就是喜欢哪个语言框架以及系统对该框架的支持如何。\n# 抉择\n## ibus 下的中文输入法\nibus下面的输入法的安装、配置都比较简单。但是令笔者不如意的一点是联想词不大符合个人用词习惯，需要 <tab> 好几下或者换页查看好几下才能找到想用的词，尤其是在连续输入好几个字的拼音时。\n## fcitx 下的中文输入法\n### [搜狗输入法](https://shurufa.sogou.com/linux)\n1. 安装  \n安装时使用搜狗官方提供的[安装文档](https://shurufa.sogou.com/linux/guide)进行即可。\n2. 雷点  \n要想在安装并配置结束之后正常使用，就需要放弃使用最新的wayland而去使用x11。因为在wayland中切换至搜狗输入法时会出现屏幕闪烁的情况，这时是无法使用输入法的，就很难受。针对这一点，笔者没有找到好的解决办法。\n### google input\n选择使用 **谷歌输入法** 的原因简单且直接:我想使用 wayland 而不是 x11。这一点就让我需要找一个搜狗输入法的平替软件，google了一下，看到了 google input，安装配置都很简单，目前用着还不错（不好用了在看，嘻嘻）。\n1. 安装\n```shell\nsudo apt intall fcitx fcitx-googlepinyin\n```\n2. 配置\n    * 打开 设置 》 系统 》 区域与语言 》 管理安装的语言:  \n        * 将键盘输入法系统改为”fcitx4“\n        * 点击“应用到整个系统”\n    * 重启系统即可食用。\n","source":"_posts/blog/input_method-on-ubuntu.md","raw":"# ubuntu中使用中文输入法\n# 前言\n选择那个输入法，对笔者来说需要考虑以下几点：  \n1. 安装简易程度：安装配置越简单越好;\n2. 易用程度：对笔者来说也就是联想词是否更符合日常使用习惯了;\n3. 对环境的依赖：就是喜欢哪个语言框架以及系统对该框架的支持如何。\n# 抉择\n## ibus 下的中文输入法\nibus下面的输入法的安装、配置都比较简单。但是令笔者不如意的一点是联想词不大符合个人用词习惯，需要 <tab> 好几下或者换页查看好几下才能找到想用的词，尤其是在连续输入好几个字的拼音时。\n## fcitx 下的中文输入法\n### [搜狗输入法](https://shurufa.sogou.com/linux)\n1. 安装  \n安装时使用搜狗官方提供的[安装文档](https://shurufa.sogou.com/linux/guide)进行即可。\n2. 雷点  \n要想在安装并配置结束之后正常使用，就需要放弃使用最新的wayland而去使用x11。因为在wayland中切换至搜狗输入法时会出现屏幕闪烁的情况，这时是无法使用输入法的，就很难受。针对这一点，笔者没有找到好的解决办法。\n### google input\n选择使用 **谷歌输入法** 的原因简单且直接:我想使用 wayland 而不是 x11。这一点就让我需要找一个搜狗输入法的平替软件，google了一下，看到了 google input，安装配置都很简单，目前用着还不错（不好用了在看，嘻嘻）。\n1. 安装\n```shell\nsudo apt intall fcitx fcitx-googlepinyin\n```\n2. 配置\n    * 打开 设置 》 系统 》 区域与语言 》 管理安装的语言:  \n        * 将键盘输入法系统改为”fcitx4“\n        * 点击“应用到整个系统”\n    * 重启系统即可食用。\n","slug":"blog/input_method-on-ubuntu","published":1,"date":"2025-01-17T10:08:30.769Z","updated":"2025-01-17T10:08:30.769Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfi0003p5jxckuybto4","content":"<h1 id=\"ubuntu中使用中文输入法\"><a href=\"#ubuntu中使用中文输入法\" class=\"headerlink\" title=\"ubuntu中使用中文输入法\"></a>ubuntu中使用中文输入法</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>选择那个输入法，对笔者来说需要考虑以下几点：  </p>\n<ol>\n<li>安装简易程度：安装配置越简单越好;</li>\n<li>易用程度：对笔者来说也就是联想词是否更符合日常使用习惯了;</li>\n<li>对环境的依赖：就是喜欢哪个语言框架以及系统对该框架的支持如何。</li>\n</ol>\n<h1 id=\"抉择\"><a href=\"#抉择\" class=\"headerlink\" title=\"抉择\"></a>抉择</h1><h2 id=\"ibus-下的中文输入法\"><a href=\"#ibus-下的中文输入法\" class=\"headerlink\" title=\"ibus 下的中文输入法\"></a>ibus 下的中文输入法</h2><p>ibus下面的输入法的安装、配置都比较简单。但是令笔者不如意的一点是联想词不大符合个人用词习惯，需要 <tab> 好几下或者换页查看好几下才能找到想用的词，尤其是在连续输入好几个字的拼音时。</p>\n<h2 id=\"fcitx-下的中文输入法\"><a href=\"#fcitx-下的中文输入法\" class=\"headerlink\" title=\"fcitx 下的中文输入法\"></a>fcitx 下的中文输入法</h2><h3 id=\"搜狗输入法\"><a href=\"#搜狗输入法\" class=\"headerlink\" title=\"搜狗输入法\"></a><a href=\"https://shurufa.sogou.com/linux\">搜狗输入法</a></h3><ol>\n<li>安装<br>安装时使用搜狗官方提供的<a href=\"https://shurufa.sogou.com/linux/guide\">安装文档</a>进行即可。</li>\n<li>雷点<br>要想在安装并配置结束之后正常使用，就需要放弃使用最新的wayland而去使用x11。因为在wayland中切换至搜狗输入法时会出现屏幕闪烁的情况，这时是无法使用输入法的，就很难受。针对这一点，笔者没有找到好的解决办法。</li>\n</ol>\n<h3 id=\"google-input\"><a href=\"#google-input\" class=\"headerlink\" title=\"google input\"></a>google input</h3><p>选择使用 <strong>谷歌输入法</strong> 的原因简单且直接:我想使用 wayland 而不是 x11。这一点就让我需要找一个搜狗输入法的平替软件，google了一下，看到了 google input，安装配置都很简单，目前用着还不错（不好用了在看，嘻嘻）。</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt intall fcitx fcitx-googlepinyin</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置<ul>\n<li>打开 设置 》 系统 》 区域与语言 》 管理安装的语言:  <ul>\n<li>将键盘输入法系统改为”fcitx4“</li>\n<li>点击“应用到整个系统”</li>\n</ul>\n</li>\n<li>重启系统即可食用。</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"ubuntu中使用中文输入法\"><a href=\"#ubuntu中使用中文输入法\" class=\"headerlink\" title=\"ubuntu中使用中文输入法\"></a>ubuntu中使用中文输入法</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>选择那个输入法，对笔者来说需要考虑以下几点：  </p>\n<ol>\n<li>安装简易程度：安装配置越简单越好;</li>\n<li>易用程度：对笔者来说也就是联想词是否更符合日常使用习惯了;</li>\n<li>对环境的依赖：就是喜欢哪个语言框架以及系统对该框架的支持如何。</li>\n</ol>\n<h1 id=\"抉择\"><a href=\"#抉择\" class=\"headerlink\" title=\"抉择\"></a>抉择</h1><h2 id=\"ibus-下的中文输入法\"><a href=\"#ibus-下的中文输入法\" class=\"headerlink\" title=\"ibus 下的中文输入法\"></a>ibus 下的中文输入法</h2><p>ibus下面的输入法的安装、配置都比较简单。但是令笔者不如意的一点是联想词不大符合个人用词习惯，需要 <tab> 好几下或者换页查看好几下才能找到想用的词，尤其是在连续输入好几个字的拼音时。</p>\n<h2 id=\"fcitx-下的中文输入法\"><a href=\"#fcitx-下的中文输入法\" class=\"headerlink\" title=\"fcitx 下的中文输入法\"></a>fcitx 下的中文输入法</h2><h3 id=\"搜狗输入法\"><a href=\"#搜狗输入法\" class=\"headerlink\" title=\"搜狗输入法\"></a><a href=\"https://shurufa.sogou.com/linux\">搜狗输入法</a></h3><ol>\n<li>安装<br>安装时使用搜狗官方提供的<a href=\"https://shurufa.sogou.com/linux/guide\">安装文档</a>进行即可。</li>\n<li>雷点<br>要想在安装并配置结束之后正常使用，就需要放弃使用最新的wayland而去使用x11。因为在wayland中切换至搜狗输入法时会出现屏幕闪烁的情况，这时是无法使用输入法的，就很难受。针对这一点，笔者没有找到好的解决办法。</li>\n</ol>\n<h3 id=\"google-input\"><a href=\"#google-input\" class=\"headerlink\" title=\"google input\"></a>google input</h3><p>选择使用 <strong>谷歌输入法</strong> 的原因简单且直接:我想使用 wayland 而不是 x11。这一点就让我需要找一个搜狗输入法的平替软件，google了一下，看到了 google input，安装配置都很简单，目前用着还不错（不好用了在看，嘻嘻）。</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt intall fcitx fcitx-googlepinyin</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置<ul>\n<li>打开 设置 》 系统 》 区域与语言 》 管理安装的语言:  <ul>\n<li>将键盘输入法系统改为”fcitx4“</li>\n<li>点击“应用到整个系统”</li>\n</ul>\n</li>\n<li>重启系统即可食用。</li>\n</ul>\n</li>\n</ol>\n"},{"_content":"[toc]\n\n# 二维数组作为函数参数的问题\n通常在c函数中定义二维数组参数时，喜欢把二维数组当作二级指针来处理。但是这样就会引出其他一些问题：\n1. 二维数组传入函数时，出现 **不完整的数据来袭** 的警告  \n2. 在函数中无法向 **访问二维数组** 那样回去数组元素，也无法通过 **直接解析地址** 的方式访问数组元素，程序会直接崩溃。  \n\n## 示例\n* 代码\n```c\n// 2d_array-arg.c\n\n#include <stdio.h>\n\n// 定义查看二维数组第一个元素的函数\nvoid look_arr_e1(int** arr, int row, int col) {\n\tint e1;\n\te1 = arr[0][0];\n\tprintf(\"e1=%d\\n\", e1);\n}\n\nint main(int argc, char* argv[])\n{\n\t// 定义一个3x2的二维数组\n\tint arr[3][2] = {\n\t\t{1, 2},\n\t\t{3, 4},\n\t\t{5, 6} };\n\n\tlook_arr_e1(arr, 3, 2);\n\n\treturn 0;\n}\n```\n* 编译运行结果:  \n![](./compiling.png)  \nrun 时则提示 **段错误**  \n## 解决\n1. 对于 **warning** 来说，在 arr 传入函数是直接强制类型转换即可:\n```c\nlook_arr_e1((int**)arr, 3, 2);\n```\n2. 对于这个段错误就是大问题了，解决方式的核心也是强转，难点在于对 **数组指针** 的理解如何。在示例中 arr 的列数为 col 则在函数中要使用前，可先将 arr 强转为列数为 col 的数组指针:\n```c\nint (*arr_ptr)[col] = (int (*)[col])arr;\n```\n* 完整代码\n```c\n// 2d_array-arg.c\n\n#include <stdio.h>\n\n// 定义查看二维数组第一个元素的函数\nvoid look_arr_e1(int** arr, int row, int col) {\n\tint (*arr_ptr)[col] = (int (*)[col])arr;\n\tint e1;\n\te1 = arr_ptr[0][0];\n\tprintf(\"e1=%d\\n\", e1);\n}\n\nint main(int argc, char* argv[])\n{\n\t// 定义一个3x2的二维数组\n\tint arr[3][2] = {\n\t\t{1, 2},\n\t\t{3, 4},\n\t\t{5, 6} };\n\n\tlook_arr_e1((int**)arr, 3, 2);\n\n\treturn 0;\n}\n```\n","source":"_posts/blog/2d_arry-in-c_function_arg/2D_array.md","raw":"[toc]\n\n# 二维数组作为函数参数的问题\n通常在c函数中定义二维数组参数时，喜欢把二维数组当作二级指针来处理。但是这样就会引出其他一些问题：\n1. 二维数组传入函数时，出现 **不完整的数据来袭** 的警告  \n2. 在函数中无法向 **访问二维数组** 那样回去数组元素，也无法通过 **直接解析地址** 的方式访问数组元素，程序会直接崩溃。  \n\n## 示例\n* 代码\n```c\n// 2d_array-arg.c\n\n#include <stdio.h>\n\n// 定义查看二维数组第一个元素的函数\nvoid look_arr_e1(int** arr, int row, int col) {\n\tint e1;\n\te1 = arr[0][0];\n\tprintf(\"e1=%d\\n\", e1);\n}\n\nint main(int argc, char* argv[])\n{\n\t// 定义一个3x2的二维数组\n\tint arr[3][2] = {\n\t\t{1, 2},\n\t\t{3, 4},\n\t\t{5, 6} };\n\n\tlook_arr_e1(arr, 3, 2);\n\n\treturn 0;\n}\n```\n* 编译运行结果:  \n![](./compiling.png)  \nrun 时则提示 **段错误**  \n## 解决\n1. 对于 **warning** 来说，在 arr 传入函数是直接强制类型转换即可:\n```c\nlook_arr_e1((int**)arr, 3, 2);\n```\n2. 对于这个段错误就是大问题了，解决方式的核心也是强转，难点在于对 **数组指针** 的理解如何。在示例中 arr 的列数为 col 则在函数中要使用前，可先将 arr 强转为列数为 col 的数组指针:\n```c\nint (*arr_ptr)[col] = (int (*)[col])arr;\n```\n* 完整代码\n```c\n// 2d_array-arg.c\n\n#include <stdio.h>\n\n// 定义查看二维数组第一个元素的函数\nvoid look_arr_e1(int** arr, int row, int col) {\n\tint (*arr_ptr)[col] = (int (*)[col])arr;\n\tint e1;\n\te1 = arr_ptr[0][0];\n\tprintf(\"e1=%d\\n\", e1);\n}\n\nint main(int argc, char* argv[])\n{\n\t// 定义一个3x2的二维数组\n\tint arr[3][2] = {\n\t\t{1, 2},\n\t\t{3, 4},\n\t\t{5, 6} };\n\n\tlook_arr_e1((int**)arr, 3, 2);\n\n\treturn 0;\n}\n```\n","slug":"blog/2d_arry-in-c_function_arg/2D_array","published":1,"date":"2025-01-17T10:08:30.794Z","updated":"2025-01-17T10:08:30.794Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfj0004p5jxh2bu0cc8","content":"<p>[toc]</p>\n<h1 id=\"二维数组作为函数参数的问题\"><a href=\"#二维数组作为函数参数的问题\" class=\"headerlink\" title=\"二维数组作为函数参数的问题\"></a>二维数组作为函数参数的问题</h1><p>通常在c函数中定义二维数组参数时，喜欢把二维数组当作二级指针来处理。但是这样就会引出其他一些问题：</p>\n<ol>\n<li>二维数组传入函数时，出现 <strong>不完整的数据来袭</strong> 的警告  </li>\n<li>在函数中无法向 <strong>访问二维数组</strong> 那样回去数组元素，也无法通过 <strong>直接解析地址</strong> 的方式访问数组元素，程序会直接崩溃。</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2d_array-arg.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义查看二维数组第一个元素的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">look_arr_e1</span><span class=\"params\">(<span class=\"type\">int</span>** arr, <span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1;</span><br><span class=\"line\">\te1 = arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e1=%d\\n&quot;</span>, e1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个3x2的二维数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlook_arr_e1(arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译运行结果:<br><img src=\"/./compiling.png\"><br>run 时则提示 <strong>段错误</strong></li>\n</ul>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ol>\n<li>对于 <strong>warning</strong> 来说，在 arr 传入函数是直接强制类型转换即可:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">look_arr_e1((<span class=\"type\">int</span>**)arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>对于这个段错误就是大问题了，解决方式的核心也是强转，难点在于对 <strong>数组指针</strong> 的理解如何。在示例中 arr 的列数为 col 则在函数中要使用前，可先将 arr 强转为列数为 col 的数组指针:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*arr_ptr)[col] = (<span class=\"type\">int</span> (*)[col])arr;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2d_array-arg.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义查看二维数组第一个元素的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">look_arr_e1</span><span class=\"params\">(<span class=\"type\">int</span>** arr, <span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*arr_ptr)[col] = (<span class=\"type\">int</span> (*)[col])arr;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1;</span><br><span class=\"line\">\te1 = arr_ptr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e1=%d\\n&quot;</span>, e1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个3x2的二维数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlook_arr_e1((<span class=\"type\">int</span>**)arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"二维数组作为函数参数的问题\"><a href=\"#二维数组作为函数参数的问题\" class=\"headerlink\" title=\"二维数组作为函数参数的问题\"></a>二维数组作为函数参数的问题</h1><p>通常在c函数中定义二维数组参数时，喜欢把二维数组当作二级指针来处理。但是这样就会引出其他一些问题：</p>\n<ol>\n<li>二维数组传入函数时，出现 <strong>不完整的数据来袭</strong> 的警告  </li>\n<li>在函数中无法向 <strong>访问二维数组</strong> 那样回去数组元素，也无法通过 <strong>直接解析地址</strong> 的方式访问数组元素，程序会直接崩溃。</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2d_array-arg.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义查看二维数组第一个元素的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">look_arr_e1</span><span class=\"params\">(<span class=\"type\">int</span>** arr, <span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1;</span><br><span class=\"line\">\te1 = arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e1=%d\\n&quot;</span>, e1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个3x2的二维数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlook_arr_e1(arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译运行结果:<br><img src=\"/./compiling.png\"><br>run 时则提示 <strong>段错误</strong></li>\n</ul>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ol>\n<li>对于 <strong>warning</strong> 来说，在 arr 传入函数是直接强制类型转换即可:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">look_arr_e1((<span class=\"type\">int</span>**)arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>对于这个段错误就是大问题了，解决方式的核心也是强转，难点在于对 <strong>数组指针</strong> 的理解如何。在示例中 arr 的列数为 col 则在函数中要使用前，可先将 arr 强转为列数为 col 的数组指针:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*arr_ptr)[col] = (<span class=\"type\">int</span> (*)[col])arr;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2d_array-arg.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义查看二维数组第一个元素的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">look_arr_e1</span><span class=\"params\">(<span class=\"type\">int</span>** arr, <span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*arr_ptr)[col] = (<span class=\"type\">int</span> (*)[col])arr;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1;</span><br><span class=\"line\">\te1 = arr_ptr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e1=%d\\n&quot;</span>, e1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个3x2的二维数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlook_arr_e1((<span class=\"type\">int</span>**)arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# 免费的云服务器\n\n## 阿贝云\n### 简介  \n[阿贝云](https://www.abeiyun.com/) 是陕西云游四海网络科技有限公司旗下网络服务品牌，与 2018 年 10 月创建。\n### 免费服务器  \n它有提供免费服务器服务，性能如下所示：  \n![](./pictures/abeiyun-free_version-performance.png)\n### 使用体验\n* 申请免费服务器的问题 \n    * 注册账户：\n        * 需要手机号、身份证号，是的，需要你比较注重个人隐私，那就放弃吧。\n    * 实名认证\n        * 注册好了之后是无法直接申请服务器的，需要实名认证，这里就需要你的真实姓名，并且认证需要付费(也就是需要充钱，嗯？我不是冲着免费去的吗？)，然后还要绑定微信，emmm。。。就差没要我籍贯啦。\n    * 免费延期\n    ![](./pictures/abeiyum.png)\n    这个操作怎么有点眼熟呢？对了，很多电商返红包的套路了，只不过这个不是在他的官网，而是需要在且它平台“发评论”，emmmm,这一点我还是比较反感的。\n## 总结\n免费的东西不能说没有，但是是很罕见的,大多数情况也及时拿个人隐私当作筹码罢了。相比“个人信息交换”，还要暴漏自己的其他平台(给它免费打广告)，这一点笔者还是不太乐意的。所以，笔者打算放弃它啦。\n","source":"_posts/blog/cloud-server/free-cloud-server.md","raw":"# 免费的云服务器\n\n## 阿贝云\n### 简介  \n[阿贝云](https://www.abeiyun.com/) 是陕西云游四海网络科技有限公司旗下网络服务品牌，与 2018 年 10 月创建。\n### 免费服务器  \n它有提供免费服务器服务，性能如下所示：  \n![](./pictures/abeiyun-free_version-performance.png)\n### 使用体验\n* 申请免费服务器的问题 \n    * 注册账户：\n        * 需要手机号、身份证号，是的，需要你比较注重个人隐私，那就放弃吧。\n    * 实名认证\n        * 注册好了之后是无法直接申请服务器的，需要实名认证，这里就需要你的真实姓名，并且认证需要付费(也就是需要充钱，嗯？我不是冲着免费去的吗？)，然后还要绑定微信，emmm。。。就差没要我籍贯啦。\n    * 免费延期\n    ![](./pictures/abeiyum.png)\n    这个操作怎么有点眼熟呢？对了，很多电商返红包的套路了，只不过这个不是在他的官网，而是需要在且它平台“发评论”，emmmm,这一点我还是比较反感的。\n## 总结\n免费的东西不能说没有，但是是很罕见的,大多数情况也及时拿个人隐私当作筹码罢了。相比“个人信息交换”，还要暴漏自己的其他平台(给它免费打广告)，这一点笔者还是不太乐意的。所以，笔者打算放弃它啦。\n","slug":"blog/cloud-server/free-cloud-server","published":1,"date":"2025-01-17T10:08:30.795Z","updated":"2025-01-17T10:08:30.795Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfk0005p5jx66lq0vge","content":"<h1 id=\"免费的云服务器\"><a href=\"#免费的云服务器\" class=\"headerlink\" title=\"免费的云服务器\"></a>免费的云服务器</h1><h2 id=\"阿贝云\"><a href=\"#阿贝云\" class=\"headerlink\" title=\"阿贝云\"></a>阿贝云</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><a href=\"https://www.abeiyun.com/\">阿贝云</a> 是陕西云游四海网络科技有限公司旗下网络服务品牌，与 2018 年 10 月创建。</p>\n<h3 id=\"免费服务器\"><a href=\"#免费服务器\" class=\"headerlink\" title=\"免费服务器\"></a>免费服务器</h3><p>它有提供免费服务器服务，性能如下所示：<br><img src=\"/./pictures/abeiyun-free_version-performance.png\"></p>\n<h3 id=\"使用体验\"><a href=\"#使用体验\" class=\"headerlink\" title=\"使用体验\"></a>使用体验</h3><ul>\n<li>申请免费服务器的问题 <ul>\n<li>注册账户：<ul>\n<li>需要手机号、身份证号，是的，需要你比较注重个人隐私，那就放弃吧。</li>\n</ul>\n</li>\n<li>实名认证<ul>\n<li>注册好了之后是无法直接申请服务器的，需要实名认证，这里就需要你的真实姓名，并且认证需要付费(也就是需要充钱，嗯？我不是冲着免费去的吗？)，然后还要绑定微信，emmm。。。就差没要我籍贯啦。</li>\n</ul>\n</li>\n<li>免费延期<br>  <img src=\"/./pictures/abeiyum.png\"><br>  这个操作怎么有点眼熟呢？对了，很多电商返红包的套路了，只不过这个不是在他的官网，而是需要在且它平台“发评论”，emmmm,这一点我还是比较反感的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>免费的东西不能说没有，但是是很罕见的,大多数情况也及时拿个人隐私当作筹码罢了。相比“个人信息交换”，还要暴漏自己的其他平台(给它免费打广告)，这一点笔者还是不太乐意的。所以，笔者打算放弃它啦。</p>\n","excerpt":"","more":"<h1 id=\"免费的云服务器\"><a href=\"#免费的云服务器\" class=\"headerlink\" title=\"免费的云服务器\"></a>免费的云服务器</h1><h2 id=\"阿贝云\"><a href=\"#阿贝云\" class=\"headerlink\" title=\"阿贝云\"></a>阿贝云</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><a href=\"https://www.abeiyun.com/\">阿贝云</a> 是陕西云游四海网络科技有限公司旗下网络服务品牌，与 2018 年 10 月创建。</p>\n<h3 id=\"免费服务器\"><a href=\"#免费服务器\" class=\"headerlink\" title=\"免费服务器\"></a>免费服务器</h3><p>它有提供免费服务器服务，性能如下所示：<br><img src=\"/./pictures/abeiyun-free_version-performance.png\"></p>\n<h3 id=\"使用体验\"><a href=\"#使用体验\" class=\"headerlink\" title=\"使用体验\"></a>使用体验</h3><ul>\n<li>申请免费服务器的问题 <ul>\n<li>注册账户：<ul>\n<li>需要手机号、身份证号，是的，需要你比较注重个人隐私，那就放弃吧。</li>\n</ul>\n</li>\n<li>实名认证<ul>\n<li>注册好了之后是无法直接申请服务器的，需要实名认证，这里就需要你的真实姓名，并且认证需要付费(也就是需要充钱，嗯？我不是冲着免费去的吗？)，然后还要绑定微信，emmm。。。就差没要我籍贯啦。</li>\n</ul>\n</li>\n<li>免费延期<br>  <img src=\"/./pictures/abeiyum.png\"><br>  这个操作怎么有点眼熟呢？对了，很多电商返红包的套路了，只不过这个不是在他的官网，而是需要在且它平台“发评论”，emmmm,这一点我还是比较反感的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>免费的东西不能说没有，但是是很罕见的,大多数情况也及时拿个人隐私当作筹码罢了。相比“个人信息交换”，还要暴漏自己的其他平台(给它免费打广告)，这一点笔者还是不太乐意的。所以，笔者打算放弃它啦。</p>\n"},{"_content":"[toc]\n\n# 如何创建google账户\n**注意**:  \n<u>笔者在创建 google 账户时是成功的，而在编写该文档时为了截图就重新操作了一遍，并没有 步骤9 中的 **skip** 按钮(步骤9的截图来源于[参考视频](#参考视频)，而是必须填写手机号(本人前几次失败也是这样)，原因不详。可过几天再尝试</u>\n## 1. 解决网络问题\n首先通过科学上网的方式，解决无法访问外网的问题\n* 机场  \n本人使用的机场是[SSRDOG](https://dog.ssrdog.com/)，对于新用户来说第一个月免费。\n* 桌面代理软件  \n本人使用的是[clash verge](https://clashverge.net/)，我使用她的原因如下：  \n    1. 开源免费，无需登陆;\n    2. Android/Windows/macOS/iOS/Linux 都可用.\n## 2. 科学上网节点的选择\n请选择**美国**的节点，我失败的原因之一就是使用了香港节点。\n## 3. 开始创建账户\n1. [登陆网址](https://support.google.com/)\n2. 选择 **Google Accounts** 选项\n3. 在 **Browse help topics** 中选择 **Popular articles** --> **Create a Google Account**，在新页面中部分显示如下:\n    ![](./create-a-google-account.png)\n4. 选择 **For myself**\n5. 输入用户名, 然后**Next**\n    ![](./usrname.png)\n6. 输入一些基本信息，然后**Next**\n    ![](./base-info.png)\n7. 在该页面中将显示系统根据输入的用户名分配的两个google邮箱地址，你可以任选一个，若觉得**不好看**，可以选择**Create your own Gmail address**, 然后输入符合自己气质的邮箱地址，然后**Next**。\n    ![](./gen-email.png)\n8. 输入用户密码\n    ![](./user-password.png)\n9. 如果幸运的话，将来到**Add recovery**的界面，为了简便，可以直接点击**skip**\n    ![](./recovery-email.png)\n10. 点击**Next**，点击**I agree**，到此账户注册成功\n# 参考视频\n[2024最新绕过手机验证 无限注册 100%成功注册Google谷歌账号 无需短信验证 无需花钱找接码平台 轻松创建Gmail谷歌邮箱 谷歌网盘 Youtube等账号](https://www.youtube.com/watch?v=wU3EnawyaSs)\n","source":"_posts/blog/create-google-account/创建google账户.md","raw":"[toc]\n\n# 如何创建google账户\n**注意**:  \n<u>笔者在创建 google 账户时是成功的，而在编写该文档时为了截图就重新操作了一遍，并没有 步骤9 中的 **skip** 按钮(步骤9的截图来源于[参考视频](#参考视频)，而是必须填写手机号(本人前几次失败也是这样)，原因不详。可过几天再尝试</u>\n## 1. 解决网络问题\n首先通过科学上网的方式，解决无法访问外网的问题\n* 机场  \n本人使用的机场是[SSRDOG](https://dog.ssrdog.com/)，对于新用户来说第一个月免费。\n* 桌面代理软件  \n本人使用的是[clash verge](https://clashverge.net/)，我使用她的原因如下：  \n    1. 开源免费，无需登陆;\n    2. Android/Windows/macOS/iOS/Linux 都可用.\n## 2. 科学上网节点的选择\n请选择**美国**的节点，我失败的原因之一就是使用了香港节点。\n## 3. 开始创建账户\n1. [登陆网址](https://support.google.com/)\n2. 选择 **Google Accounts** 选项\n3. 在 **Browse help topics** 中选择 **Popular articles** --> **Create a Google Account**，在新页面中部分显示如下:\n    ![](./create-a-google-account.png)\n4. 选择 **For myself**\n5. 输入用户名, 然后**Next**\n    ![](./usrname.png)\n6. 输入一些基本信息，然后**Next**\n    ![](./base-info.png)\n7. 在该页面中将显示系统根据输入的用户名分配的两个google邮箱地址，你可以任选一个，若觉得**不好看**，可以选择**Create your own Gmail address**, 然后输入符合自己气质的邮箱地址，然后**Next**。\n    ![](./gen-email.png)\n8. 输入用户密码\n    ![](./user-password.png)\n9. 如果幸运的话，将来到**Add recovery**的界面，为了简便，可以直接点击**skip**\n    ![](./recovery-email.png)\n10. 点击**Next**，点击**I agree**，到此账户注册成功\n# 参考视频\n[2024最新绕过手机验证 无限注册 100%成功注册Google谷歌账号 无需短信验证 无需花钱找接码平台 轻松创建Gmail谷歌邮箱 谷歌网盘 Youtube等账号](https://www.youtube.com/watch?v=wU3EnawyaSs)\n","slug":"blog/create-google-account/创建google账户","published":1,"date":"2025-01-17T10:08:30.804Z","updated":"2025-01-17T10:08:30.804Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfl0006p5jxgews6ia3","content":"<p>[toc]</p>\n<h1 id=\"如何创建google账户\"><a href=\"#如何创建google账户\" class=\"headerlink\" title=\"如何创建google账户\"></a>如何创建google账户</h1><p><strong>注意</strong>:<br><u>笔者在创建 google 账户时是成功的，而在编写该文档时为了截图就重新操作了一遍，并没有 步骤9 中的 <strong>skip</strong> 按钮(步骤9的截图来源于<a href=\"#%E5%8F%82%E8%80%83%E8%A7%86%E9%A2%91\">参考视频</a>，而是必须填写手机号(本人前几次失败也是这样)，原因不详。可过几天再尝试</u></p>\n<h2 id=\"1-解决网络问题\"><a href=\"#1-解决网络问题\" class=\"headerlink\" title=\"1. 解决网络问题\"></a>1. 解决网络问题</h2><p>首先通过科学上网的方式，解决无法访问外网的问题</p>\n<ul>\n<li>机场<br>本人使用的机场是<a href=\"https://dog.ssrdog.com/\">SSRDOG</a>，对于新用户来说第一个月免费。</li>\n<li>桌面代理软件<br>本人使用的是<a href=\"https://clashverge.net/\">clash verge</a>，我使用她的原因如下：  <ol>\n<li>开源免费，无需登陆;</li>\n<li>Android&#x2F;Windows&#x2F;macOS&#x2F;iOS&#x2F;Linux 都可用.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-科学上网节点的选择\"><a href=\"#2-科学上网节点的选择\" class=\"headerlink\" title=\"2. 科学上网节点的选择\"></a>2. 科学上网节点的选择</h2><p>请选择<strong>美国</strong>的节点，我失败的原因之一就是使用了香港节点。</p>\n<h2 id=\"3-开始创建账户\"><a href=\"#3-开始创建账户\" class=\"headerlink\" title=\"3. 开始创建账户\"></a>3. 开始创建账户</h2><ol>\n<li><a href=\"https://support.google.com/\">登陆网址</a></li>\n<li>选择 <strong>Google Accounts</strong> 选项</li>\n<li>在 <strong>Browse help topics</strong> 中选择 <strong>Popular articles</strong> –&gt; <strong>Create a Google Account</strong>，在新页面中部分显示如下:<br> <img src=\"/./create-a-google-account.png\"></li>\n<li>选择 <strong>For myself</strong></li>\n<li>输入用户名, 然后<strong>Next</strong><br> <img src=\"/./usrname.png\"></li>\n<li>输入一些基本信息，然后<strong>Next</strong><br> <img src=\"/./base-info.png\"></li>\n<li>在该页面中将显示系统根据输入的用户名分配的两个google邮箱地址，你可以任选一个，若觉得<strong>不好看</strong>，可以选择<strong>Create your own Gmail address</strong>, 然后输入符合自己气质的邮箱地址，然后<strong>Next</strong>。<br> <img src=\"/./gen-email.png\"></li>\n<li>输入用户密码<br> <img src=\"/./user-password.png\"></li>\n<li>如果幸运的话，将来到<strong>Add recovery</strong>的界面，为了简便，可以直接点击<strong>skip</strong><br> <img src=\"/./recovery-email.png\"></li>\n<li>点击<strong>Next</strong>，点击<strong>I agree</strong>，到此账户注册成功</li>\n</ol>\n<h1 id=\"参考视频\"><a href=\"#参考视频\" class=\"headerlink\" title=\"参考视频\"></a>参考视频</h1><p><a href=\"https://www.youtube.com/watch?v=wU3EnawyaSs\">2024最新绕过手机验证 无限注册 100%成功注册Google谷歌账号 无需短信验证 无需花钱找接码平台 轻松创建Gmail谷歌邮箱 谷歌网盘 Youtube等账号</a></p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"如何创建google账户\"><a href=\"#如何创建google账户\" class=\"headerlink\" title=\"如何创建google账户\"></a>如何创建google账户</h1><p><strong>注意</strong>:<br><u>笔者在创建 google 账户时是成功的，而在编写该文档时为了截图就重新操作了一遍，并没有 步骤9 中的 <strong>skip</strong> 按钮(步骤9的截图来源于<a href=\"#%E5%8F%82%E8%80%83%E8%A7%86%E9%A2%91\">参考视频</a>，而是必须填写手机号(本人前几次失败也是这样)，原因不详。可过几天再尝试</u></p>\n<h2 id=\"1-解决网络问题\"><a href=\"#1-解决网络问题\" class=\"headerlink\" title=\"1. 解决网络问题\"></a>1. 解决网络问题</h2><p>首先通过科学上网的方式，解决无法访问外网的问题</p>\n<ul>\n<li>机场<br>本人使用的机场是<a href=\"https://dog.ssrdog.com/\">SSRDOG</a>，对于新用户来说第一个月免费。</li>\n<li>桌面代理软件<br>本人使用的是<a href=\"https://clashverge.net/\">clash verge</a>，我使用她的原因如下：  <ol>\n<li>开源免费，无需登陆;</li>\n<li>Android&#x2F;Windows&#x2F;macOS&#x2F;iOS&#x2F;Linux 都可用.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-科学上网节点的选择\"><a href=\"#2-科学上网节点的选择\" class=\"headerlink\" title=\"2. 科学上网节点的选择\"></a>2. 科学上网节点的选择</h2><p>请选择<strong>美国</strong>的节点，我失败的原因之一就是使用了香港节点。</p>\n<h2 id=\"3-开始创建账户\"><a href=\"#3-开始创建账户\" class=\"headerlink\" title=\"3. 开始创建账户\"></a>3. 开始创建账户</h2><ol>\n<li><a href=\"https://support.google.com/\">登陆网址</a></li>\n<li>选择 <strong>Google Accounts</strong> 选项</li>\n<li>在 <strong>Browse help topics</strong> 中选择 <strong>Popular articles</strong> –&gt; <strong>Create a Google Account</strong>，在新页面中部分显示如下:<br> <img src=\"/./create-a-google-account.png\"></li>\n<li>选择 <strong>For myself</strong></li>\n<li>输入用户名, 然后<strong>Next</strong><br> <img src=\"/./usrname.png\"></li>\n<li>输入一些基本信息，然后<strong>Next</strong><br> <img src=\"/./base-info.png\"></li>\n<li>在该页面中将显示系统根据输入的用户名分配的两个google邮箱地址，你可以任选一个，若觉得<strong>不好看</strong>，可以选择<strong>Create your own Gmail address</strong>, 然后输入符合自己气质的邮箱地址，然后<strong>Next</strong>。<br> <img src=\"/./gen-email.png\"></li>\n<li>输入用户密码<br> <img src=\"/./user-password.png\"></li>\n<li>如果幸运的话，将来到<strong>Add recovery</strong>的界面，为了简便，可以直接点击<strong>skip</strong><br> <img src=\"/./recovery-email.png\"></li>\n<li>点击<strong>Next</strong>，点击<strong>I agree</strong>，到此账户注册成功</li>\n</ol>\n<h1 id=\"参考视频\"><a href=\"#参考视频\" class=\"headerlink\" title=\"参考视频\"></a>参考视频</h1><p><a href=\"https://www.youtube.com/watch?v=wU3EnawyaSs\">2024最新绕过手机验证 无限注册 100%成功注册Google谷歌账号 无需短信验证 无需花钱找接码平台 轻松创建Gmail谷歌邮箱 谷歌网盘 Youtube等账号</a></p>\n"},{"_content":"[toc]\n\n# 在安卓手机中使用linxu虚拟机\n## 简介\n由于笔者需要，便尝试如何在安卓手机中使用linux虚拟机。步骤如下：\n1. 安装 termux\n2. 在 termux 中安装 proot 和 proot-distro\n3. 使用 proot-distro 安卓 linux 虚拟机\n## 安装 termux\n* 进入[官网](https://github.com/termux/termux-app)\n* 点击 Releases 查看发行版本 \n![](./pictures/open-web-termux.png)\n* 下载适合自己手机的版本,笔者选择如下所示：\n![](./pictures/install-termux.png)\n* 将下载好的 apk 拷贝到手机上，然后点击 apk 文件即可安装,安装好后如图所示：\n![](./pictures/termux.png)\n## 安装 proot 和 proot-distro\n* 点击打开 termux 软件  \n![](./pictures/open-termux.png)  \n* 安装方式\n    * pkg 安装\n    ```shell\n    pkg upgrade\n    pkg install proot proot-distro\n    ```\n    * apt 安装\n    ```shell\n    apt install proot proot-distro\n    ```\n>NOTE: <u>然而笔者还是更喜欢在键盘上敲命令，所以选择了远程连接(远程连接到 termux)的方式进行后续操作，当然在远程连接之前的准备工作，还是需要在 termux 中敲命令的。</u>\n## 安装 ubuntu\n* 查看可以安装哪些 linux 版本: `proot-distro list`\n![](./pictures/install-ubuntu.png)\n* 安装linux（笔者选择 Ubuntu 24.04,即 ubuntu, 安装时需要满足能访问github):\n```shell\nproot-distro install ubuntu\n```\n* 启动linux: `proot-distro login ubuntu`\n![](./pictures/login-ubuntu.png)\n## 远程连接到 termux\n1. 让电脑和手机连接同一个局域网\n2. 安装ssh服务器\n```shell\npkg install openssh\n```\n3. 启动ssh\n```shell\nsshd\n```\n4. 查看ip地址、sshd端口号、用户名、密码\n    * 查看用户名：`whoami`\n    * 设置用户密码：`passwd`\n    * 查看ip：`ifconfig 2>&1 | grep -oP \"192\\.168\\.[0-9]+\\.[0-9]+\" | head -n 1`\n    * 设置sshd端口号：`sshd -p 9000`\n5. 在电脑上远程连接:`ssh <user_name>@<ip> -p <port>`, 然后输入密码即可登陆：\n![](./pictures/remote-login.png)\n","source":"_posts/blog/termux-for-android/termux-remote.md","raw":"[toc]\n\n# 在安卓手机中使用linxu虚拟机\n## 简介\n由于笔者需要，便尝试如何在安卓手机中使用linux虚拟机。步骤如下：\n1. 安装 termux\n2. 在 termux 中安装 proot 和 proot-distro\n3. 使用 proot-distro 安卓 linux 虚拟机\n## 安装 termux\n* 进入[官网](https://github.com/termux/termux-app)\n* 点击 Releases 查看发行版本 \n![](./pictures/open-web-termux.png)\n* 下载适合自己手机的版本,笔者选择如下所示：\n![](./pictures/install-termux.png)\n* 将下载好的 apk 拷贝到手机上，然后点击 apk 文件即可安装,安装好后如图所示：\n![](./pictures/termux.png)\n## 安装 proot 和 proot-distro\n* 点击打开 termux 软件  \n![](./pictures/open-termux.png)  \n* 安装方式\n    * pkg 安装\n    ```shell\n    pkg upgrade\n    pkg install proot proot-distro\n    ```\n    * apt 安装\n    ```shell\n    apt install proot proot-distro\n    ```\n>NOTE: <u>然而笔者还是更喜欢在键盘上敲命令，所以选择了远程连接(远程连接到 termux)的方式进行后续操作，当然在远程连接之前的准备工作，还是需要在 termux 中敲命令的。</u>\n## 安装 ubuntu\n* 查看可以安装哪些 linux 版本: `proot-distro list`\n![](./pictures/install-ubuntu.png)\n* 安装linux（笔者选择 Ubuntu 24.04,即 ubuntu, 安装时需要满足能访问github):\n```shell\nproot-distro install ubuntu\n```\n* 启动linux: `proot-distro login ubuntu`\n![](./pictures/login-ubuntu.png)\n## 远程连接到 termux\n1. 让电脑和手机连接同一个局域网\n2. 安装ssh服务器\n```shell\npkg install openssh\n```\n3. 启动ssh\n```shell\nsshd\n```\n4. 查看ip地址、sshd端口号、用户名、密码\n    * 查看用户名：`whoami`\n    * 设置用户密码：`passwd`\n    * 查看ip：`ifconfig 2>&1 | grep -oP \"192\\.168\\.[0-9]+\\.[0-9]+\" | head -n 1`\n    * 设置sshd端口号：`sshd -p 9000`\n5. 在电脑上远程连接:`ssh <user_name>@<ip> -p <port>`, 然后输入密码即可登陆：\n![](./pictures/remote-login.png)\n","slug":"blog/termux-for-android/termux-remote","published":1,"date":"2025-01-17T10:08:30.804Z","updated":"2025-01-17T10:08:30.805Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfl0007p5jxeglf9xf6","content":"<p>[toc]</p>\n<h1 id=\"在安卓手机中使用linxu虚拟机\"><a href=\"#在安卓手机中使用linxu虚拟机\" class=\"headerlink\" title=\"在安卓手机中使用linxu虚拟机\"></a>在安卓手机中使用linxu虚拟机</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>由于笔者需要，便尝试如何在安卓手机中使用linux虚拟机。步骤如下：</p>\n<ol>\n<li>安装 termux</li>\n<li>在 termux 中安装 proot 和 proot-distro</li>\n<li>使用 proot-distro 安卓 linux 虚拟机</li>\n</ol>\n<h2 id=\"安装-termux\"><a href=\"#安装-termux\" class=\"headerlink\" title=\"安装 termux\"></a>安装 termux</h2><ul>\n<li>进入<a href=\"https://github.com/termux/termux-app\">官网</a></li>\n<li>点击 Releases 查看发行版本<br><img src=\"/./pictures/open-web-termux.png\"></li>\n<li>下载适合自己手机的版本,笔者选择如下所示：<br><img src=\"/./pictures/install-termux.png\"></li>\n<li>将下载好的 apk 拷贝到手机上，然后点击 apk 文件即可安装,安装好后如图所示：<br><img src=\"/./pictures/termux.png\"></li>\n</ul>\n<h2 id=\"安装-proot-和-proot-distro\"><a href=\"#安装-proot-和-proot-distro\" class=\"headerlink\" title=\"安装 proot 和 proot-distro\"></a>安装 proot 和 proot-distro</h2><ul>\n<li>点击打开 termux 软件<br><img src=\"/./pictures/open-termux.png\">  </li>\n<li>安装方式<ul>\n<li>pkg 安装</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg upgrade</span><br><span class=\"line\">pkg install proot proot-distro</span><br></pre></td></tr></table></figure>\n<ul>\n<li>apt 安装</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install proot proot-distro</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE: <u>然而笔者还是更喜欢在键盘上敲命令，所以选择了远程连接(远程连接到 termux)的方式进行后续操作，当然在远程连接之前的准备工作，还是需要在 termux 中敲命令的。</u></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"安装-ubuntu\"><a href=\"#安装-ubuntu\" class=\"headerlink\" title=\"安装 ubuntu\"></a>安装 ubuntu</h2><ul>\n<li>查看可以安装哪些 linux 版本: <code>proot-distro list</code><br><img src=\"/./pictures/install-ubuntu.png\"></li>\n<li>安装linux（笔者选择 Ubuntu 24.04,即 ubuntu, 安装时需要满足能访问github):</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proot-distro install ubuntu</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动linux: <code>proot-distro login ubuntu</code><br><img src=\"/./pictures/login-ubuntu.png\"></li>\n</ul>\n<h2 id=\"远程连接到-termux\"><a href=\"#远程连接到-termux\" class=\"headerlink\" title=\"远程连接到 termux\"></a>远程连接到 termux</h2><ol>\n<li>让电脑和手机连接同一个局域网</li>\n<li>安装ssh服务器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install openssh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>启动ssh</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshd</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看ip地址、sshd端口号、用户名、密码<ul>\n<li>查看用户名：<code>whoami</code></li>\n<li>设置用户密码：<code>passwd</code></li>\n<li>查看ip：<code>ifconfig 2&gt;&amp;1 | grep -oP &quot;192\\.168\\.[0-9]+\\.[0-9]+&quot; | head -n 1</code></li>\n<li>设置sshd端口号：<code>sshd -p 9000</code></li>\n</ul>\n</li>\n<li>在电脑上远程连接:<code>ssh &lt;user_name&gt;@&lt;ip&gt; -p &lt;port&gt;</code>, 然后输入密码即可登陆：<br><img src=\"/./pictures/remote-login.png\"></li>\n</ol>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"在安卓手机中使用linxu虚拟机\"><a href=\"#在安卓手机中使用linxu虚拟机\" class=\"headerlink\" title=\"在安卓手机中使用linxu虚拟机\"></a>在安卓手机中使用linxu虚拟机</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>由于笔者需要，便尝试如何在安卓手机中使用linux虚拟机。步骤如下：</p>\n<ol>\n<li>安装 termux</li>\n<li>在 termux 中安装 proot 和 proot-distro</li>\n<li>使用 proot-distro 安卓 linux 虚拟机</li>\n</ol>\n<h2 id=\"安装-termux\"><a href=\"#安装-termux\" class=\"headerlink\" title=\"安装 termux\"></a>安装 termux</h2><ul>\n<li>进入<a href=\"https://github.com/termux/termux-app\">官网</a></li>\n<li>点击 Releases 查看发行版本<br><img src=\"/./pictures/open-web-termux.png\"></li>\n<li>下载适合自己手机的版本,笔者选择如下所示：<br><img src=\"/./pictures/install-termux.png\"></li>\n<li>将下载好的 apk 拷贝到手机上，然后点击 apk 文件即可安装,安装好后如图所示：<br><img src=\"/./pictures/termux.png\"></li>\n</ul>\n<h2 id=\"安装-proot-和-proot-distro\"><a href=\"#安装-proot-和-proot-distro\" class=\"headerlink\" title=\"安装 proot 和 proot-distro\"></a>安装 proot 和 proot-distro</h2><ul>\n<li>点击打开 termux 软件<br><img src=\"/./pictures/open-termux.png\">  </li>\n<li>安装方式<ul>\n<li>pkg 安装</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg upgrade</span><br><span class=\"line\">pkg install proot proot-distro</span><br></pre></td></tr></table></figure>\n<ul>\n<li>apt 安装</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install proot proot-distro</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE: <u>然而笔者还是更喜欢在键盘上敲命令，所以选择了远程连接(远程连接到 termux)的方式进行后续操作，当然在远程连接之前的准备工作，还是需要在 termux 中敲命令的。</u></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"安装-ubuntu\"><a href=\"#安装-ubuntu\" class=\"headerlink\" title=\"安装 ubuntu\"></a>安装 ubuntu</h2><ul>\n<li>查看可以安装哪些 linux 版本: <code>proot-distro list</code><br><img src=\"/./pictures/install-ubuntu.png\"></li>\n<li>安装linux（笔者选择 Ubuntu 24.04,即 ubuntu, 安装时需要满足能访问github):</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proot-distro install ubuntu</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动linux: <code>proot-distro login ubuntu</code><br><img src=\"/./pictures/login-ubuntu.png\"></li>\n</ul>\n<h2 id=\"远程连接到-termux\"><a href=\"#远程连接到-termux\" class=\"headerlink\" title=\"远程连接到 termux\"></a>远程连接到 termux</h2><ol>\n<li>让电脑和手机连接同一个局域网</li>\n<li>安装ssh服务器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install openssh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>启动ssh</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshd</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看ip地址、sshd端口号、用户名、密码<ul>\n<li>查看用户名：<code>whoami</code></li>\n<li>设置用户密码：<code>passwd</code></li>\n<li>查看ip：<code>ifconfig 2&gt;&amp;1 | grep -oP &quot;192\\.168\\.[0-9]+\\.[0-9]+&quot; | head -n 1</code></li>\n<li>设置sshd端口号：<code>sshd -p 9000</code></li>\n</ul>\n</li>\n<li>在电脑上远程连接:<code>ssh &lt;user_name&gt;@&lt;ip&gt; -p &lt;port&gt;</code>, 然后输入密码即可登陆：<br><img src=\"/./pictures/remote-login.png\"></li>\n</ol>\n"},{"_content":"[toc]\n\n# 在安卓机上基于termux搭建web服务器\n# 简介\n换了新手机后，旧手机闲置着总觉得浪费，所以就想着折腾一下，搭建一个简单的web服务器玩玩。\n\n# 搭建详情\n## 安装应用\n* 需要安装的应用：\n    * apache: 服务器软件,用来搭建本地web服务\n    * termux-services: 管理termux服务\n    * cpolar: 内网穿透,是本地服务公网也可以访问\n* 安装apache,termux-services\n```shell\npkg install apache2 termux-services\n```\n* 安装 cpolar\n```shell\n# 创建必要的文件夹：\nmkdir -p $PREFIX/etc/apt/sources.list.d\n\n# 添加cpolar下载源\necho \"deb [trusted=yes] http://termux.cpolar.com termux extras\" >> $PREFIX/etc/apt/sources.list.d/cpolar.list\n\n# 更新仓库\npkg update\n\n# 安装\npkg install cpolar\n```\n安装完成后重启 termux\n## 注册 cpolar 账户\n* 注册  \n登陆[cpolar官网](https://www.cpolar.com/)，点击 **免费注册**，填写必要的信息进行注册(注册时需要的信息可以随便填写，但是，如果填写邮箱时如果填写的是不存在的邮箱，虽然可以注册成功，但后期将无法更换密码，因为她需要邮箱进行验证)\n* 获取 authtoken  \n登陆成功后便可以获取 **authtoken**(cpolar软件配置内网穿透需要这个)，点击 **验证** 即可找到 authtoken。\n## 配置&启动\n* 配置\n    * apache2  \n        * 打开：$PREFIX/etc/apache2/httpd.conf\n        * 取消 `ServerName www.example.com` 的注释\n        * 将 `www.example.com` 更改为本地地址和自己向要配置的端口号，例如:`127.0.0.1:8080`\n    * cpolar\n        * 打开：$PREFIX/etc/cpolar/cpolar.yml\n        * 添加 `authtoken: <your authtoken>`\n* 启动服务\n```shell\n# 启动 apache2\napachectl start\n\n# 启动 cpolar\nsv up cpolar\n```\n* cpolar 穿透 apache 本地服务\n```shell\n# 这里的ip和端口就是 apache2 配置文件中配置的ip和端口号\ncpolar http 127.0.0.1:8080\n```\n* 查看本地web服务映射的URL  \n登陆cpolar 网站，点击 **状态** 可以查看 **在线隧道** 信息，其中包括本地服务映射的 **URL** ，复制该 URL 并在浏览器中打开就可以访问 web 服务了。\n","source":"_posts/blog/webserver_on_termux_of_android/build_webserver_on_android.md","raw":"[toc]\n\n# 在安卓机上基于termux搭建web服务器\n# 简介\n换了新手机后，旧手机闲置着总觉得浪费，所以就想着折腾一下，搭建一个简单的web服务器玩玩。\n\n# 搭建详情\n## 安装应用\n* 需要安装的应用：\n    * apache: 服务器软件,用来搭建本地web服务\n    * termux-services: 管理termux服务\n    * cpolar: 内网穿透,是本地服务公网也可以访问\n* 安装apache,termux-services\n```shell\npkg install apache2 termux-services\n```\n* 安装 cpolar\n```shell\n# 创建必要的文件夹：\nmkdir -p $PREFIX/etc/apt/sources.list.d\n\n# 添加cpolar下载源\necho \"deb [trusted=yes] http://termux.cpolar.com termux extras\" >> $PREFIX/etc/apt/sources.list.d/cpolar.list\n\n# 更新仓库\npkg update\n\n# 安装\npkg install cpolar\n```\n安装完成后重启 termux\n## 注册 cpolar 账户\n* 注册  \n登陆[cpolar官网](https://www.cpolar.com/)，点击 **免费注册**，填写必要的信息进行注册(注册时需要的信息可以随便填写，但是，如果填写邮箱时如果填写的是不存在的邮箱，虽然可以注册成功，但后期将无法更换密码，因为她需要邮箱进行验证)\n* 获取 authtoken  \n登陆成功后便可以获取 **authtoken**(cpolar软件配置内网穿透需要这个)，点击 **验证** 即可找到 authtoken。\n## 配置&启动\n* 配置\n    * apache2  \n        * 打开：$PREFIX/etc/apache2/httpd.conf\n        * 取消 `ServerName www.example.com` 的注释\n        * 将 `www.example.com` 更改为本地地址和自己向要配置的端口号，例如:`127.0.0.1:8080`\n    * cpolar\n        * 打开：$PREFIX/etc/cpolar/cpolar.yml\n        * 添加 `authtoken: <your authtoken>`\n* 启动服务\n```shell\n# 启动 apache2\napachectl start\n\n# 启动 cpolar\nsv up cpolar\n```\n* cpolar 穿透 apache 本地服务\n```shell\n# 这里的ip和端口就是 apache2 配置文件中配置的ip和端口号\ncpolar http 127.0.0.1:8080\n```\n* 查看本地web服务映射的URL  \n登陆cpolar 网站，点击 **状态** 可以查看 **在线隧道** 信息，其中包括本地服务映射的 **URL** ，复制该 URL 并在浏览器中打开就可以访问 web 服务了。\n","slug":"blog/webserver_on_termux_of_android/build_webserver_on_android","published":1,"date":"2025-01-17T10:08:30.810Z","updated":"2025-01-17T10:08:30.811Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfm0008p5jx18sfbx76","content":"<p>[toc]</p>\n<h1 id=\"在安卓机上基于termux搭建web服务器\"><a href=\"#在安卓机上基于termux搭建web服务器\" class=\"headerlink\" title=\"在安卓机上基于termux搭建web服务器\"></a>在安卓机上基于termux搭建web服务器</h1><h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>换了新手机后，旧手机闲置着总觉得浪费，所以就想着折腾一下，搭建一个简单的web服务器玩玩。</p>\n<h1 id=\"搭建详情\"><a href=\"#搭建详情\" class=\"headerlink\" title=\"搭建详情\"></a>搭建详情</h1><h2 id=\"安装应用\"><a href=\"#安装应用\" class=\"headerlink\" title=\"安装应用\"></a>安装应用</h2><ul>\n<li>需要安装的应用：<ul>\n<li>apache: 服务器软件,用来搭建本地web服务</li>\n<li>termux-services: 管理termux服务</li>\n<li>cpolar: 内网穿透,是本地服务公网也可以访问</li>\n</ul>\n</li>\n<li>安装apache,termux-services</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install apache2 termux-services</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装 cpolar</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建必要的文件夹：</span></span><br><span class=\"line\">mkdir -p $PREFIX/etc/apt/sources.list.d</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加cpolar下载源</span></span><br><span class=\"line\">echo &quot;deb [trusted=yes] http://termux.cpolar.com termux extras&quot; &gt;&gt; $PREFIX/etc/apt/sources.list.d/cpolar.list</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新仓库</span></span><br><span class=\"line\">pkg update</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">pkg install cpolar</span><br></pre></td></tr></table></figure>\n<p>安装完成后重启 termux</p>\n<h2 id=\"注册-cpolar-账户\"><a href=\"#注册-cpolar-账户\" class=\"headerlink\" title=\"注册 cpolar 账户\"></a>注册 cpolar 账户</h2><ul>\n<li>注册<br>登陆<a href=\"https://www.cpolar.com/\">cpolar官网</a>，点击 <strong>免费注册</strong>，填写必要的信息进行注册(注册时需要的信息可以随便填写，但是，如果填写邮箱时如果填写的是不存在的邮箱，虽然可以注册成功，但后期将无法更换密码，因为她需要邮箱进行验证)</li>\n<li>获取 authtoken<br>登陆成功后便可以获取 <strong>authtoken</strong>(cpolar软件配置内网穿透需要这个)，点击 <strong>验证</strong> 即可找到 authtoken。</li>\n</ul>\n<h2 id=\"配置-启动\"><a href=\"#配置-启动\" class=\"headerlink\" title=\"配置&amp;启动\"></a>配置&amp;启动</h2><ul>\n<li>配置<ul>\n<li>apache2  <ul>\n<li>打开：$PREFIX&#x2F;etc&#x2F;apache2&#x2F;httpd.conf</li>\n<li>取消 <code>ServerName www.example.com</code> 的注释</li>\n<li>将 <code>www.example.com</code> 更改为本地地址和自己向要配置的端口号，例如:<code>127.0.0.1:8080</code></li>\n</ul>\n</li>\n<li>cpolar<ul>\n<li>打开：$PREFIX&#x2F;etc&#x2F;cpolar&#x2F;cpolar.yml</li>\n<li>添加 <code>authtoken: &lt;your authtoken&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>启动服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 apache2</span></span><br><span class=\"line\">apachectl start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 cpolar</span></span><br><span class=\"line\">sv up cpolar</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cpolar 穿透 apache 本地服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里的ip和端口就是 apache2 配置文件中配置的ip和端口号</span></span><br><span class=\"line\">cpolar http 127.0.0.1:8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看本地web服务映射的URL<br>登陆cpolar 网站，点击 <strong>状态</strong> 可以查看 <strong>在线隧道</strong> 信息，其中包括本地服务映射的 <strong>URL</strong> ，复制该 URL 并在浏览器中打开就可以访问 web 服务了。</li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"在安卓机上基于termux搭建web服务器\"><a href=\"#在安卓机上基于termux搭建web服务器\" class=\"headerlink\" title=\"在安卓机上基于termux搭建web服务器\"></a>在安卓机上基于termux搭建web服务器</h1><h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>换了新手机后，旧手机闲置着总觉得浪费，所以就想着折腾一下，搭建一个简单的web服务器玩玩。</p>\n<h1 id=\"搭建详情\"><a href=\"#搭建详情\" class=\"headerlink\" title=\"搭建详情\"></a>搭建详情</h1><h2 id=\"安装应用\"><a href=\"#安装应用\" class=\"headerlink\" title=\"安装应用\"></a>安装应用</h2><ul>\n<li>需要安装的应用：<ul>\n<li>apache: 服务器软件,用来搭建本地web服务</li>\n<li>termux-services: 管理termux服务</li>\n<li>cpolar: 内网穿透,是本地服务公网也可以访问</li>\n</ul>\n</li>\n<li>安装apache,termux-services</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install apache2 termux-services</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装 cpolar</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建必要的文件夹：</span></span><br><span class=\"line\">mkdir -p $PREFIX/etc/apt/sources.list.d</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加cpolar下载源</span></span><br><span class=\"line\">echo &quot;deb [trusted=yes] http://termux.cpolar.com termux extras&quot; &gt;&gt; $PREFIX/etc/apt/sources.list.d/cpolar.list</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新仓库</span></span><br><span class=\"line\">pkg update</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">pkg install cpolar</span><br></pre></td></tr></table></figure>\n<p>安装完成后重启 termux</p>\n<h2 id=\"注册-cpolar-账户\"><a href=\"#注册-cpolar-账户\" class=\"headerlink\" title=\"注册 cpolar 账户\"></a>注册 cpolar 账户</h2><ul>\n<li>注册<br>登陆<a href=\"https://www.cpolar.com/\">cpolar官网</a>，点击 <strong>免费注册</strong>，填写必要的信息进行注册(注册时需要的信息可以随便填写，但是，如果填写邮箱时如果填写的是不存在的邮箱，虽然可以注册成功，但后期将无法更换密码，因为她需要邮箱进行验证)</li>\n<li>获取 authtoken<br>登陆成功后便可以获取 <strong>authtoken</strong>(cpolar软件配置内网穿透需要这个)，点击 <strong>验证</strong> 即可找到 authtoken。</li>\n</ul>\n<h2 id=\"配置-启动\"><a href=\"#配置-启动\" class=\"headerlink\" title=\"配置&amp;启动\"></a>配置&amp;启动</h2><ul>\n<li>配置<ul>\n<li>apache2  <ul>\n<li>打开：$PREFIX&#x2F;etc&#x2F;apache2&#x2F;httpd.conf</li>\n<li>取消 <code>ServerName www.example.com</code> 的注释</li>\n<li>将 <code>www.example.com</code> 更改为本地地址和自己向要配置的端口号，例如:<code>127.0.0.1:8080</code></li>\n</ul>\n</li>\n<li>cpolar<ul>\n<li>打开：$PREFIX&#x2F;etc&#x2F;cpolar&#x2F;cpolar.yml</li>\n<li>添加 <code>authtoken: &lt;your authtoken&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>启动服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 apache2</span></span><br><span class=\"line\">apachectl start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 cpolar</span></span><br><span class=\"line\">sv up cpolar</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cpolar 穿透 apache 本地服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里的ip和端口就是 apache2 配置文件中配置的ip和端口号</span></span><br><span class=\"line\">cpolar http 127.0.0.1:8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看本地web服务映射的URL<br>登陆cpolar 网站，点击 <strong>状态</strong> 可以查看 <strong>在线隧道</strong> 信息，其中包括本地服务映射的 <strong>URL</strong> ，复制该 URL 并在浏览器中打开就可以访问 web 服务了。</li>\n</ul>\n"},{"_content":"[toc]\n\n<u></u>\n# 如何下载 google chrome 安卓版\n## 解决科学上网的问题\n[科学上网](https://github.com/zhang20204/tools/blob/main/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/index.md)\n## 找到 chrome 在google play中的url\n1. 打开[google play](https://play.google.com/store/games)，并选中 **手机**\n    ![](./google-play/google-play-url.png)\n2. 在搜索栏中搜索 \"chrome\"\n    ![](./google-play/search-chrome.png)\n3. 点击 **Google Chrome 浏览器**\n    ![](./google-play/click-chrome.png)\n4. 点击 **分享**\n    ![](./google-play/get-chrome-url.png)\n5. 复制 url\n##  下载 chrome\n1. 打开 [apk-downloader](https://apps.evozi.com/apk-downloader/)\n    ![](./apk-downloader/apk-downloader-ui.png)\n2. 将在 **google play** 中复制的 url  粘贴到里面 ,点击 **Generate Download Line** 生成下载链接\n    ![](./apk-downloader/download-chrome.png)\n3. 点击 **Click here to download com.android.chrome now** 下载即可下载chrome apk\n\n# 趣事\n说来还蛮搞笑的。  \n&emsp;笔者原本打算是下载[Firefox(火狐)](https://www.mozilla.org/zh-CN/firefox/browsers/mobile/android/)的，但发现这玩意儿现在无法直接下载(我记得之前firefor,chrome都是可以直接下载apk的)，要下载就需要转到google paly，无语...  \n&emsp;然后就开始进 google play的官网，接着search, install, 提示我必须登陆，再次无语...  \n&emsp;好吧那就登录吧。登陆google paly 之后发现还是无法直接下载，说什么“此 Google 帐号尚未与设备关联。请在安装应用之前访问您设备上的 Play 商店应用。”，无语plus...  \n&emsp;当我在网络中寻回了解决办法时发现，既然安卓版 firefox 和 chrome 都需要在 google play 中才能获取，那我为什么不直接下载安装 chrome 呢？这在有了这篇博客。\n","source":"_posts/blog/下载chrome安卓版/下载chrome安卓版.md","raw":"[toc]\n\n<u></u>\n# 如何下载 google chrome 安卓版\n## 解决科学上网的问题\n[科学上网](https://github.com/zhang20204/tools/blob/main/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/index.md)\n## 找到 chrome 在google play中的url\n1. 打开[google play](https://play.google.com/store/games)，并选中 **手机**\n    ![](./google-play/google-play-url.png)\n2. 在搜索栏中搜索 \"chrome\"\n    ![](./google-play/search-chrome.png)\n3. 点击 **Google Chrome 浏览器**\n    ![](./google-play/click-chrome.png)\n4. 点击 **分享**\n    ![](./google-play/get-chrome-url.png)\n5. 复制 url\n##  下载 chrome\n1. 打开 [apk-downloader](https://apps.evozi.com/apk-downloader/)\n    ![](./apk-downloader/apk-downloader-ui.png)\n2. 将在 **google play** 中复制的 url  粘贴到里面 ,点击 **Generate Download Line** 生成下载链接\n    ![](./apk-downloader/download-chrome.png)\n3. 点击 **Click here to download com.android.chrome now** 下载即可下载chrome apk\n\n# 趣事\n说来还蛮搞笑的。  \n&emsp;笔者原本打算是下载[Firefox(火狐)](https://www.mozilla.org/zh-CN/firefox/browsers/mobile/android/)的，但发现这玩意儿现在无法直接下载(我记得之前firefor,chrome都是可以直接下载apk的)，要下载就需要转到google paly，无语...  \n&emsp;然后就开始进 google play的官网，接着search, install, 提示我必须登陆，再次无语...  \n&emsp;好吧那就登录吧。登陆google paly 之后发现还是无法直接下载，说什么“此 Google 帐号尚未与设备关联。请在安装应用之前访问您设备上的 Play 商店应用。”，无语plus...  \n&emsp;当我在网络中寻回了解决办法时发现，既然安卓版 firefox 和 chrome 都需要在 google play 中才能获取，那我为什么不直接下载安装 chrome 呢？这在有了这篇博客。\n","slug":"blog/下载chrome安卓版/下载chrome安卓版","published":1,"date":"2025-01-17T10:08:30.811Z","updated":"2025-01-17T10:08:30.811Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm60lqtfo0009p5jx32kmdfe3","content":"<p>[toc]</p>\n<p><u></u></p>\n<h1 id=\"如何下载-google-chrome-安卓版\"><a href=\"#如何下载-google-chrome-安卓版\" class=\"headerlink\" title=\"如何下载 google chrome 安卓版\"></a>如何下载 google chrome 安卓版</h1><h2 id=\"解决科学上网的问题\"><a href=\"#解决科学上网的问题\" class=\"headerlink\" title=\"解决科学上网的问题\"></a>解决科学上网的问题</h2><p><a href=\"https://github.com/zhang20204/tools/blob/main/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/index.md\">科学上网</a></p>\n<h2 id=\"找到-chrome-在google-play中的url\"><a href=\"#找到-chrome-在google-play中的url\" class=\"headerlink\" title=\"找到 chrome 在google play中的url\"></a>找到 chrome 在google play中的url</h2><ol>\n<li>打开<a href=\"https://play.google.com/store/games\">google play</a>，并选中 <strong>手机</strong><br> <img src=\"/./google-play/google-play-url.png\"></li>\n<li>在搜索栏中搜索 “chrome”<br> <img src=\"/./google-play/search-chrome.png\"></li>\n<li>点击 <strong>Google Chrome 浏览器</strong><br> <img src=\"/./google-play/click-chrome.png\"></li>\n<li>点击 <strong>分享</strong><br> <img src=\"/./google-play/get-chrome-url.png\"></li>\n<li>复制 url</li>\n</ol>\n<h2 id=\"下载-chrome\"><a href=\"#下载-chrome\" class=\"headerlink\" title=\"下载 chrome\"></a>下载 chrome</h2><ol>\n<li>打开 <a href=\"https://apps.evozi.com/apk-downloader/\">apk-downloader</a><br> <img src=\"/./apk-downloader/apk-downloader-ui.png\"></li>\n<li>将在 <strong>google play</strong> 中复制的 url  粘贴到里面 ,点击 <strong>Generate Download Line</strong> 生成下载链接<br> <img src=\"/./apk-downloader/download-chrome.png\"></li>\n<li>点击 <strong>Click here to download com.android.chrome now</strong> 下载即可下载chrome apk</li>\n</ol>\n<h1 id=\"趣事\"><a href=\"#趣事\" class=\"headerlink\" title=\"趣事\"></a>趣事</h1><p>说来还蛮搞笑的。<br>&emsp;笔者原本打算是下载<a href=\"https://www.mozilla.org/zh-CN/firefox/browsers/mobile/android/\">Firefox(火狐)</a>的，但发现这玩意儿现在无法直接下载(我记得之前firefor,chrome都是可以直接下载apk的)，要下载就需要转到google paly，无语…<br>&emsp;然后就开始进 google play的官网，接着search, install, 提示我必须登陆，再次无语…<br>&emsp;好吧那就登录吧。登陆google paly 之后发现还是无法直接下载，说什么“此 Google 帐号尚未与设备关联。请在安装应用之前访问您设备上的 Play 商店应用。”，无语plus…<br>&emsp;当我在网络中寻回了解决办法时发现，既然安卓版 firefox 和 chrome 都需要在 google play 中才能获取，那我为什么不直接下载安装 chrome 呢？这在有了这篇博客。</p>\n","excerpt":"","more":"<p>[toc]</p>\n<p><u></u></p>\n<h1 id=\"如何下载-google-chrome-安卓版\"><a href=\"#如何下载-google-chrome-安卓版\" class=\"headerlink\" title=\"如何下载 google chrome 安卓版\"></a>如何下载 google chrome 安卓版</h1><h2 id=\"解决科学上网的问题\"><a href=\"#解决科学上网的问题\" class=\"headerlink\" title=\"解决科学上网的问题\"></a>解决科学上网的问题</h2><p><a href=\"https://github.com/zhang20204/tools/blob/main/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/index.md\">科学上网</a></p>\n<h2 id=\"找到-chrome-在google-play中的url\"><a href=\"#找到-chrome-在google-play中的url\" class=\"headerlink\" title=\"找到 chrome 在google play中的url\"></a>找到 chrome 在google play中的url</h2><ol>\n<li>打开<a href=\"https://play.google.com/store/games\">google play</a>，并选中 <strong>手机</strong><br> <img src=\"/./google-play/google-play-url.png\"></li>\n<li>在搜索栏中搜索 “chrome”<br> <img src=\"/./google-play/search-chrome.png\"></li>\n<li>点击 <strong>Google Chrome 浏览器</strong><br> <img src=\"/./google-play/click-chrome.png\"></li>\n<li>点击 <strong>分享</strong><br> <img src=\"/./google-play/get-chrome-url.png\"></li>\n<li>复制 url</li>\n</ol>\n<h2 id=\"下载-chrome\"><a href=\"#下载-chrome\" class=\"headerlink\" title=\"下载 chrome\"></a>下载 chrome</h2><ol>\n<li>打开 <a href=\"https://apps.evozi.com/apk-downloader/\">apk-downloader</a><br> <img src=\"/./apk-downloader/apk-downloader-ui.png\"></li>\n<li>将在 <strong>google play</strong> 中复制的 url  粘贴到里面 ,点击 <strong>Generate Download Line</strong> 生成下载链接<br> <img src=\"/./apk-downloader/download-chrome.png\"></li>\n<li>点击 <strong>Click here to download com.android.chrome now</strong> 下载即可下载chrome apk</li>\n</ol>\n<h1 id=\"趣事\"><a href=\"#趣事\" class=\"headerlink\" title=\"趣事\"></a>趣事</h1><p>说来还蛮搞笑的。<br>&emsp;笔者原本打算是下载<a href=\"https://www.mozilla.org/zh-CN/firefox/browsers/mobile/android/\">Firefox(火狐)</a>的，但发现这玩意儿现在无法直接下载(我记得之前firefor,chrome都是可以直接下载apk的)，要下载就需要转到google paly，无语…<br>&emsp;然后就开始进 google play的官网，接着search, install, 提示我必须登陆，再次无语…<br>&emsp;好吧那就登录吧。登陆google paly 之后发现还是无法直接下载，说什么“此 Google 帐号尚未与设备关联。请在安装应用之前访问您设备上的 Play 商店应用。”，无语plus…<br>&emsp;当我在网络中寻回了解决办法时发现，既然安卓版 firefox 和 chrome 都需要在 google play 中才能获取，那我为什么不直接下载安装 chrome 呢？这在有了这篇博客。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}