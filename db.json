{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/Wikitten/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/SitePreview.png","path":"images/SitePreview.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile1.png","path":"images/mobile1.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/images/mobile2.png","path":"images/mobile2.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","path":"libs/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","path":"libs/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","path":"libs/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","path":"libs/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","path":"libs/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","path":"libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","modified":0,"renderable":1}],"Cache":[{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1737108027699},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1737108030041},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1737108030040},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1737108030046},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1737108030047},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1737108030049},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1737108030050},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1737108027702},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1737108027706},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1737108027708},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1737108027708},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1737108027710},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1737108027827},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1737108027700},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1737108027700},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1737108027701},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1737108027702},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1737108027706},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1737108027708},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1737108027701},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1737108027705},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1737108027710},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1737108027710},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1737108030041},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1737108030041},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1737108027700},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1737108030040},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1737108027705},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1737108027706},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1737108027707},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1737108027708},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1737108027709},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1737108027711},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1737108030042},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1737108030042},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1737108030042},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1737108030043},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1737108030043},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1737108030043},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1737108030044},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1737108030044},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1737108030044},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1737108030045},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1737108030043},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1737108030044},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1737108030038},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1737108027842},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1737108027826},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1737108447295},{"_id":"source/_posts/blog/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1737108510768},{"_id":"source/_posts/blog/README.md","hash":"6bf5adac6f03518fe16890df501972d5a57327ff","modified":1737363429719},{"_id":"source/_posts/blog/hash_in_c.md","hash":"cab1b58625de4b338f0b0d434f84b481cd902b3e","modified":1737363429720},{"_id":"source/_posts/blog/input_method-on-ubuntu.md","hash":"b5da1d77bf9406ebc33d3159368d4834e62bed45","modified":1737363429720},{"_id":"source/_posts/blog/.git/COMMIT_EDITMSG","hash":"ea47b7848851fd5de63701a12d34d059974c1a05","modified":1737108510770},{"_id":"source/_posts/blog/.git/HEAD","hash":"9f1df7eea4156be8a871c292b549b3325e425aa2","modified":1737108510770},{"_id":"source/_posts/blog/.git/config","hash":"82f08b4d7a2d459dad5a95170b63541c9f9e212f","modified":1737108510770},{"_id":"source/_posts/blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1737108510770},{"_id":"source/_posts/blog/.git/index","hash":"6222333cf631e7a69ce72268fac533877193b1d4","modified":1737108510769},{"_id":"source/_posts/blog/.git/packed-refs","hash":"e9c951352cab435220b82f67b674125ccde540b4","modified":1737108510770},{"_id":"source/_posts/blog/2d_arry-in-c_function_arg/2D_array.md","hash":"d9ac1cdc28d562a37494a30b0658c62353830cb1","modified":1737212839305},{"_id":"source/_posts/blog/2d_arry-in-c_function_arg/compiling.png","hash":"3842abb3e2c193198dca949ec0ef0163e4b998e7","modified":1737108510795},{"_id":"source/_posts/blog/cloud-server/free-cloud-server.md","hash":"fd1ffef7283753143dc582f3368f89531e68370a","modified":1737212839305},{"_id":"source/_posts/blog/create-google-account/base-info.png","hash":"6301a8f27ea5e77670ad183878423162653ae6db","modified":1737108510799},{"_id":"source/_posts/blog/create-google-account/usrname.png","hash":"ad39f0fccec3b3626da2c94a9f3a6e31924dffb1","modified":1737108510804},{"_id":"source/_posts/blog/create-google-account/创建google账户.md","hash":"acd5b4a4999f56e509d40b3801985520897b3d39","modified":1737212839305},{"_id":"source/_posts/blog/termux-for-android/termux-remote.md","hash":"6463d198ea35147f1a1b6238d7369dbf1d765d3c","modified":1737212839306},{"_id":"source/_posts/blog/webserver_on_termux_of_android/build_webserver_on_android.md","hash":"67023037fdf786a6c56aa9611d70e9dbdb44bdde","modified":1737212839306},{"_id":"source/_posts/blog/下载chrome安卓版/下载chrome安卓版.md","hash":"0e614364f0c44391c53cf0b0a2ab0ae9501aa6d2","modified":1737212839306},{"_id":"source/_posts/blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/pre-commit.sample","hash":"8093d68e142db52dcab2215e770ba0bbe4cfbf24","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1737108510772},{"_id":"source/_posts/blog/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1737108510771},{"_id":"source/_posts/blog/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/sendemail-validate.sample","hash":"74cf1d5415a5c03c110240f749491297d65c4c98","modified":1737108510773},{"_id":"source/_posts/blog/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1737108510772},{"_id":"source/_posts/blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1737108510771},{"_id":"source/_posts/blog/.git/logs/HEAD","hash":"1f49be8405326ba868c6660d54ade7b2099440ba","modified":1737108510792},{"_id":"source/_posts/blog/cloud-server/pictures/abeiyun-free_version-performance.png","hash":"fe8afea79d249d8adf624574e25bd8b276c18216","modified":1737108510798},{"_id":"source/_posts/blog/termux-for-android/pictures/login-ubuntu.png","hash":"ae59f6a7b7b3652c6b3f81b8489f4e29eac74ab6","modified":1737108510807},{"_id":"source/_posts/blog/termux-for-android/pictures/open-web-termux.png","hash":"30688598cf7badfa6836a91ed6054bc31be16d03","modified":1737108510808},{"_id":"source/_posts/blog/termux-for-android/pictures/remote-login.png","hash":"c8b8d0e21d55a913613b1e4a5ff5f57e64701b3d","modified":1737108510809},{"_id":"source/_posts/blog/.git/objects/1c/da61185f9a7852d7b6595ff63fed283d374a85","hash":"297d7a063373744d980b42e2b746adc6e9b03d24","modified":1737108510790},{"_id":"source/_posts/blog/.git/objects/pack/pack-19ed93ea1fa28f11d57746ae2248244754ca7143.idx","hash":"b3753c0581662b846ea49a4f1f9bd4c2239c246d","modified":1737108510789},{"_id":"source/_posts/blog/.git/objects/pack/pack-19ed93ea1fa28f11d57746ae2248244754ca7143.rev","hash":"8c5f07a55efa597969cbe2586b1e59aa5fe0d729","modified":1737108510789},{"_id":"source/_posts/blog/.git/objects/52/a6ef2d000b565598bfc82d8597c52a061b88f1","hash":"3310867e3a2f1e8198cefa0ac5c3d531e0b600d3","modified":1737108510790},{"_id":"source/_posts/blog/.git/refs/heads/main","hash":"f683dfa428a06af08eaf4f3c67f9ca22224e8118","modified":1737108510790},{"_id":"source/_posts/blog/.git/logs/refs/heads/main","hash":"1f49be8405326ba868c6660d54ade7b2099440ba","modified":1737108510794},{"_id":"source/_posts/blog/.git/refs/remotes/origin/HEAD","hash":"5ae7c22895c35af5f56ba1891a4dd62b4dc1f955","modified":1737108510792},{"_id":"source/_posts/blog/.git/refs/remotes/origin/main","hash":"f683dfa428a06af08eaf4f3c67f9ca22224e8118","modified":1737108510792},{"_id":"source/_posts/blog/.git/logs/refs/remotes/origin/HEAD","hash":"4314d1a1e70ad91cf351a10accefad791ab394b7","modified":1737108510793},{"_id":"source/_posts/blog/.git/logs/refs/remotes/origin/main","hash":"f1b2e667e8e016cbff2ebce0b8dff34910440ddd","modified":1737108510793},{"_id":"source/_posts/blog/create-google-account/gen-email.png","hash":"9a92fe0637997d73b810a45dfc1a0e5e1e2adbc0","modified":1737108510801},{"_id":"source/_posts/blog/create-google-account/recovery-email.png","hash":"87def69564682f08d870cd3d2df217cff5720917","modified":1737108510803},{"_id":"source/_posts/blog/create-google-account/user-password.png","hash":"3a8ab43ef12d1cd5205e69a59149c63c68dbd21d","modified":1737108510804},{"_id":"source/_posts/blog/termux-for-android/pictures/install-termux.png","hash":"50c98100a148ad61e1cd79089962206381647d4d","modified":1737108510806},{"_id":"source/_posts/blog/termux-for-android/pictures/install-ubuntu.png","hash":"dea5f30a9fd346a839f493998ab677415927d989","modified":1737108510807},{"_id":"source/_posts/blog/termux-for-android/pictures/termux.png","hash":"8ac29f72d411997fa03239ce0439272fc1be1413","modified":1737108510810},{"_id":"source/_posts/blog/下载chrome安卓版/apk-downloader/apk-downloader-ui.png","hash":"e8f1174a8c3584f38cc8c3acbb094c4c05b205d2","modified":1737108510812},{"_id":"source/_posts/blog/create-google-account/create-a-google-account.png","hash":"03df1a57b5b57394b7e75ad3df6556508d18a50b","modified":1737108510800},{"_id":"source/_posts/blog/cloud-server/pictures/abeiyum.png","hash":"19c0ce798038693a0f82df8ebb7f7e8e008c66e9","modified":1737108510797},{"_id":"source/_posts/blog/termux-for-android/pictures/open-termux.png","hash":"eb2f1a29cd73cc625b6ad631ba7f2a07027490ac","modified":1737108510808},{"_id":"source/_posts/blog/下载chrome安卓版/apk-downloader/download-chrome.png","hash":"0e9423e8c2404ed2183761028a439469a1388fc0","modified":1737108510813},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/click-chrome.png","hash":"12896241e823f39f4cdbd08cf0a35770758f22d8","modified":1737108510815},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/get-chrome-url.png","hash":"7c6db0f6a3b9f3b3ff2dacdbc5618adca906f3d5","modified":1737108510817},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/share-url.png","hash":"26b424b4a46adc2e0758992dcfb3f8c8588a533b","modified":1737108510827},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/search-chrome.png","hash":"b27e32a6bc254e3243aded3a58caf4dcacb01143","modified":1737108510826},{"_id":"source/_posts/blog/下载chrome安卓版/google-play/google-play-url.png","hash":"f0125bde63141e21af68dce9c150dfb0223dbcba","modified":1737108510823},{"_id":"source/_posts/blog/.git/objects/pack/pack-19ed93ea1fa28f11d57746ae2248244754ca7143.pack","hash":"c2732ea0665006315ceac7c54a3a1c10a4225cf0","modified":1737108510788},{"_id":"themes/tree/.gitignore","hash":"349621a24dfaedcb0b00bdb3b73d337a9659f2ec","modified":1737181174581},{"_id":"themes/tree/LICENSE.md","hash":"7c4ae9c24b3598e7d58d6e74ca52b7132e018c24","modified":1737181174581},{"_id":"themes/tree/README.md","hash":"0dd920e5cab489cc89709f835b90ed7896a2e82a","modified":1737181174581},{"_id":"themes/tree/_config.yml","hash":"b2dfc81e1d8fa3318d25bc406ca1d0e350dc14fd","modified":1737181174581},{"_id":"themes/tree/languages/en.yml","hash":"f6bceb822f5747641a0a3571fcf03fd0e6147b4e","modified":1737181174581},{"_id":"themes/tree/languages/tr.yml","hash":"0eab3928073e0617af9ca483eeba0251c8511484","modified":1737181174582},{"_id":"themes/tree/languages/zh-Hans.yml","hash":"a42a527b92b22d0df675ed5f70d507634fcf0283","modified":1737181174582},{"_id":"themes/tree/layout/categories.ejs","hash":"f22fd70e38f415b375f88c62e1741995a58e0496","modified":1737181174582},{"_id":"themes/tree/layout/index.ejs","hash":"89c8aebef7ad7863ead3d92d282252d1d420618c","modified":1737181174582},{"_id":"themes/tree/layout/layout.ejs","hash":"6bd68bbb7e8debef58fc6e43a1e2c007bead7ca6","modified":1737181174582},{"_id":"themes/tree/layout/post.ejs","hash":"7cf5cc4f449549c31f4ddf9a6814f4be5f7f7284","modified":1737181174582},{"_id":"themes/tree/layout/tags.ejs","hash":"8bc73eb4f7edb7ffccb0afe8cdf856ac38098b68","modified":1737181174582},{"_id":"themes/tree/source/404.html","hash":"cfa1b96d02d143d77c0ba519dab1c23de0cae6ee","modified":1737181174582},{"_id":"themes/tree/source/favicon.ico","hash":"268be0a863caae7c5a732fb8a911a81434f31117","modified":1737181174583},{"_id":"themes/tree/layout/_partial/footer.ejs","hash":"b28a77c9c15b4642332b5fbc600d187b2573a8d5","modified":1737181174582},{"_id":"themes/tree/layout/_partial/head.ejs","hash":"3a6baab755a6120a88a0a6a9c7f6c4a4eaba28ed","modified":1737181174582},{"_id":"themes/tree/layout/_partial/header.ejs","hash":"020b6c62439a71e02afa28506d825c5e347e7d8f","modified":1737181174582},{"_id":"themes/tree/layout/_partial/sidebar.ejs","hash":"dc6122bf8a97476efeba53cae589a488d0ea52e6","modified":1737181174582},{"_id":"themes/tree/layout/_partial/totop.ejs","hash":"a94c4b350b76d21bb530095981049a2647cc6273","modified":1737181174582},{"_id":"themes/tree/source/css/main.css","hash":"fe38743a60532d7e029f19865e1a0c2d706e7679","modified":1737181174583},{"_id":"themes/tree/source/js/main.js","hash":"269e3b995592bb1296ef45ab67ff799ad7750123","modified":1737181174583},{"_id":"themes/tree/source/Tree.png","hash":"e5a30d5edf5aa2dc39fb4db7b4761b516826cf5b","modified":1737181174583},{"_id":"source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1737182074769},{"_id":"source/about/index.md","hash":"d6443bbae8ff1b9e069e5cae24281c834f487129","modified":1737278096262},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1737182074769},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1737182074769},{"_id":"themes/Wikitten/.gitignore","hash":"08dd24e37b9695df6a47a01059aed60f83ff5de7","modified":1737182053823},{"_id":"themes/Wikitten/LICENSE","hash":"feadcd728a8e828cfc507b4586d7a7ab94b66fe8","modified":1737182053823},{"_id":"themes/Wikitten/README.md","hash":"8c9fc9b9ebdf37c9289a4e1d72ac8aedbe23316c","modified":1737182053823},{"_id":"themes/Wikitten/README_zh-CN.md","hash":"8a4e600ff1f75007df8facf15a9c127aafec5e18","modified":1737182053824},{"_id":"themes/Wikitten/_config.yml","hash":"027dcffbb240d0b870df37e3ea9a9635cfbf0574","modified":1738488850867},{"_id":"themes/Wikitten/_config.yml.example","hash":"e8d451b59680232c5fb3b5f41b64ad248d1ba6e1","modified":1737182053824},{"_id":"themes/Wikitten/package.json","hash":"45d85fca94aa5f2066abc08dec6cc7009558e300","modified":1737182053826},{"_id":"themes/Wikitten/_scaffolds/embed.md","hash":"0830c3a5b134fbd21a6ddeda141a4de8345cabb1","modified":1737182053824},{"_id":"themes/Wikitten/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1737182053825},{"_id":"themes/Wikitten/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/article.ejs","hash":"595a086a42a156dd44d30ee7f9e7189ca370bcf1","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/footer.ejs","hash":"c666216877453d67db8637e8de7a7f2c1b92d9cb","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/head.ejs","hash":"5f2df8713f0ef723b3bfc79ae580fe8707ea2036","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/iframe.ejs","hash":"c3a8e71e1660d58b6ed106a045c6829e77e65881","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1737182053825},{"_id":"themes/Wikitten/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1737182053825},{"_id":"themes/Wikitten/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1737182053825},{"_id":"themes/Wikitten/layout/plugin/mathjax.ejs","hash":"a5578fd682da0f26c85428bfb59043f9f5c682a7","modified":1737182053825},{"_id":"themes/Wikitten/layout/plugin/scripts.ejs","hash":"6e410c120dabac0dccbd8b0c312f261c9566cacb","modified":1737182053825},{"_id":"themes/Wikitten/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1737182053826},{"_id":"themes/Wikitten/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1737182053826},{"_id":"themes/Wikitten/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1737182053826},{"_id":"themes/Wikitten/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1737182053826},{"_id":"themes/Wikitten/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1737182053826},{"_id":"themes/Wikitten/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1737182053826},{"_id":"themes/Wikitten/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1737182053826},{"_id":"themes/Wikitten/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1737182053826},{"_id":"themes/Wikitten/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1737182053826},{"_id":"themes/Wikitten/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1737182053826},{"_id":"themes/Wikitten/layout/widget/archive.ejs","hash":"91a4675876990c12bd252f00e13894e0e7e5e50a","modified":1737182053826},{"_id":"themes/Wikitten/layout/widget/category.ejs","hash":"d09317d5e328a9c6ff8fded93604ebe04764cc4c","modified":1737182053826},{"_id":"themes/Wikitten/layout/widget/links.ejs","hash":"0f58cafed5156488f550df6d560814f835a46854","modified":1737182053826},{"_id":"themes/Wikitten/layout/widget/recent_posts.ejs","hash":"dc83051ae67cfae0db0a6d9790c923ff2883ee25","modified":1737182053826},{"_id":"themes/Wikitten/layout/widget/tag.ejs","hash":"5d70b1bf3b1fc977135e458f9a50cb65cff91f17","modified":1737182053826},{"_id":"themes/Wikitten/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1737182053826},{"_id":"themes/Wikitten/source/css/_variables.styl","hash":"2eba1250b39115da9f32e8a70d271e04186419c0","modified":1737182053830},{"_id":"themes/Wikitten/source/css/style.styl","hash":"d37d6c7754805c60564c0d9a50b7b058e7f830c9","modified":1737182053830},{"_id":"themes/Wikitten/_scaffolds/post.md","hash":"af892af6f7dafdd617c5aa17ee91e9e445d20fa4","modified":1737182053824},{"_id":"themes/Wikitten/_source/robots.txt","hash":"be8d5ab7132ac74a9375439e438b00b8c91e50b4","modified":1737182053824},{"_id":"themes/Wikitten/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1737182053824},{"_id":"themes/Wikitten/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1737182053824},{"_id":"themes/Wikitten/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1737182053824},{"_id":"themes/Wikitten/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1737182053824},{"_id":"themes/Wikitten/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1737182053824},{"_id":"themes/Wikitten/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1737182053824},{"_id":"themes/Wikitten/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1737182053824},{"_id":"themes/Wikitten/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1737182053824},{"_id":"themes/Wikitten/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1737182053824},{"_id":"themes/Wikitten/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1737182053824},{"_id":"themes/Wikitten/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1737182053824},{"_id":"themes/Wikitten/layout/archive.ejs","hash":"34180dcc26b8fcc59f8644ce506aadf7db5f07e5","modified":1737182053824},{"_id":"themes/Wikitten/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1737182053824},{"_id":"themes/Wikitten/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1737182053824},{"_id":"themes/Wikitten/layout/embed.ejs","hash":"9e4e14d7adf20225e26d3943bdae8d08cf2d0d8b","modified":1737182053825},{"_id":"themes/Wikitten/layout/index.ejs","hash":"0980482c3b37acffd1b724ebc51240ca6967be5c","modified":1737182053825},{"_id":"themes/Wikitten/layout/layout.ejs","hash":"61c0dad38893fb9fe4eba7fe2afaf7464310b925","modified":1737182053825},{"_id":"themes/Wikitten/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1737182053825},{"_id":"themes/Wikitten/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1737182053825},{"_id":"themes/Wikitten/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1737182053826},{"_id":"themes/Wikitten/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1737182053826},{"_id":"themes/Wikitten/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1737182053826},{"_id":"themes/Wikitten/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1737182053826},{"_id":"themes/Wikitten/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1737182053824},{"_id":"themes/Wikitten/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1737182053824},{"_id":"themes/Wikitten/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1737182053824},{"_id":"themes/Wikitten/layout/comment/counter.ejs","hash":"e109d3256b004b027d029bd5bd67feeb72dc5388","modified":1737182053824},{"_id":"themes/Wikitten/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1737182053825},{"_id":"themes/Wikitten/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1737182053825},{"_id":"themes/Wikitten/layout/comment/index.ejs","hash":"f0f00cce7a5c37f00dbc4acf49529bdd6a6bdc5d","modified":1737182053825},{"_id":"themes/Wikitten/layout/widget/tagcloud.ejs","hash":"73638a7c91c6d6433e766b35199508719bf27d19","modified":1737182053826},{"_id":"themes/Wikitten/source/images/mobile1.png","hash":"db83e3ffbf60ff88443cd3b9d1c23666005e88f0","modified":1737182053832},{"_id":"themes/Wikitten/source/images/mobile2.png","hash":"ba9a7a5464369c4272f6345ef879b5d1c2449de1","modified":1737182053833},{"_id":"themes/Wikitten/source/js/insight.js","hash":"c9dfd20ae82a446facad01439b7bb75332e3705b","modified":1737182053833},{"_id":"themes/Wikitten/source/js/main.js","hash":"16b8b4c87801386fbbd144d8a803454d175505f9","modified":1737182053833},{"_id":"themes/Wikitten/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1737182053825},{"_id":"themes/Wikitten/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1737182053825},{"_id":"themes/Wikitten/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1737182053826},{"_id":"themes/Wikitten/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1737182053826},{"_id":"themes/Wikitten/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1737182053827},{"_id":"themes/Wikitten/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1737182053828},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/archive.styl","hash":"146b5a86d6f602232d86e246ea20620ec923cccc","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/article.styl","hash":"85db02a6f51d81ac317a7f0727fa16b7ce7d5e9e","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/header.styl","hash":"154fcfe17c4a9833903b3a91efb1ddf315e7fcba","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/insight.styl","hash":"d3195723c373a68a05b76d430f8aeb2d2dd1957f","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/profile.styl","hash":"2ecc48d48ad8769556036f19f2769c84c428cbc6","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/sidebar.styl","hash":"4a11aace0de3aeafdd88caef7cd238543ce1cd95","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_partial/timeline.styl","hash":"4ea679287d49f91634dd32ad812746cccc1e6281","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1737182053829},{"_id":"themes/Wikitten/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1737182053830},{"_id":"themes/Wikitten/source/css/images/favicon.ico","hash":"b37ac89616b9e4c01a35991af59fe6b63e41a48e","modified":1737182053830},{"_id":"themes/Wikitten/source/css/images/logo.png","hash":"8c61e1ec0b7c7200045d7795bac097fce475ef16","modified":1737182053830},{"_id":"themes/Wikitten/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1737182053830},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1737182053842},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1737182053843},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1737182053843},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1737182053843},{"_id":"themes/Wikitten/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1737182053844},{"_id":"themes/Wikitten/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1737182053844},{"_id":"themes/Wikitten/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1737182053849},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1737182053834},{"_id":"themes/Wikitten/source/libs/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1737182053834},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1737182053844},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1737182053844},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1737182053844},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1737182053844},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1737182053844},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1737182053845},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1737182053846},{"_id":"themes/Wikitten/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1737182053847},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1737182053848},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1737182053849},{"_id":"themes/Wikitten/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1737182053849},{"_id":"themes/Wikitten/source/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js","hash":"31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8","modified":1737182053844},{"_id":"themes/Wikitten/source/libs/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1737182053843},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1737182053842},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1737182053842},{"_id":"themes/Wikitten/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1737182053844},{"_id":"themes/Wikitten/source/images/SitePreview.png","hash":"c37c32696828492d6a8a4dfb0f84af98f5fb1306","modified":1737182053832},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1737182053835},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1737182053837},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1737182053842},{"_id":"themes/Wikitten/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1737182053840},{"_id":"source/_posts/test-blog/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1737186725394},{"_id":"source/_posts/test-blog/hello-world2.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1737186813700},{"_id":"source/_posts/blog/.git","hash":"7616fdadf44972475c798b66081e17203b0a740f","modified":1737188114627},{"_id":"source/_posts/test.md","hash":"7d984400a6f76810d7517244778769914438062f","modified":1737359602711},{"_id":"source/_posts/test2.md","hash":"a7eab81cec25df28c8387ad1878c13884d95be3b","modified":1737291069696},{"_id":"source/_posts/test/1.jpg","hash":"3842abb3e2c193198dca949ec0ef0163e4b998e7","modified":1737281151543},{"_id":"source/_posts/test2/1.jpg","hash":"3842abb3e2c193198dca949ec0ef0163e4b998e7","modified":1737286461913},{"_id":"source/_posts/2d_arry-in-c_function_arg/2D_array.md","hash":"d9ac1cdc28d562a37494a30b0658c62353830cb1","modified":1737288480563},{"_id":"source/_posts/2d_arry-in-c_function_arg/compiling.png","hash":"3842abb3e2c193198dca949ec0ef0163e4b998e7","modified":1737288480564},{"_id":"source/_posts/function_arg/2D_array.md","hash":"d9ac1cdc28d562a37494a30b0658c62353830cb1","modified":1737288480563},{"_id":"source/_posts/function_arg/compiling.png","hash":"3842abb3e2c193198dca949ec0ef0163e4b998e7","modified":1737288480564},{"_id":"source/_posts/function_arg/function_arg.md","hash":"d9ac1cdc28d562a37494a30b0658c62353830cb1","modified":1737288480563},{"_id":"source/_posts/test/1.png","hash":"798de51e896c922e3b64b38975164f76f9e57e49","modified":1737288703684},{"_id":"source/_posts/test2/1.png","hash":"798de51e896c922e3b64b38975164f76f9e57e49","modified":1737291043796},{"_id":"source/_posts/test3.md","hash":"108bb90db467eca6b128169c1e1113f73928a15c","modified":1737292157392},{"_id":"source/_posts/test3/1.png","hash":"798de51e896c922e3b64b38975164f76f9e57e49","modified":1737292045079},{"_id":"source/_posts/test4.md","hash":"290804c273f9a76b43f992d126d970f99ee7e9ac","modified":1737292267531},{"_id":"source/_posts/test4/1.png","hash":"798de51e896c922e3b64b38975164f76f9e57e49","modified":1737292238675},{"_id":"source/_posts/blog/build_webserver_on_android.md","hash":"38534e357b9b4a80305ef1f6235c0e78c085f4ce","modified":1737363429720},{"_id":"source/_posts/blog/c-function-arg.md","hash":"d0f7584a36752998a2580a145d0318a811c5573d","modified":1737363429720},{"_id":"source/_posts/blog/chrome-for-android.md","hash":"1af6af829adaf00cf206bc5009e747c57e6d26a9","modified":1737363429720},{"_id":"source/_posts/blog/cloud-server.md","hash":"9069e5a0898bc078556f2f1e639b4506b6fe241e","modified":1737363429720},{"_id":"source/_posts/blog/create-google-account.md","hash":"db753ad34ec97f382b227f9c97827050d489f807","modified":1737363429720},{"_id":"source/_posts/blog/termux-for-android.md","hash":"d1ca71b2026d7404d1000c9fd62d9a63f1a7e4a6","modified":1737366659303},{"_id":"source/_posts/blog/c-function-arg/compiling.png","hash":"3842abb3e2c193198dca949ec0ef0163e4b998e7","modified":1737294665105},{"_id":"source/_posts/blog/cloud-server/abeiyun-free_version-performance.png","hash":"fe8afea79d249d8adf624574e25bd8b276c18216","modified":1737294665115},{"_id":"source/_posts/blog/termux-for-android/login-ubuntu.png","hash":"ae59f6a7b7b3652c6b3f81b8489f4e29eac74ab6","modified":1737294665117},{"_id":"source/_posts/blog/termux-for-android/open-web-termux.png","hash":"30688598cf7badfa6836a91ed6054bc31be16d03","modified":1737294665118},{"_id":"source/_posts/blog/termux-for-android/remote-login.png","hash":"c8b8d0e21d55a913613b1e4a5ff5f57e64701b3d","modified":1737294665118},{"_id":"source/_posts/blog/chrome-for-android/apk-downloader-ui.png","hash":"e8f1174a8c3584f38cc8c3acbb094c4c05b205d2","modified":1737295597893},{"_id":"source/_posts/blog/termux-for-android/install-termux.png","hash":"50c98100a148ad61e1cd79089962206381647d4d","modified":1737294665116},{"_id":"source/_posts/blog/termux-for-android/install-ubuntu.png","hash":"dea5f30a9fd346a839f493998ab677415927d989","modified":1737294665117},{"_id":"source/_posts/blog/termux-for-android/termux.png","hash":"8ac29f72d411997fa03239ce0439272fc1be1413","modified":1737294665118},{"_id":"source/_posts/blog/chrome-for-android/click-chrome.png","hash":"12896241e823f39f4cdbd08cf0a35770758f22d8","modified":1737295597894},{"_id":"source/_posts/blog/chrome-for-android/download-chrome.png","hash":"0e9423e8c2404ed2183761028a439469a1388fc0","modified":1737295597896},{"_id":"source/_posts/blog/chrome-for-android/get-chrome-url.png","hash":"7c6db0f6a3b9f3b3ff2dacdbc5618adca906f3d5","modified":1737295597897},{"_id":"source/_posts/blog/chrome-for-android/share-url.png","hash":"26b424b4a46adc2e0758992dcfb3f8c8588a533b","modified":1737295597901},{"_id":"source/_posts/blog/cloud-server/abeiyum.png","hash":"19c0ce798038693a0f82df8ebb7f7e8e008c66e9","modified":1737294665115},{"_id":"source/_posts/blog/termux-for-android/open-termux.png","hash":"eb2f1a29cd73cc625b6ad631ba7f2a07027490ac","modified":1737294665117},{"_id":"source/_posts/blog/chrome-for-android/search-chrome.png","hash":"b27e32a6bc254e3243aded3a58caf4dcacb01143","modified":1737295597900},{"_id":"source/_posts/blog/chrome-for-android/google-play-url.png","hash":"f0125bde63141e21af68dce9c150dfb0223dbcba","modified":1737295597898},{"_id":"source/_posts/blog/rename-github-account.md","hash":"ac953fd1f8dd58e4edc6081df15e43280d7204e8","modified":1737366659303},{"_id":"source/_posts/study-notes/.git","hash":"545cc1bedf90147641383ffc9b82c0ea4282efaf","modified":1738218676146},{"_id":"source/_posts/study-notes/terminal_control.md","hash":"bc713e4eb010edff0d8d6a2dd7fdbe2c93ac3bf2","modified":1738487607518},{"_id":"source/_posts/study-notes/google_search_tips.md","hash":"e272c46ab36b35229b2f3680cf766b2c8f524113","modified":1738487607517},{"_id":"source/_posts/study-notes/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1738218676149},{"_id":"source/_posts/study-notes/markdown_usage.md","hash":"42e374d75f434ec493d855b90e711827363bbdd5","modified":1738487607517},{"_id":"source/_posts/study-notes/README.md","hash":"11d552c3ba1be603a9bbf4c559f70bbde4435e0d","modified":1738218676149},{"_id":"source/_posts/study-notes/nvim_tips.md","hash":"eca560db8ad554b206d31b94942b8db4d4e8e522","modified":1738487607518},{"_id":"source/_posts/study-notes/regular_expression.md","hash":"3d7e686417ba16fef478ca6eb4906c03190c2a11","modified":1738487607518},{"_id":"source/_posts/study-notes/database/表操作.md","hash":"e5ac6c311c664d2db59e16d90bc6490b1158690a","modified":1738218676158},{"_id":"source/_posts/study-notes/embedded/I_think.md","hash":"b6673afe1e554e9f625371787aad3b3034a10f60","modified":1738487607516},{"_id":"source/_posts/study-notes/debuge/gdb.md","hash":"5a9f474fbfc52ed604eaf669c9c043a27e7d8401","modified":1738487607516},{"_id":"source/_posts/study-notes/file_operations/awk.md","hash":"861982b527c077a99fceef99894d83f86ce528ab","modified":1738487607516},{"_id":"source/_posts/study-notes/file_operations/grep.md","hash":"f64e193a7c831eeb9568dd5228b83d49dd30349c","modified":1738487607516},{"_id":"source/_posts/study-notes/database/MySQL管理.md","hash":"4a602319e6e4c8bf3e6fba30f56a3fddaf61e8ab","modified":1738218676158},{"_id":"source/_posts/study-notes/file_operations/sed.md","hash":"a28b2386c40910746a97016e17fd4a01e8c5907a","modified":1738487607517},{"_id":"source/_posts/study-notes/version_control/git.md","hash":"267711c20cf4659e0f65b229d306268a207261e5","modified":1738487607518},{"_id":"source/_posts/study-notes/database/数据库操作.md","hash":"4810f0fb171ec904c7dc40a99b5edc2cde323aed","modified":1738218676158},{"_id":"source/_posts/study-notes/system/linux.md","hash":"a98ee1b4f5f0b66779d362532787619f6da95784","modified":1738487607518},{"_id":"source/_posts/study-notes/version_control/git_tips.md","hash":"5d52dd2c1e48bbc761ec3e96f3830599dfcc1bcb","modified":1738487607518},{"_id":"source/_posts/study-notes/database/数据操作.md","hash":"07cfa635d6dd2d09b760fef289d4eafa380d1a7d","modified":1738218676158},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0.md","hash":"375133c88a9f1b3550e3154ed393a8bb56b062c6","modified":1738487607504},{"_id":"source/_posts/study-notes/language/assembly/assembly_style.md","hash":"b7d2bdac737d56c939588a9dd57f581758fb9edb","modified":1738487607517},{"_id":"source/_posts/study-notes/network/test.txt","hash":"e7d1070fe6a5592150283f1964803cf75b6ab83d","modified":1738218676160},{"_id":"source/_posts/study-notes/language/c++/c++adbanced.md","hash":"f8a88ffe947893866664167ed07dc70cfd0f2017","modified":1738487607517},{"_id":"source/_posts/study-notes/building/build/cmake.md","hash":"27642c1f9a988fb12a866cbe3e05440c51c65aeb","modified":1738487607515},{"_id":"source/_posts/study-notes/building/build/make.md","hash":"dbfd67cd049a0ce6d69affe7791b2be4390eccdc","modified":1738487607515},{"_id":"source/_posts/study-notes/language/c++/c++basic.md","hash":"6cb474ca8b012d71c84ecd45896bbb5522042623","modified":1738487607517},{"_id":"source/_posts/study-notes/building/compiling/sdcc.md","hash":"7ace77861549321943c9a288bbba2664c120fd31","modified":1738487607516},{"_id":"source/_posts/study-notes/language/c++/c++interview_tips.md","hash":"7b61cf7beb0118e3a91685cff900e157f51d4dde","modified":1738487607517},{"_id":"source/_posts/study-notes/language/python/python进阶.md","hash":"4ff107b4113335cfa88d873f678f7b5964e00b12","modified":1738487607517},{"_id":"source/_posts/study-notes/virtual/docker/docker.md","hash":"500a82356d609c10d5c9ce07be0d30a287fe8bd7","modified":1738487607518},{"_id":"source/_posts/study-notes/virtual/SimulIDE/simulIDE.md","hash":"35eeb91ed4a52f9a22d3645265aed37c1b3a4818","modified":1738487607518},{"_id":"source/_posts/study-notes/language/shell/shell.md","hash":"5de3a5cbf4f143f926f8a70b2696e58fddc94ad3","modified":1738487607517},{"_id":"source/_posts/study-notes/language/shell/test.sh","hash":"b000013aaacc4d12cccea75ce0900d054e986c08","modified":1738218676160},{"_id":"source/_posts/study-notes/virtual/qemu/system-emulation.md","hash":"bfa9a2b5169f6cac874fd1d188f74bac5fa02bc4","modified":1738487607518},{"_id":"source/_posts/study-notes/virtual/qemu/qemu-index.md","hash":"71e4b673f4bd6f707a51b63660c1b93659dea5de","modified":1738218676163},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/复位流程.png","hash":"1b0c9714df879938c24fadca6f24e90b636f2263","modified":1738218676153},{"_id":"source/_posts/study-notes/building/build/make_project/app","hash":"bcc0797c3b37651c3ca23abed9782ec89e0a2b43","modified":1738218676158},{"_id":"source/_posts/study-notes/building/build/make_project/Makefile","hash":"1bd0f0c6d734a542d19afe4b88541710a609a906","modified":1738218676158},{"_id":"source/_posts/study-notes/language/c++/test-dir/Makefile","hash":"9c15902753f5a16b202b6b8e73b7869517af4446","modified":1738218676160},{"_id":"source/_posts/study-notes/building/build/make_project/config.mk","hash":"dd92aa2d683db6043198650f43e0250940d387a3","modified":1738218676158},{"_id":"source/_posts/study-notes/language/c++/test-dir/mian.cpp","hash":"8aad247be82a6a4842f101ecf00cf9ce11676984","modified":1738218676160},{"_id":"source/_posts/study-notes/virtual/SimulIDE/pictures/select-platform.png","hash":"d59b67d0a98d69de20775564e71812f6689b2832","modified":1738218676162},{"_id":"source/_posts/study-notes/virtual/SimulIDE/pictures/select-version.png","hash":"0b173c94b0b66881c6c1a70a78cd665b9e3c1367","modified":1738218676162},{"_id":"source/_posts/study-notes/virtual/SimulIDE/pictures/simulIDE-download.png","hash":"bbd87940e0a6e416d95b4697868ae20e15313dd7","modified":1738218676162},{"_id":"source/_posts/study-notes/building/build/make_project/src/main.cpp","hash":"cec21cdaa6a29cc8027099c7777682c970f7c1aa","modified":1738218676158},{"_id":"source/_posts/study-notes/building/build/make_project/output/main.o","hash":"b7682ddb2c751010949f3f1d3168b8b21b00fde0","modified":1738218676158},{"_id":"source/_posts/study-notes/building/build/make_project/include/hello/hello_print.h","hash":"aa25d5a6ec6a417cd4a99ddab5123a20020f52ba","modified":1738218676158},{"_id":"source/_posts/study-notes/building/build/make_project/output/hello.o","hash":"820da6f027cb42670f060ae7a86a6956c56165b5","modified":1738218676158},{"_id":"source/_posts/study-notes/building/build/make_project/modules/hello/build_moudle_hello.mk","hash":"b7038b34a24c4cf431f5cc059f944a4f17d633c0","modified":1738218676158},{"_id":"source/_posts/study-notes/building/build/make_project/modules/hello/hello_print.cpp","hash":"068b9b9caf4775532c4411327268363819ca6acf","modified":1738218676158},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/MSP和PC初始化示例.png","hash":"29e3434ba10f9fa29ba58d1bebc3f8ec5bc91364","modified":1738218676152},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/处理器复位后的工作步骤.png","hash":"e272f3cc2e82d41e3db2652c9cf3ae360ad37aac","modified":1738218676153},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/程序映像中的向量表.png","hash":"dbb39cef79f2a394751f293b16a5c10e7a7a2c4c","modified":1738218676157},{"_id":"source/_posts/study-notes/language/c++/pictures/c++进阶-异常处理-标准异常组织结构图.png","hash":"3a59222b8225b156b1cde978646b88c775521ae5","modified":1738218676160},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/Cortex-M0处理器简单框图.png","hash":"8fc51aaea227acba6babbe2586ef8ba07953c002","modified":1738218676150},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/存储映射.png","hash":"bb024aad2317b64b40e1d7da1ec37dd1f3732b54","modified":1738218676156},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/异常处理类型.png","hash":"30fe3b564e8b743e1c97948ac207d43d9e6deefb","modified":1738218676157},{"_id":"source/_posts/study-notes/virtual/SimulIDE/pictures/run.png","hash":"1350c3173144427ac06822a60b83d826ce87ebcb","modified":1738218676161},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/Cortex-M0的寄存器.png","hash":"da3044d1cd00a03ffc689ef95f7c2fc8c2f0b09d","modified":1738218676152},{"_id":"source/_posts/study-notes/architecture/arm/picture-M0/存储器映射.png","hash":"fa2007ae5933a736543821ff1ebb4bbc1c6bef41","modified":1738218676155},{"_id":"source/_posts/study-notes/virtual/qemu/pictures/options-overview.png","hash":"15dcf067cb467dcb171bdc5b2564ef35db16e80e","modified":1738218676163},{"_id":"source/_posts/study-notes/building/build/make/compiling.png","hash":"3842abb3e2c193198dca949ec0ef0163e4b998e7","modified":1738483749592},{"_id":"source/_posts/tools/.git","hash":"67b759745a1ebe8d7c508793fc28f98f389c3081","modified":1738485028832},{"_id":"source/_posts/tools/flameshot/flameshot.md","hash":"d48084f3dc9b06ce57452b42768195be04d75cff","modified":1738485028835},{"_id":"source/_posts/tools/flameshot/ubunt-add-shotkey.png","hash":"fae61c24d31a10ee6a97cd3f6d6f28bfb8e45487","modified":1738485028836},{"_id":"source/_posts/tools/flameshot/ubuntu-shotkey.png","hash":"2fd1d3f1ea4ab14b41202adeea4953124dc71adb","modified":1738485028836},{"_id":"source/_posts/tools/浏览器插件/google-chrome插件.md","hash":"2da053d1004bd41de6bf3770866a5bad4b86667f","modified":1738485028837},{"_id":"source/_posts/tools/浏览器插件/index.md","hash":"0adc0926dfa086f16b0c850f7facff7716e3c718","modified":1738485028837},{"_id":"source/_posts/tools/科学上网/index.md","hash":"b80f1781d5a7eac1930f2d2c02650504550f66dc","modified":1738485028837},{"_id":"source/_posts/tools/科学上网/客户端.md","hash":"1311edaadb3be2dd488c8f8084d9488e20aa347b","modified":1738486069324},{"_id":"source/_posts/tools/科学上网/机场.md","hash":"8e21542ace694d3c66c577a36f12a951c2af82c4","modified":1738486069325},{"_id":"source/_posts/tools/邮箱管理-outlook/outlook.md","hash":"0e04802dea2cc5ae92904e5f9d9f3095efdf3425","modified":1738485028837},{"_id":"source/_posts/tools/README.md","hash":"b98e117994288783e0a030542e040ba622d008ff","modified":1738485891993},{"_id":"source/_posts/tools/安卓读书app-阅读.md","hash":"0b6bbde8cb2a09e41c791187794ef768ca3e0eb8","modified":1738485028837},{"_id":"source/_posts/tools/浏览器插件.md","hash":"090ea844d320e0f94bb5d7c947fe67416b0ebcb1","modified":1738485891993},{"_id":"source/_posts/tools/flameshot.md","hash":"00d381269499e6db4d7a4ec5b4b97ae231b168ee","modified":1738485891993},{"_id":"source/_posts/tools/阅读.md","hash":"2e92f98e47481894befbcbd8bfe15244ae18d095","modified":1738485891993},{"_id":"source/_posts/tools/邮箱管理/outlook.md","hash":"09286df925475f51448d3f7d80c22a71e46609ee","modified":1738485891993},{"_id":"source/_posts/study-notes/database/sql/MySQL管理.md","hash":"a1075d5a13ad11f2f4d41c75501f9f93facae596","modified":1738487607516},{"_id":"source/_posts/study-notes/database/sql/数据库操作.md","hash":"3e73b3592422fc7183787879eb119cd3d6d5d750","modified":1738487607516},{"_id":"source/_posts/study-notes/database/sql/数据操作.md","hash":"70dad5dacc06bdce4a8134241bd205b73017641e","modified":1738487607516},{"_id":"source/_posts/study-notes/database/sql/表操作.md","hash":"ff95133e4d0161ecd2ab92e462b7d9843827a770","modified":1738487607516},{"_id":"source/_posts/study-notes/virtual/qemu/qemu.md","hash":"d278493b7d8e3ee3f5ebf86d16428b5fa59ddec4","modified":1738487607518},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/复位流程.png","hash":"1b0c9714df879938c24fadca6f24e90b636f2263","modified":1738487607510},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/MSP和PC初始化示例.png","hash":"29e3434ba10f9fa29ba58d1bebc3f8ec5bc91364","modified":1738487607508},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/处理器复位后的工作步骤.png","hash":"e272f3cc2e82d41e3db2652c9cf3ae360ad37aac","modified":1738487607509},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/程序映像中的向量表.png","hash":"dbb39cef79f2a394751f293b16a5c10e7a7a2c4c","modified":1738487607515},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/Cortex-M0处理器简单框图.png","hash":"8fc51aaea227acba6babbe2586ef8ba07953c002","modified":1738487607505},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/存储映射.png","hash":"bb024aad2317b64b40e1d7da1ec37dd1f3732b54","modified":1738487607514},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/异常处理类型.png","hash":"30fe3b564e8b743e1c97948ac207d43d9e6deefb","modified":1738487607514},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/Cortex-M0的寄存器.png","hash":"da3044d1cd00a03ffc689ef95f7c2fc8c2f0b09d","modified":1738487607507},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/存储器映射.png","hash":"fa2007ae5933a736543821ff1ebb4bbc1c6bef41","modified":1738487607512}],"Category":[{"name":"test-blog","_id":"cm61w4g6p0001z0jxc3v200r7"},{"name":"blog","_id":"cm61x1a4m0000u8jxc9bk7g88"},{"name":"2d_arry-in-c_function_arg","parent":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm63e2kv700017fjx0n0zaz68"},{"name":"cloud-server","parent":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm63e2kvc00047fjxgv5r9o4d"},{"name":"create-google-account","parent":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm63e2kve00067fjxc8s5e13v"},{"name":"termux-for-android","parent":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm63e2kvf00097fjxh6i3671c"},{"name":"webserver_on_termux_of_android","parent":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm63e2kvg000c7fjxfla3e0nb"},{"name":"下载chrome安卓版","parent":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm63e2kvg000f7fjxbtbu2qiq"},{"name":"2d_arry-in-c_function_arg","_id":"cm63kpetk00030qjxbx4m6wcd"},{"name":"function_arg","_id":"cm63kpws800070qjx1qb5al2q"},{"name":"study-notes","_id":"cm6nbsy88000ruvjx01km2xih"},{"name":"database","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nbsy8h000xuvjxejnt85e5"},{"name":"embedded","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nbsy8l0011uvjx3uzfga27"},{"name":"file_operations","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nbsy8n0015uvjxgv2x1uqj"},{"name":"version_control","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nbsy8o0018uvjx51qo7doq"},{"name":"building","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nbsy8r001duvjxb9pxel7b"},{"name":"language","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nbsy8r001huvjx44qz8p2d"},{"name":"virtual","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nbsy8t001muvjx7nxk48im"},{"name":"compiling","parent":"cm6nbsy8r001duvjxb9pxel7b","_id":"cm6nbsy8v001quvjx3n5k9888"},{"name":"assembly","parent":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nbsy8w001ruvjx4n2g7xo6"},{"name":"c++","parent":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nbsy8w001tuvjxc3hl1toy"},{"name":"python","parent":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nbsy8x001zuvjxhc3nby41"},{"name":"SimulIDE","parent":"cm6nbsy8t001muvjx7nxk48im","_id":"cm6nbsy8y0022uvjxdz6ad6wq"},{"name":"docker","parent":"cm6nbsy8t001muvjx7nxk48im","_id":"cm6nbsy8y0025uvjx3bql8lhf"},{"name":"qemu","parent":"cm6nbsy8t001muvjx7nxk48im","_id":"cm6nbsy8z0029uvjx2d6fbx2o"},{"name":"build","parent":"cm6nbsy8r001duvjxb9pxel7b","_id":"cm6nccyp7000b8ijx72yq4iy0"},{"name":"tools","_id":"cm6nd3le3000doxjx9l5vf4ru"},{"name":"flameshot","parent":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6nd3le7000hoxjxcjmdbnja"},{"name":"浏览器插件","parent":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6nd3leg000koxjx51u73b1d"},{"name":"科学上网","parent":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6nd3lek000moxjxfapqfyta"},{"name":"邮箱管理-outlook","parent":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6nd3let000zoxjx51lq1gg1"},{"name":"邮箱管理","parent":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6ndmajn000c80jx2s76bxxt"},{"name":"debuge","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kh000ie3jx8syic9yk"},{"name":"system","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kp000ne3jxafbmg8x5"},{"name":"sql","parent":"cm6nbsy8h000xuvjxejnt85e5","_id":"cm6nen6kv000ue3jx1dwp5ym3"},{"name":"shell","parent":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nen6l80016e3jxdu04ewgz"},{"name":"architecture","parent":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6lm002ke3jxhwiab0mx"},{"name":"arm","parent":"cm6nen6lm002ke3jxhwiab0mx","_id":"cm6nen6ln002le3jx0zna8biy"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"\n* 我的邮箱: `zhangjibing314@gmail.com`\n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n\n* 我的邮箱: `zhangjibing314@gmail.com`\n","date":"2025-01-19T09:14:56.264Z","updated":"2025-01-19T09:14:56.262Z","path":"about/index.html","_id":"cm61tf32l0000jvjx1c2w9406","comments":1,"content":"<ul>\n<li>我的邮箱: <code>zhangjibing314@gmail.com</code></li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>我的邮箱: <code>zhangjibing314@gmail.com</code></li>\n</ul>\n"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2025-01-18T06:34:34.769Z","updated":"2025-01-18T06:34:34.769Z","path":"categories/index.html","comments":1,"_id":"cm61tf32o0001jvjxhk4lalo0","content":"","excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2025-01-18T06:34:34.769Z","updated":"2025-01-18T06:34:34.769Z","path":"tags/index.html","comments":1,"_id":"cm61tf32p0002jvjxelpm0jio","content":"","excerpt":"","more":""}],"Post":[{"_content":"[toc]\n\n# 简介  \n作为一名工程师，都了解**记录**的重要性，毕竟**好记性不如烂笔头嘛**。而作为一个新手工程师，本人显然没有这个好习惯，但在工作两连后的今天(2024.12.8)，突然意识到做记录的必要性。所以，我要开启我的blog！\n# 为什么在github\n耳濡目染之中，让我觉得 \"开源\" 将比其他任何方式更能够促进技术的发展和人类的进步(说的有点儿假大空了哈哈哈)，人类的经验教训，也应该是共享的。而不是向某些平台那样，拿着**借鉴**(抄袭)了前辈们总结的东西，然后稍加包装之后打着**原创**的旗号割韭菜,想来还真是蛮讨厌的。**github**上的所有东西都是“开源”的，那么我的网络笔记优先放在这里也再好不过了(主要还是免费哈哈哈)。\n","source":"_posts/blog/README.md","raw":"[toc]\n\n# 简介  \n作为一名工程师，都了解**记录**的重要性，毕竟**好记性不如烂笔头嘛**。而作为一个新手工程师，本人显然没有这个好习惯，但在工作两连后的今天(2024.12.8)，突然意识到做记录的必要性。所以，我要开启我的blog！\n# 为什么在github\n耳濡目染之中，让我觉得 \"开源\" 将比其他任何方式更能够促进技术的发展和人类的进步(说的有点儿假大空了哈哈哈)，人类的经验教训，也应该是共享的。而不是向某些平台那样，拿着**借鉴**(抄袭)了前辈们总结的东西，然后稍加包装之后打着**原创**的旗号割韭菜,想来还真是蛮讨厌的。**github**上的所有东西都是“开源”的，那么我的网络笔记优先放在这里也再好不过了(主要还是免费哈哈哈)。\n","slug":"blog/README","published":1,"date":"2025-01-20T08:57:09.719Z","updated":"2025-01-20T08:57:09.719Z","_id":"cm61wyhxa0000kdjxagpz1rik","title":"","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>作为一名工程师，都了解<strong>记录</strong>的重要性，毕竟<strong>好记性不如烂笔头嘛</strong>。而作为一个新手工程师，本人显然没有这个好习惯，但在工作两连后的今天(2024.12.8)，突然意识到做记录的必要性。所以，我要开启我的blog！</p>\n<h1 id=\"为什么在github\"><a href=\"#为什么在github\" class=\"headerlink\" title=\"为什么在github\"></a>为什么在github</h1><p>耳濡目染之中，让我觉得 “开源” 将比其他任何方式更能够促进技术的发展和人类的进步(说的有点儿假大空了哈哈哈)，人类的经验教训，也应该是共享的。而不是向某些平台那样，拿着<strong>借鉴</strong>(抄袭)了前辈们总结的东西，然后稍加包装之后打着<strong>原创</strong>的旗号割韭菜,想来还真是蛮讨厌的。<strong>github</strong>上的所有东西都是“开源”的，那么我的网络笔记优先放在这里也再好不过了(主要还是免费哈哈哈)。</p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>作为一名工程师，都了解<strong>记录</strong>的重要性，毕竟<strong>好记性不如烂笔头嘛</strong>。而作为一个新手工程师，本人显然没有这个好习惯，但在工作两连后的今天(2024.12.8)，突然意识到做记录的必要性。所以，我要开启我的blog！</p>\n<h1 id=\"为什么在github\"><a href=\"#为什么在github\" class=\"headerlink\" title=\"为什么在github\"></a>为什么在github</h1><p>耳濡目染之中，让我觉得 “开源” 将比其他任何方式更能够促进技术的发展和人类的进步(说的有点儿假大空了哈哈哈)，人类的经验教训，也应该是共享的。而不是向某些平台那样，拿着<strong>借鉴</strong>(抄袭)了前辈们总结的东西，然后稍加包装之后打着<strong>原创</strong>的旗号割韭菜,想来还真是蛮讨厌的。<strong>github</strong>上的所有东西都是“开源”的，那么我的网络笔记优先放在这里也再好不过了(主要还是免费哈哈哈)。</p>\n"},{"title":"C语言中巧用哈希","toc":true,"_content":"\n# C语言中巧用哈希\n## 前言\n&emsp;今天在刷 **leetcode** 的时候遇到一个 [简单题目](https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/)，要求求出字符串中的最大的不重复字符的字串长度。  \n&emsp;这个题目本身不难，但是在处理如何判断某个字符是否已经出现过的问题上，就出现了问题。看了下其他语言都可以使用自带的 **哈希** 来解决这个问题，但是 c 呢，就有点难搞了。当然也有为 c 开发的第三方库，但是如何自己解决呢？——我想的是用数组，没错，就是 **整形数组**\n## 整体思路\n* 问题转化\n    * 将对符号的标记转化为对数字的标记\n    * 将对数字的标记再转化为对变量数位的标记——独热\n* 通过位操作完成对某个特定位的标记和检测\n\n## 原理\n### 问题转化过程\n* 将对**符号**的标记转变为对**数字**的标记  \n在哈希中，要求键值对之间是1对1的关系。在 ASCII 中，她的编号和符号之间也是一对一的关系。有了这样的对应关系，我们就可以把题目要求的符号的标记问题，转换为对数字的处理。\n* 将对**数字**的标记转换为对整形变量**位**的标记  \n如果想标记一个数字，是否出现过，最直接的办法是遍历，一个更快的办法是把数字转变为相应的位，让后通过 **位操作** 来处理，当然，这也是c语言的强项  \n示例：\n    1. 标记数字 8\n    ```c\n    unsigned int hash = 0; // 初始化\n    hash |= 1<<8; //将 hash 的第8为设置为1,表示8存在过了\n    ```\n    2. 判断 8 是否存在\n    ```c\n    if (hash & (unsigned int)1<<8) {\n        printf(\"8 已存在\\n\")\n    } else {\n    printf(\"8 还未被标记\\n\")\n    }\n    ```\n### 单个整型变量的局限性\n* 无符号整形(unsigned int) 只有32位，那就意味着她能标记的范围是[1~32]——**独热表示法**, 如何标记大于32的数字呢？用数组。\n### 使用无符号整型数组扩展可以标记的数字的上限\n* 单个变量中标记数字时，可以直接将数字想象称在整型变量中的数位，在数组中，则需要知道应该在数字在整个数组中的数位,那么，可以这么办——通过整除确定数组下标，通过取余知道在整型变量中数位。  \n示例：标记数字 120  \n    1. 确定数组大小:120/32 = 3....24，则整型数组大小可谓4  \n    2. 标记  \n    ```c\n    int index = 120 / 32;\n    int position = 120 % 32;\n    unsigned int hash[4] = {0};\n    hash[index] |= (unsigned int)1<<position;\n    ```\n># NOTE\n> 1. 笔者在处理的过程中使用的是无符号整形变量，当然也可使使用其他类型，诸如`char, shot, long`等，处理思路都是一样的\n## 解题代码\n### 接口\n```c\n\tint s_len; // 字符串长度\n\tint count; //最长不重复字符串的长度\n\n\t// ASSCII码总共128\n\t// 找偏移位:'x'\n\t// 'x' 字符相对 0 偏移为：'x' - 0  = 120 -0 = 120\n\t// 对应 hash[]中字节的位置： index = 120 / 32 = 3\n\t// 对应 字节中位的位置：position = 120 $ 32 = 24\n\t// 则 x 可在hash中被标记：hash[index] |= 1<<position\n\tunsigned int hash[4] = {0}; // 哈希 32 x 4 = 128\n\n\tcount = 0;\n\tfor (s_len = 0; *(s+s_len) != '\\0'; s_len++); // 获得 s 的长度\n\n\tint r_ptr = 0; // 右边界指针\n\tint index; // 字符的索引\n\tint position; // 整型变量内部偏移\n\tchar c;\n\tfor (int i = 0; i < s_len; i++) {\n\n\t\t// 滑动左边界：取消对 s[i-1]的标记\n\t\tif (i > 0) {\n\t\t\tc = s[i-1];\n\t\t\tindex = (c - 0) / 32;\n\t\t\tposition = (c - 0) % 32;\n\t\t\thash[index] &= ~((unsigned int)1<<position); //将 s[i]存于 hash中\n\t\t}\n\n\t\tfor (; r_ptr < s_len;) {\n\t\t\tc = s[r_ptr];\n\n\t\t\tindex = (c - 0) / 32;\n\t\t\tposition = (c - 0) % 32;\n\t\t\tif (hash[index] & (unsigned int)1<<position) {\n\t\t\t\tbreak; //已经被标记过\n\t\t\t} else {\n\t\t\t\thash[index] |= (unsigned int)1<<position; //将 s[r_ptr]存于 hash中\n\t\t\t\tr_ptr++; // 滑动右边界\n\t\t\t}\n\t\t}\n\t\t\n\t\tcount = count > r_ptr-i ? count : r_ptr-i;\n\t}\n\n\treturn count;\n}\n\n```\n### 测试 \n```c\n#include <stdio.h>\n\nstruct data_type {\n\tchar* s;\n\tint expected_value;\n};\nenum {\n\tcaseBASE = -1,\n\tcase1,\n\tcase2,\n\tcase3,\n\tcase4,\n\tcase5,\n\tcaseTOP\n};\nstruct data_type test_data[] = {\n\t[case1] = {\"abcabcbb\", 3},\n\t[case2] = {\"bbbbb\", 1},\n\t[case3] = {\"pwwkew\", 3},\n\t[case4] = {\"sjdgisgjisg\", 5},\n\t[case5] = {\"abcABC,.ab\", 8},\n};\n\nint main(int argc, char* argv[])\n{\n\t\n\tchar* s = NULL;\n\tint expected_value = 0;\n\tint ret = 0;\n\tfor (int i = caseBASE + 1; i < caseTOP; i++) {\n\t\ts = test_data[i].s;\n\t\texpected_value = test_data[i].expected_value;\n\n\t\tret = lengthOfLongestSubstring(s);\n\t\tprintf(\"testcase No.%d \", i);\n\t\tif (ret == expected_value) {\n\t\t\tprintf(\"pass\\n\");\n\t\t} else {\n\t\t\tprintf(\"=========================\\n\");\n\t\t\tprintf(\"fail:ret=%d\\n\", ret);\n\t\t\tprintf(\"expected_value:%d\\n\", expected_value);\n\t\t\tprintf(\"=========================\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n","source":"_posts/blog/hash_in_c.md","raw":"---\ntitle: C语言中巧用哈希\ntoc: true\n---\n\n# C语言中巧用哈希\n## 前言\n&emsp;今天在刷 **leetcode** 的时候遇到一个 [简单题目](https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/)，要求求出字符串中的最大的不重复字符的字串长度。  \n&emsp;这个题目本身不难，但是在处理如何判断某个字符是否已经出现过的问题上，就出现了问题。看了下其他语言都可以使用自带的 **哈希** 来解决这个问题，但是 c 呢，就有点难搞了。当然也有为 c 开发的第三方库，但是如何自己解决呢？——我想的是用数组，没错，就是 **整形数组**\n## 整体思路\n* 问题转化\n    * 将对符号的标记转化为对数字的标记\n    * 将对数字的标记再转化为对变量数位的标记——独热\n* 通过位操作完成对某个特定位的标记和检测\n\n## 原理\n### 问题转化过程\n* 将对**符号**的标记转变为对**数字**的标记  \n在哈希中，要求键值对之间是1对1的关系。在 ASCII 中，她的编号和符号之间也是一对一的关系。有了这样的对应关系，我们就可以把题目要求的符号的标记问题，转换为对数字的处理。\n* 将对**数字**的标记转换为对整形变量**位**的标记  \n如果想标记一个数字，是否出现过，最直接的办法是遍历，一个更快的办法是把数字转变为相应的位，让后通过 **位操作** 来处理，当然，这也是c语言的强项  \n示例：\n    1. 标记数字 8\n    ```c\n    unsigned int hash = 0; // 初始化\n    hash |= 1<<8; //将 hash 的第8为设置为1,表示8存在过了\n    ```\n    2. 判断 8 是否存在\n    ```c\n    if (hash & (unsigned int)1<<8) {\n        printf(\"8 已存在\\n\")\n    } else {\n    printf(\"8 还未被标记\\n\")\n    }\n    ```\n### 单个整型变量的局限性\n* 无符号整形(unsigned int) 只有32位，那就意味着她能标记的范围是[1~32]——**独热表示法**, 如何标记大于32的数字呢？用数组。\n### 使用无符号整型数组扩展可以标记的数字的上限\n* 单个变量中标记数字时，可以直接将数字想象称在整型变量中的数位，在数组中，则需要知道应该在数字在整个数组中的数位,那么，可以这么办——通过整除确定数组下标，通过取余知道在整型变量中数位。  \n示例：标记数字 120  \n    1. 确定数组大小:120/32 = 3....24，则整型数组大小可谓4  \n    2. 标记  \n    ```c\n    int index = 120 / 32;\n    int position = 120 % 32;\n    unsigned int hash[4] = {0};\n    hash[index] |= (unsigned int)1<<position;\n    ```\n># NOTE\n> 1. 笔者在处理的过程中使用的是无符号整形变量，当然也可使使用其他类型，诸如`char, shot, long`等，处理思路都是一样的\n## 解题代码\n### 接口\n```c\n\tint s_len; // 字符串长度\n\tint count; //最长不重复字符串的长度\n\n\t// ASSCII码总共128\n\t// 找偏移位:'x'\n\t// 'x' 字符相对 0 偏移为：'x' - 0  = 120 -0 = 120\n\t// 对应 hash[]中字节的位置： index = 120 / 32 = 3\n\t// 对应 字节中位的位置：position = 120 $ 32 = 24\n\t// 则 x 可在hash中被标记：hash[index] |= 1<<position\n\tunsigned int hash[4] = {0}; // 哈希 32 x 4 = 128\n\n\tcount = 0;\n\tfor (s_len = 0; *(s+s_len) != '\\0'; s_len++); // 获得 s 的长度\n\n\tint r_ptr = 0; // 右边界指针\n\tint index; // 字符的索引\n\tint position; // 整型变量内部偏移\n\tchar c;\n\tfor (int i = 0; i < s_len; i++) {\n\n\t\t// 滑动左边界：取消对 s[i-1]的标记\n\t\tif (i > 0) {\n\t\t\tc = s[i-1];\n\t\t\tindex = (c - 0) / 32;\n\t\t\tposition = (c - 0) % 32;\n\t\t\thash[index] &= ~((unsigned int)1<<position); //将 s[i]存于 hash中\n\t\t}\n\n\t\tfor (; r_ptr < s_len;) {\n\t\t\tc = s[r_ptr];\n\n\t\t\tindex = (c - 0) / 32;\n\t\t\tposition = (c - 0) % 32;\n\t\t\tif (hash[index] & (unsigned int)1<<position) {\n\t\t\t\tbreak; //已经被标记过\n\t\t\t} else {\n\t\t\t\thash[index] |= (unsigned int)1<<position; //将 s[r_ptr]存于 hash中\n\t\t\t\tr_ptr++; // 滑动右边界\n\t\t\t}\n\t\t}\n\t\t\n\t\tcount = count > r_ptr-i ? count : r_ptr-i;\n\t}\n\n\treturn count;\n}\n\n```\n### 测试 \n```c\n#include <stdio.h>\n\nstruct data_type {\n\tchar* s;\n\tint expected_value;\n};\nenum {\n\tcaseBASE = -1,\n\tcase1,\n\tcase2,\n\tcase3,\n\tcase4,\n\tcase5,\n\tcaseTOP\n};\nstruct data_type test_data[] = {\n\t[case1] = {\"abcabcbb\", 3},\n\t[case2] = {\"bbbbb\", 1},\n\t[case3] = {\"pwwkew\", 3},\n\t[case4] = {\"sjdgisgjisg\", 5},\n\t[case5] = {\"abcABC,.ab\", 8},\n};\n\nint main(int argc, char* argv[])\n{\n\t\n\tchar* s = NULL;\n\tint expected_value = 0;\n\tint ret = 0;\n\tfor (int i = caseBASE + 1; i < caseTOP; i++) {\n\t\ts = test_data[i].s;\n\t\texpected_value = test_data[i].expected_value;\n\n\t\tret = lengthOfLongestSubstring(s);\n\t\tprintf(\"testcase No.%d \", i);\n\t\tif (ret == expected_value) {\n\t\t\tprintf(\"pass\\n\");\n\t\t} else {\n\t\t\tprintf(\"=========================\\n\");\n\t\t\tprintf(\"fail:ret=%d\\n\", ret);\n\t\t\tprintf(\"expected_value:%d\\n\", expected_value);\n\t\t\tprintf(\"=========================\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```\n","slug":"blog/hash_in_c","published":1,"date":"2025-01-20T08:57:09.720Z","updated":"2025-01-20T08:57:09.720Z","_id":"cm61wyhxe0001kdjx0tbn2gfm","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"C语言中巧用哈希\"><a href=\"#C语言中巧用哈希\" class=\"headerlink\" title=\"C语言中巧用哈希\"></a>C语言中巧用哈希</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;今天在刷 <strong>leetcode</strong> 的时候遇到一个 <a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\">简单题目</a>，要求求出字符串中的最大的不重复字符的字串长度。<br>&emsp;这个题目本身不难，但是在处理如何判断某个字符是否已经出现过的问题上，就出现了问题。看了下其他语言都可以使用自带的 <strong>哈希</strong> 来解决这个问题，但是 c 呢，就有点难搞了。当然也有为 c 开发的第三方库，但是如何自己解决呢？——我想的是用数组，没错，就是 <strong>整形数组</strong></p>\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><ul>\n<li>问题转化<ul>\n<li>将对符号的标记转化为对数字的标记</li>\n<li>将对数字的标记再转化为对变量数位的标记——独热</li>\n</ul>\n</li>\n<li>通过位操作完成对某个特定位的标记和检测</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"问题转化过程\"><a href=\"#问题转化过程\" class=\"headerlink\" title=\"问题转化过程\"></a>问题转化过程</h3><ul>\n<li>将对<strong>符号</strong>的标记转变为对<strong>数字</strong>的标记<br>在哈希中，要求键值对之间是1对1的关系。在 ASCII 中，她的编号和符号之间也是一对一的关系。有了这样的对应关系，我们就可以把题目要求的符号的标记问题，转换为对数字的处理。</li>\n<li>将对<strong>数字</strong>的标记转换为对整形变量<strong>位</strong>的标记<br>如果想标记一个数字，是否出现过，最直接的办法是遍历，一个更快的办法是把数字转变为相应的位，让后通过 <strong>位操作</strong> 来处理，当然，这也是c语言的强项<br>示例：<ol>\n<li>标记数字 8</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">hash |= <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>; <span class=\"comment\">//将 hash 的第8为设置为1,表示8存在过了</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>判断 8 是否存在</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (hash &amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;8 已存在\\n&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;8 还未被标记\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"单个整型变量的局限性\"><a href=\"#单个整型变量的局限性\" class=\"headerlink\" title=\"单个整型变量的局限性\"></a>单个整型变量的局限性</h3><ul>\n<li>无符号整形(unsigned int) 只有32位，那就意味着她能标记的范围是[1~32]——<strong>独热表示法</strong>, 如何标记大于32的数字呢？用数组。</li>\n</ul>\n<h3 id=\"使用无符号整型数组扩展可以标记的数字的上限\"><a href=\"#使用无符号整型数组扩展可以标记的数字的上限\" class=\"headerlink\" title=\"使用无符号整型数组扩展可以标记的数字的上限\"></a>使用无符号整型数组扩展可以标记的数字的上限</h3><ul>\n<li>单个变量中标记数字时，可以直接将数字想象称在整型变量中的数位，在数组中，则需要知道应该在数字在整个数组中的数位,那么，可以这么办——通过整除确定数组下标，通过取余知道在整型变量中数位。<br>示例：标记数字 120  <ol>\n<li>确定数组大小:120&#x2F;32 &#x3D; 3….24，则整型数组大小可谓4  </li>\n<li>标记</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> index = <span class=\"number\">120</span> / <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> position = <span class=\"number\">120</span> % <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">hash[index] |= (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><ol>\n<li>笔者在处理的过程中使用的是无符号整形变量，当然也可使使用其他类型，诸如<code>char, shot, long</code>等，处理思路都是一样的</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"type\">int</span> s_len; <span class=\"comment\">// 字符串长度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count; <span class=\"comment\">//最长不重复字符串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ASSCII码总共128</span></span><br><span class=\"line\">\t<span class=\"comment\">// 找偏移位:&#x27;x&#x27;</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#x27;x&#x27; 字符相对 0 偏移为：&#x27;x&#x27; - 0  = 120 -0 = 120</span></span><br><span class=\"line\">\t<span class=\"comment\">// 对应 hash[]中字节的位置： index = 120 / 32 = 3</span></span><br><span class=\"line\">\t<span class=\"comment\">// 对应 字节中位的位置：position = 120 $ 32 = 24</span></span><br><span class=\"line\">\t<span class=\"comment\">// 则 x 可在hash中被标记：hash[index] |= 1&lt;&lt;position</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 哈希 32 x 4 = 128</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (s_len = <span class=\"number\">0</span>; *(s+s_len) != <span class=\"string\">&#x27;\\0&#x27;</span>; s_len++); <span class=\"comment\">// 获得 s 的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> r_ptr = <span class=\"number\">0</span>; <span class=\"comment\">// 右边界指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> index; <span class=\"comment\">// 字符的索引</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> position; <span class=\"comment\">// 整型变量内部偏移</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s_len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 滑动左边界：取消对 s[i-1]的标记</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tc = s[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t\tindex = (c - <span class=\"number\">0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\tposition = (c - <span class=\"number\">0</span>) % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\thash[index] &amp;= ~((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position); <span class=\"comment\">//将 s[i]存于 hash中</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; r_ptr &lt; s_len;) &#123;</span><br><span class=\"line\">\t\t\tc = s[r_ptr];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tindex = (c - <span class=\"number\">0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\tposition = (c - <span class=\"number\">0</span>) % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hash[index] &amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//已经被标记过</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\thash[index] |= (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position; <span class=\"comment\">//将 s[r_ptr]存于 hash中</span></span><br><span class=\"line\">\t\t\t\tr_ptr++; <span class=\"comment\">// 滑动右边界</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcount = count &gt; r_ptr-i ? count : r_ptr-i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data_type</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* s;</span><br><span class=\"line\">\t<span class=\"type\">int</span> expected_value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span></span><br><span class=\"line\">\tcaseBASE = <span class=\"number\">-1</span>,</span><br><span class=\"line\">\tcase1,</span><br><span class=\"line\">\tcase2,</span><br><span class=\"line\">\tcase3,</span><br><span class=\"line\">\tcase4,</span><br><span class=\"line\">\tcase5,</span><br><span class=\"line\">\tcaseTOP</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data_type</span> <span class=\"title\">test_data</span>[] =</span> &#123;</span><br><span class=\"line\">\t[case1] = &#123;<span class=\"string\">&quot;abcabcbb&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t[case2] = &#123;<span class=\"string\">&quot;bbbbb&quot;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t[case3] = &#123;<span class=\"string\">&quot;pwwkew&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t[case4] = &#123;<span class=\"string\">&quot;sjdgisgjisg&quot;</span>, <span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">\t[case5] = &#123;<span class=\"string\">&quot;abcABC,.ab&quot;</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* s = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> expected_value = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = caseBASE + <span class=\"number\">1</span>; i &lt; caseTOP; i++) &#123;</span><br><span class=\"line\">\t\ts = test_data[i].s;</span><br><span class=\"line\">\t\texpected_value = test_data[i].expected_value;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tret = lengthOfLongestSubstring(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;testcase No.%d &quot;</span>, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret == expected_value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pass\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;=========================\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fail:ret=%d\\n&quot;</span>, ret);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;expected_value:%d\\n&quot;</span>, expected_value);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;=========================\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"C语言中巧用哈希\"><a href=\"#C语言中巧用哈希\" class=\"headerlink\" title=\"C语言中巧用哈希\"></a>C语言中巧用哈希</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;今天在刷 <strong>leetcode</strong> 的时候遇到一个 <a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/\">简单题目</a>，要求求出字符串中的最大的不重复字符的字串长度。<br>&emsp;这个题目本身不难，但是在处理如何判断某个字符是否已经出现过的问题上，就出现了问题。看了下其他语言都可以使用自带的 <strong>哈希</strong> 来解决这个问题，但是 c 呢，就有点难搞了。当然也有为 c 开发的第三方库，但是如何自己解决呢？——我想的是用数组，没错，就是 <strong>整形数组</strong></p>\n<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><ul>\n<li>问题转化<ul>\n<li>将对符号的标记转化为对数字的标记</li>\n<li>将对数字的标记再转化为对变量数位的标记——独热</li>\n</ul>\n</li>\n<li>通过位操作完成对某个特定位的标记和检测</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"问题转化过程\"><a href=\"#问题转化过程\" class=\"headerlink\" title=\"问题转化过程\"></a>问题转化过程</h3><ul>\n<li>将对<strong>符号</strong>的标记转变为对<strong>数字</strong>的标记<br>在哈希中，要求键值对之间是1对1的关系。在 ASCII 中，她的编号和符号之间也是一对一的关系。有了这样的对应关系，我们就可以把题目要求的符号的标记问题，转换为对数字的处理。</li>\n<li>将对<strong>数字</strong>的标记转换为对整形变量<strong>位</strong>的标记<br>如果想标记一个数字，是否出现过，最直接的办法是遍历，一个更快的办法是把数字转变为相应的位，让后通过 <strong>位操作</strong> 来处理，当然，这也是c语言的强项<br>示例：<ol>\n<li>标记数字 8</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">hash |= <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>; <span class=\"comment\">//将 hash 的第8为设置为1,表示8存在过了</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>判断 8 是否存在</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (hash &amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;8 已存在\\n&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;8 还未被标记\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"单个整型变量的局限性\"><a href=\"#单个整型变量的局限性\" class=\"headerlink\" title=\"单个整型变量的局限性\"></a>单个整型变量的局限性</h3><ul>\n<li>无符号整形(unsigned int) 只有32位，那就意味着她能标记的范围是[1~32]——<strong>独热表示法</strong>, 如何标记大于32的数字呢？用数组。</li>\n</ul>\n<h3 id=\"使用无符号整型数组扩展可以标记的数字的上限\"><a href=\"#使用无符号整型数组扩展可以标记的数字的上限\" class=\"headerlink\" title=\"使用无符号整型数组扩展可以标记的数字的上限\"></a>使用无符号整型数组扩展可以标记的数字的上限</h3><ul>\n<li>单个变量中标记数字时，可以直接将数字想象称在整型变量中的数位，在数组中，则需要知道应该在数字在整个数组中的数位,那么，可以这么办——通过整除确定数组下标，通过取余知道在整型变量中数位。<br>示例：标记数字 120  <ol>\n<li>确定数组大小:120&#x2F;32 &#x3D; 3….24，则整型数组大小可谓4  </li>\n<li>标记</li>\n</ol>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> index = <span class=\"number\">120</span> / <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> position = <span class=\"number\">120</span> % <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">hash[index] |= (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><ol>\n<li>笔者在处理的过程中使用的是无符号整形变量，当然也可使使用其他类型，诸如<code>char, shot, long</code>等，处理思路都是一样的</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"解题代码\"><a href=\"#解题代码\" class=\"headerlink\" title=\"解题代码\"></a>解题代码</h2><h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"type\">int</span> s_len; <span class=\"comment\">// 字符串长度</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count; <span class=\"comment\">//最长不重复字符串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ASSCII码总共128</span></span><br><span class=\"line\">\t<span class=\"comment\">// 找偏移位:&#x27;x&#x27;</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#x27;x&#x27; 字符相对 0 偏移为：&#x27;x&#x27; - 0  = 120 -0 = 120</span></span><br><span class=\"line\">\t<span class=\"comment\">// 对应 hash[]中字节的位置： index = 120 / 32 = 3</span></span><br><span class=\"line\">\t<span class=\"comment\">// 对应 字节中位的位置：position = 120 $ 32 = 24</span></span><br><span class=\"line\">\t<span class=\"comment\">// 则 x 可在hash中被标记：hash[index] |= 1&lt;&lt;position</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">// 哈希 32 x 4 = 128</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (s_len = <span class=\"number\">0</span>; *(s+s_len) != <span class=\"string\">&#x27;\\0&#x27;</span>; s_len++); <span class=\"comment\">// 获得 s 的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> r_ptr = <span class=\"number\">0</span>; <span class=\"comment\">// 右边界指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> index; <span class=\"comment\">// 字符的索引</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> position; <span class=\"comment\">// 整型变量内部偏移</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> c;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s_len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 滑动左边界：取消对 s[i-1]的标记</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tc = s[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t\tindex = (c - <span class=\"number\">0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\tposition = (c - <span class=\"number\">0</span>) % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\thash[index] &amp;= ~((<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position); <span class=\"comment\">//将 s[i]存于 hash中</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (; r_ptr &lt; s_len;) &#123;</span><br><span class=\"line\">\t\t\tc = s[r_ptr];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tindex = (c - <span class=\"number\">0</span>) / <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\tposition = (c - <span class=\"number\">0</span>) % <span class=\"number\">32</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hash[index] &amp; (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//已经被标记过</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\thash[index] |= (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)<span class=\"number\">1</span>&lt;&lt;position; <span class=\"comment\">//将 s[r_ptr]存于 hash中</span></span><br><span class=\"line\">\t\t\t\tr_ptr++; <span class=\"comment\">// 滑动右边界</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcount = count &gt; r_ptr-i ? count : r_ptr-i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data_type</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>* s;</span><br><span class=\"line\">\t<span class=\"type\">int</span> expected_value;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span></span><br><span class=\"line\">\tcaseBASE = <span class=\"number\">-1</span>,</span><br><span class=\"line\">\tcase1,</span><br><span class=\"line\">\tcase2,</span><br><span class=\"line\">\tcase3,</span><br><span class=\"line\">\tcase4,</span><br><span class=\"line\">\tcase5,</span><br><span class=\"line\">\tcaseTOP</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">data_type</span> <span class=\"title\">test_data</span>[] =</span> &#123;</span><br><span class=\"line\">\t[case1] = &#123;<span class=\"string\">&quot;abcabcbb&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t[case2] = &#123;<span class=\"string\">&quot;bbbbb&quot;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t[case3] = &#123;<span class=\"string\">&quot;pwwkew&quot;</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">\t[case4] = &#123;<span class=\"string\">&quot;sjdgisgjisg&quot;</span>, <span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">\t[case5] = &#123;<span class=\"string\">&quot;abcABC,.ab&quot;</span>, <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">char</span>* s = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> expected_value = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = caseBASE + <span class=\"number\">1</span>; i &lt; caseTOP; i++) &#123;</span><br><span class=\"line\">\t\ts = test_data[i].s;</span><br><span class=\"line\">\t\texpected_value = test_data[i].expected_value;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tret = lengthOfLongestSubstring(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;testcase No.%d &quot;</span>, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret == expected_value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;pass\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;=========================\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fail:ret=%d\\n&quot;</span>, ret);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;expected_value:%d\\n&quot;</span>, expected_value);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;=========================\\n&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ubuntu 中使用中文输入法","toc":true,"_content":"\n# ubuntu中使用中文输入法\n# 前言\n选择那个输入法，对笔者来说需要考虑以下几点：  \n1. 安装简易程度：安装配置越简单越好;\n2. 易用程度：对笔者来说也就是联想词是否更符合日常使用习惯了;\n3. 对环境的依赖：就是喜欢哪个语言框架以及系统对该框架的支持如何。\n# 抉择\n## ibus 下的中文输入法\nibus下面的输入法的安装、配置都比较简单。但是令笔者不如意的一点是联想词不大符合个人用词习惯，需要 <tab> 好几下或者换页查看好几下才能找到想用的词，尤其是在连续输入好几个字的拼音时。\n## fcitx 下的中文输入法\n### [搜狗输入法](https://shurufa.sogou.com/linux)\n1. 安装  \n安装时使用搜狗官方提供的[安装文档](https://shurufa.sogou.com/linux/guide)进行即可。\n2. 雷点  \n要想在安装并配置结束之后正常使用，就需要放弃使用最新的wayland而去使用x11。因为在wayland中切换至搜狗输入法时会出现屏幕闪烁的情况，这时是无法使用输入法的，就很难受。针对这一点，笔者没有找到好的解决办法。\n### google input\n选择使用 **谷歌输入法** 的原因简单且直接:我想使用 wayland 而不是 x11。这一点就让我需要找一个搜狗输入法的平替软件，google了一下，看到了 google input，安装配置都很简单，目前用着还不错（不好用了在看，嘻嘻）。\n1. 安装\n```shell\nsudo apt intall fcitx fcitx-googlepinyin\n```\n2. 配置\n    * 打开 设置 》 系统 》 区域与语言 》 管理安装的语言:  \n        * 将键盘输入法系统改为”fcitx4“\n        * 点击“应用到整个系统”\n    * 重启系统即可食用。\n","source":"_posts/blog/input_method-on-ubuntu.md","raw":"---\ntitle: ubuntu 中使用中文输入法\ntoc: true\n---\n\n# ubuntu中使用中文输入法\n# 前言\n选择那个输入法，对笔者来说需要考虑以下几点：  \n1. 安装简易程度：安装配置越简单越好;\n2. 易用程度：对笔者来说也就是联想词是否更符合日常使用习惯了;\n3. 对环境的依赖：就是喜欢哪个语言框架以及系统对该框架的支持如何。\n# 抉择\n## ibus 下的中文输入法\nibus下面的输入法的安装、配置都比较简单。但是令笔者不如意的一点是联想词不大符合个人用词习惯，需要 <tab> 好几下或者换页查看好几下才能找到想用的词，尤其是在连续输入好几个字的拼音时。\n## fcitx 下的中文输入法\n### [搜狗输入法](https://shurufa.sogou.com/linux)\n1. 安装  \n安装时使用搜狗官方提供的[安装文档](https://shurufa.sogou.com/linux/guide)进行即可。\n2. 雷点  \n要想在安装并配置结束之后正常使用，就需要放弃使用最新的wayland而去使用x11。因为在wayland中切换至搜狗输入法时会出现屏幕闪烁的情况，这时是无法使用输入法的，就很难受。针对这一点，笔者没有找到好的解决办法。\n### google input\n选择使用 **谷歌输入法** 的原因简单且直接:我想使用 wayland 而不是 x11。这一点就让我需要找一个搜狗输入法的平替软件，google了一下，看到了 google input，安装配置都很简单，目前用着还不错（不好用了在看，嘻嘻）。\n1. 安装\n```shell\nsudo apt intall fcitx fcitx-googlepinyin\n```\n2. 配置\n    * 打开 设置 》 系统 》 区域与语言 》 管理安装的语言:  \n        * 将键盘输入法系统改为”fcitx4“\n        * 点击“应用到整个系统”\n    * 重启系统即可食用。\n","slug":"blog/input_method-on-ubuntu","published":1,"date":"2025-01-20T08:57:09.720Z","updated":"2025-01-20T08:57:09.720Z","_id":"cm61wyhxg0002kdjxdz6jgi7k","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"ubuntu中使用中文输入法\"><a href=\"#ubuntu中使用中文输入法\" class=\"headerlink\" title=\"ubuntu中使用中文输入法\"></a>ubuntu中使用中文输入法</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>选择那个输入法，对笔者来说需要考虑以下几点：  </p>\n<ol>\n<li>安装简易程度：安装配置越简单越好;</li>\n<li>易用程度：对笔者来说也就是联想词是否更符合日常使用习惯了;</li>\n<li>对环境的依赖：就是喜欢哪个语言框架以及系统对该框架的支持如何。</li>\n</ol>\n<h1 id=\"抉择\"><a href=\"#抉择\" class=\"headerlink\" title=\"抉择\"></a>抉择</h1><h2 id=\"ibus-下的中文输入法\"><a href=\"#ibus-下的中文输入法\" class=\"headerlink\" title=\"ibus 下的中文输入法\"></a>ibus 下的中文输入法</h2><p>ibus下面的输入法的安装、配置都比较简单。但是令笔者不如意的一点是联想词不大符合个人用词习惯，需要 <tab> 好几下或者换页查看好几下才能找到想用的词，尤其是在连续输入好几个字的拼音时。</p>\n<h2 id=\"fcitx-下的中文输入法\"><a href=\"#fcitx-下的中文输入法\" class=\"headerlink\" title=\"fcitx 下的中文输入法\"></a>fcitx 下的中文输入法</h2><h3 id=\"搜狗输入法\"><a href=\"#搜狗输入法\" class=\"headerlink\" title=\"搜狗输入法\"></a><a href=\"https://shurufa.sogou.com/linux\">搜狗输入法</a></h3><ol>\n<li>安装<br>安装时使用搜狗官方提供的<a href=\"https://shurufa.sogou.com/linux/guide\">安装文档</a>进行即可。</li>\n<li>雷点<br>要想在安装并配置结束之后正常使用，就需要放弃使用最新的wayland而去使用x11。因为在wayland中切换至搜狗输入法时会出现屏幕闪烁的情况，这时是无法使用输入法的，就很难受。针对这一点，笔者没有找到好的解决办法。</li>\n</ol>\n<h3 id=\"google-input\"><a href=\"#google-input\" class=\"headerlink\" title=\"google input\"></a>google input</h3><p>选择使用 <strong>谷歌输入法</strong> 的原因简单且直接:我想使用 wayland 而不是 x11。这一点就让我需要找一个搜狗输入法的平替软件，google了一下，看到了 google input，安装配置都很简单，目前用着还不错（不好用了在看，嘻嘻）。</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt intall fcitx fcitx-googlepinyin</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置<ul>\n<li>打开 设置 》 系统 》 区域与语言 》 管理安装的语言:  <ul>\n<li>将键盘输入法系统改为”fcitx4“</li>\n<li>点击“应用到整个系统”</li>\n</ul>\n</li>\n<li>重启系统即可食用。</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"ubuntu中使用中文输入法\"><a href=\"#ubuntu中使用中文输入法\" class=\"headerlink\" title=\"ubuntu中使用中文输入法\"></a>ubuntu中使用中文输入法</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>选择那个输入法，对笔者来说需要考虑以下几点：  </p>\n<ol>\n<li>安装简易程度：安装配置越简单越好;</li>\n<li>易用程度：对笔者来说也就是联想词是否更符合日常使用习惯了;</li>\n<li>对环境的依赖：就是喜欢哪个语言框架以及系统对该框架的支持如何。</li>\n</ol>\n<h1 id=\"抉择\"><a href=\"#抉择\" class=\"headerlink\" title=\"抉择\"></a>抉择</h1><h2 id=\"ibus-下的中文输入法\"><a href=\"#ibus-下的中文输入法\" class=\"headerlink\" title=\"ibus 下的中文输入法\"></a>ibus 下的中文输入法</h2><p>ibus下面的输入法的安装、配置都比较简单。但是令笔者不如意的一点是联想词不大符合个人用词习惯，需要 <tab> 好几下或者换页查看好几下才能找到想用的词，尤其是在连续输入好几个字的拼音时。</p>\n<h2 id=\"fcitx-下的中文输入法\"><a href=\"#fcitx-下的中文输入法\" class=\"headerlink\" title=\"fcitx 下的中文输入法\"></a>fcitx 下的中文输入法</h2><h3 id=\"搜狗输入法\"><a href=\"#搜狗输入法\" class=\"headerlink\" title=\"搜狗输入法\"></a><a href=\"https://shurufa.sogou.com/linux\">搜狗输入法</a></h3><ol>\n<li>安装<br>安装时使用搜狗官方提供的<a href=\"https://shurufa.sogou.com/linux/guide\">安装文档</a>进行即可。</li>\n<li>雷点<br>要想在安装并配置结束之后正常使用，就需要放弃使用最新的wayland而去使用x11。因为在wayland中切换至搜狗输入法时会出现屏幕闪烁的情况，这时是无法使用输入法的，就很难受。针对这一点，笔者没有找到好的解决办法。</li>\n</ol>\n<h3 id=\"google-input\"><a href=\"#google-input\" class=\"headerlink\" title=\"google input\"></a>google input</h3><p>选择使用 <strong>谷歌输入法</strong> 的原因简单且直接:我想使用 wayland 而不是 x11。这一点就让我需要找一个搜狗输入法的平替软件，google了一下，看到了 google input，安装配置都很简单，目前用着还不错（不好用了在看，嘻嘻）。</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt intall fcitx fcitx-googlepinyin</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置<ul>\n<li>打开 设置 》 系统 》 区域与语言 》 管理安装的语言:  <ul>\n<li>将键盘输入法系统改为”fcitx4“</li>\n<li>点击“应用到整个系统”</li>\n</ul>\n</li>\n<li>重启系统即可食用。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"在安卓机上基于termux搭建web服务器","toc":true,"_content":"[toc]\n\n# 在安卓机上基于termux搭建web服务器\n# 简介\n换了新手机后，旧手机闲置着总觉得浪费，所以就想着折腾一下，搭建一个简单的web服务器玩玩。\n\n# 搭建详情\n## 安装应用\n* 需要安装的应用：\n    * apache: 服务器软件,用来搭建本地web服务\n    * termux-services: 管理termux服务\n    * cpolar: 内网穿透,是本地服务公网也可以访问\n* 安装apache,termux-services\n```shell\npkg install apache2 termux-services\n```\n* 安装 cpolar\n```shell\n# 创建必要的文件夹：\nmkdir -p $PREFIX/etc/apt/sources.list.d\n\n# 添加cpolar下载源\necho \"deb [trusted=yes] http://termux.cpolar.com termux extras\" >> $PREFIX/etc/apt/sources.list.d/cpolar.list\n\n# 更新仓库\npkg update\n\n# 安装\npkg install cpolar\n```\n安装完成后重启 termux\n## 注册 cpolar 账户\n* 注册  \n登陆[cpolar官网](https://www.cpolar.com/)，点击 **免费注册**，填写必要的信息进行注册(注册时需要的信息可以随便填写，但是，如果填写邮箱时如果填写的是不存在的邮箱，虽然可以注册成功，但后期将无法更换密码，因为她需要邮箱进行验证)\n* 获取 authtoken  \n登陆成功后便可以获取 **authtoken**(cpolar软件配置内网穿透需要这个)，点击 **验证** 即可找到 authtoken。\n## 配置&启动\n* 配置\n    * apache2  \n        * 打开：$PREFIX/etc/apache2/httpd.conf\n        * 取消 `ServerName www.example.com` 的注释\n        * 将 `www.example.com` 更改为本地地址和自己向要配置的端口号，例如:`127.0.0.1:8080`\n    * cpolar\n        * 打开：$PREFIX/etc/cpolar/cpolar.yml\n        * 添加 `authtoken: <your authtoken>`\n* 启动服务\n```shell\n# 启动 apache2\napachectl start\n\n# 启动 cpolar\nsv up cpolar\n```\n* cpolar 穿透 apache 本地服务\n```shell\n# 这里的ip和端口就是 apache2 配置文件中配置的ip和端口号\ncpolar http 127.0.0.1:8080\n```\n* 查看本地web服务映射的URL  \n登陆cpolar 网站，点击 **状态** 可以查看 **在线隧道** 信息，其中包括本地服务映射的 **URL** ，复制该 URL 并在浏览器中打开就可以访问 web 服务了。\n","source":"_posts/blog/build_webserver_on_android.md","raw":"---\ntitle: 在安卓机上基于termux搭建web服务器\ntoc: true\n---\n[toc]\n\n# 在安卓机上基于termux搭建web服务器\n# 简介\n换了新手机后，旧手机闲置着总觉得浪费，所以就想着折腾一下，搭建一个简单的web服务器玩玩。\n\n# 搭建详情\n## 安装应用\n* 需要安装的应用：\n    * apache: 服务器软件,用来搭建本地web服务\n    * termux-services: 管理termux服务\n    * cpolar: 内网穿透,是本地服务公网也可以访问\n* 安装apache,termux-services\n```shell\npkg install apache2 termux-services\n```\n* 安装 cpolar\n```shell\n# 创建必要的文件夹：\nmkdir -p $PREFIX/etc/apt/sources.list.d\n\n# 添加cpolar下载源\necho \"deb [trusted=yes] http://termux.cpolar.com termux extras\" >> $PREFIX/etc/apt/sources.list.d/cpolar.list\n\n# 更新仓库\npkg update\n\n# 安装\npkg install cpolar\n```\n安装完成后重启 termux\n## 注册 cpolar 账户\n* 注册  \n登陆[cpolar官网](https://www.cpolar.com/)，点击 **免费注册**，填写必要的信息进行注册(注册时需要的信息可以随便填写，但是，如果填写邮箱时如果填写的是不存在的邮箱，虽然可以注册成功，但后期将无法更换密码，因为她需要邮箱进行验证)\n* 获取 authtoken  \n登陆成功后便可以获取 **authtoken**(cpolar软件配置内网穿透需要这个)，点击 **验证** 即可找到 authtoken。\n## 配置&启动\n* 配置\n    * apache2  \n        * 打开：$PREFIX/etc/apache2/httpd.conf\n        * 取消 `ServerName www.example.com` 的注释\n        * 将 `www.example.com` 更改为本地地址和自己向要配置的端口号，例如:`127.0.0.1:8080`\n    * cpolar\n        * 打开：$PREFIX/etc/cpolar/cpolar.yml\n        * 添加 `authtoken: <your authtoken>`\n* 启动服务\n```shell\n# 启动 apache2\napachectl start\n\n# 启动 cpolar\nsv up cpolar\n```\n* cpolar 穿透 apache 本地服务\n```shell\n# 这里的ip和端口就是 apache2 配置文件中配置的ip和端口号\ncpolar http 127.0.0.1:8080\n```\n* 查看本地web服务映射的URL  \n登陆cpolar 网站，点击 **状态** 可以查看 **在线隧道** 信息，其中包括本地服务映射的 **URL** ，复制该 URL 并在浏览器中打开就可以访问 web 服务了。\n","slug":"blog/build_webserver_on_android","published":1,"date":"2025-01-20T08:57:09.719Z","updated":"2025-01-20T08:57:09.720Z","_id":"cm64sykf50000vvjx4jspazdy","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"在安卓机上基于termux搭建web服务器\"><a href=\"#在安卓机上基于termux搭建web服务器\" class=\"headerlink\" title=\"在安卓机上基于termux搭建web服务器\"></a>在安卓机上基于termux搭建web服务器</h1><h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>换了新手机后，旧手机闲置着总觉得浪费，所以就想着折腾一下，搭建一个简单的web服务器玩玩。</p>\n<h1 id=\"搭建详情\"><a href=\"#搭建详情\" class=\"headerlink\" title=\"搭建详情\"></a>搭建详情</h1><h2 id=\"安装应用\"><a href=\"#安装应用\" class=\"headerlink\" title=\"安装应用\"></a>安装应用</h2><ul>\n<li>需要安装的应用：<ul>\n<li>apache: 服务器软件,用来搭建本地web服务</li>\n<li>termux-services: 管理termux服务</li>\n<li>cpolar: 内网穿透,是本地服务公网也可以访问</li>\n</ul>\n</li>\n<li>安装apache,termux-services</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install apache2 termux-services</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装 cpolar</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建必要的文件夹：</span></span><br><span class=\"line\">mkdir -p $PREFIX/etc/apt/sources.list.d</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加cpolar下载源</span></span><br><span class=\"line\">echo &quot;deb [trusted=yes] http://termux.cpolar.com termux extras&quot; &gt;&gt; $PREFIX/etc/apt/sources.list.d/cpolar.list</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新仓库</span></span><br><span class=\"line\">pkg update</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">pkg install cpolar</span><br></pre></td></tr></table></figure>\n<p>安装完成后重启 termux</p>\n<h2 id=\"注册-cpolar-账户\"><a href=\"#注册-cpolar-账户\" class=\"headerlink\" title=\"注册 cpolar 账户\"></a>注册 cpolar 账户</h2><ul>\n<li>注册<br>登陆<a href=\"https://www.cpolar.com/\">cpolar官网</a>，点击 <strong>免费注册</strong>，填写必要的信息进行注册(注册时需要的信息可以随便填写，但是，如果填写邮箱时如果填写的是不存在的邮箱，虽然可以注册成功，但后期将无法更换密码，因为她需要邮箱进行验证)</li>\n<li>获取 authtoken<br>登陆成功后便可以获取 <strong>authtoken</strong>(cpolar软件配置内网穿透需要这个)，点击 <strong>验证</strong> 即可找到 authtoken。</li>\n</ul>\n<h2 id=\"配置-启动\"><a href=\"#配置-启动\" class=\"headerlink\" title=\"配置&amp;启动\"></a>配置&amp;启动</h2><ul>\n<li>配置<ul>\n<li>apache2  <ul>\n<li>打开：$PREFIX&#x2F;etc&#x2F;apache2&#x2F;httpd.conf</li>\n<li>取消 <code>ServerName www.example.com</code> 的注释</li>\n<li>将 <code>www.example.com</code> 更改为本地地址和自己向要配置的端口号，例如:<code>127.0.0.1:8080</code></li>\n</ul>\n</li>\n<li>cpolar<ul>\n<li>打开：$PREFIX&#x2F;etc&#x2F;cpolar&#x2F;cpolar.yml</li>\n<li>添加 <code>authtoken: &lt;your authtoken&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>启动服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 apache2</span></span><br><span class=\"line\">apachectl start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 cpolar</span></span><br><span class=\"line\">sv up cpolar</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cpolar 穿透 apache 本地服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里的ip和端口就是 apache2 配置文件中配置的ip和端口号</span></span><br><span class=\"line\">cpolar http 127.0.0.1:8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看本地web服务映射的URL<br>登陆cpolar 网站，点击 <strong>状态</strong> 可以查看 <strong>在线隧道</strong> 信息，其中包括本地服务映射的 <strong>URL</strong> ，复制该 URL 并在浏览器中打开就可以访问 web 服务了。</li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"在安卓机上基于termux搭建web服务器\"><a href=\"#在安卓机上基于termux搭建web服务器\" class=\"headerlink\" title=\"在安卓机上基于termux搭建web服务器\"></a>在安卓机上基于termux搭建web服务器</h1><h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>换了新手机后，旧手机闲置着总觉得浪费，所以就想着折腾一下，搭建一个简单的web服务器玩玩。</p>\n<h1 id=\"搭建详情\"><a href=\"#搭建详情\" class=\"headerlink\" title=\"搭建详情\"></a>搭建详情</h1><h2 id=\"安装应用\"><a href=\"#安装应用\" class=\"headerlink\" title=\"安装应用\"></a>安装应用</h2><ul>\n<li>需要安装的应用：<ul>\n<li>apache: 服务器软件,用来搭建本地web服务</li>\n<li>termux-services: 管理termux服务</li>\n<li>cpolar: 内网穿透,是本地服务公网也可以访问</li>\n</ul>\n</li>\n<li>安装apache,termux-services</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install apache2 termux-services</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装 cpolar</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建必要的文件夹：</span></span><br><span class=\"line\">mkdir -p $PREFIX/etc/apt/sources.list.d</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加cpolar下载源</span></span><br><span class=\"line\">echo &quot;deb [trusted=yes] http://termux.cpolar.com termux extras&quot; &gt;&gt; $PREFIX/etc/apt/sources.list.d/cpolar.list</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新仓库</span></span><br><span class=\"line\">pkg update</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">pkg install cpolar</span><br></pre></td></tr></table></figure>\n<p>安装完成后重启 termux</p>\n<h2 id=\"注册-cpolar-账户\"><a href=\"#注册-cpolar-账户\" class=\"headerlink\" title=\"注册 cpolar 账户\"></a>注册 cpolar 账户</h2><ul>\n<li>注册<br>登陆<a href=\"https://www.cpolar.com/\">cpolar官网</a>，点击 <strong>免费注册</strong>，填写必要的信息进行注册(注册时需要的信息可以随便填写，但是，如果填写邮箱时如果填写的是不存在的邮箱，虽然可以注册成功，但后期将无法更换密码，因为她需要邮箱进行验证)</li>\n<li>获取 authtoken<br>登陆成功后便可以获取 <strong>authtoken</strong>(cpolar软件配置内网穿透需要这个)，点击 <strong>验证</strong> 即可找到 authtoken。</li>\n</ul>\n<h2 id=\"配置-启动\"><a href=\"#配置-启动\" class=\"headerlink\" title=\"配置&amp;启动\"></a>配置&amp;启动</h2><ul>\n<li>配置<ul>\n<li>apache2  <ul>\n<li>打开：$PREFIX&#x2F;etc&#x2F;apache2&#x2F;httpd.conf</li>\n<li>取消 <code>ServerName www.example.com</code> 的注释</li>\n<li>将 <code>www.example.com</code> 更改为本地地址和自己向要配置的端口号，例如:<code>127.0.0.1:8080</code></li>\n</ul>\n</li>\n<li>cpolar<ul>\n<li>打开：$PREFIX&#x2F;etc&#x2F;cpolar&#x2F;cpolar.yml</li>\n<li>添加 <code>authtoken: &lt;your authtoken&gt;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>启动服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 apache2</span></span><br><span class=\"line\">apachectl start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动 cpolar</span></span><br><span class=\"line\">sv up cpolar</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cpolar 穿透 apache 本地服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里的ip和端口就是 apache2 配置文件中配置的ip和端口号</span></span><br><span class=\"line\">cpolar http 127.0.0.1:8080</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看本地web服务映射的URL<br>登陆cpolar 网站，点击 <strong>状态</strong> 可以查看 <strong>在线隧道</strong> 信息，其中包括本地服务映射的 <strong>URL</strong> ，复制该 URL 并在浏览器中打开就可以访问 web 服务了。</li>\n</ul>\n"},{"title":"二维数组作为函数参数的问题","toc":true,"_content":"[toc]\n\n# 二维数组作为函数参数的问题\n通常在c函数中定义二维数组参数时，喜欢把二维数组当作二级指针来处理。但是这样就会引出其他一些问题：\n1. 二维数组传入函数时，出现 **不完整的数据来袭** 的警告  \n2. 在函数中无法向 **访问二维数组** 那样回去数组元素，也无法通过 **直接解析地址** 的方式访问数组元素，程序会直接崩溃。  \n\n## 示例\n* 代码\n```c\n// 2d_array-arg.c\n\n#include <stdio.h>\n\n// 定义查看二维数组第一个元素的函数\nvoid look_arr_e1(int** arr, int row, int col) {\n\tint e1;\n\te1 = arr[0][0];\n\tprintf(\"e1=%d\\n\", e1);\n}\n\nint main(int argc, char* argv[])\n{\n\t// 定义一个3x2的二维数组\n\tint arr[3][2] = {\n\t\t{1, 2},\n\t\t{3, 4},\n\t\t{5, 6} };\n\n\tlook_arr_e1(arr, 3, 2);\n\n\treturn 0;\n}\n```\n* 编译运行结果:  \n![](./c-function-arg/compiling.png)  \nrun 时则提示 **段错误**  \n## 解决\n1. 对于 **warning** 来说，在 arr 传入函数是直接强制类型转换即可:\n```c\nlook_arr_e1((int**)arr, 3, 2);\n```\n2. 对于这个段错误就是大问题了，解决方式的核心也是强转，难点在于对 **数组指针** 的理解如何。在示例中 arr 的列数为 col 则在函数中要使用前，可先将 arr 强转为列数为 col 的数组指针:\n```c\nint (*arr_ptr)[col] = (int (*)[col])arr;\n```\n* 完整代码\n```c\n// 2d_array-arg.c\n\n#include <stdio.h>\n\n// 定义查看二维数组第一个元素的函数\nvoid look_arr_e1(int** arr, int row, int col) {\n\tint (*arr_ptr)[col] = (int (*)[col])arr;\n\tint e1;\n\te1 = arr_ptr[0][0];\n\tprintf(\"e1=%d\\n\", e1);\n}\n\nint main(int argc, char* argv[])\n{\n\t// 定义一个3x2的二维数组\n\tint arr[3][2] = {\n\t\t{1, 2},\n\t\t{3, 4},\n\t\t{5, 6} };\n\n\tlook_arr_e1((int**)arr, 3, 2);\n\n\treturn 0;\n}\n```\n","source":"_posts/blog/c-function-arg.md","raw":"---\ntitle: 二维数组作为函数参数的问题\ntoc: true\n---\n[toc]\n\n# 二维数组作为函数参数的问题\n通常在c函数中定义二维数组参数时，喜欢把二维数组当作二级指针来处理。但是这样就会引出其他一些问题：\n1. 二维数组传入函数时，出现 **不完整的数据来袭** 的警告  \n2. 在函数中无法向 **访问二维数组** 那样回去数组元素，也无法通过 **直接解析地址** 的方式访问数组元素，程序会直接崩溃。  \n\n## 示例\n* 代码\n```c\n// 2d_array-arg.c\n\n#include <stdio.h>\n\n// 定义查看二维数组第一个元素的函数\nvoid look_arr_e1(int** arr, int row, int col) {\n\tint e1;\n\te1 = arr[0][0];\n\tprintf(\"e1=%d\\n\", e1);\n}\n\nint main(int argc, char* argv[])\n{\n\t// 定义一个3x2的二维数组\n\tint arr[3][2] = {\n\t\t{1, 2},\n\t\t{3, 4},\n\t\t{5, 6} };\n\n\tlook_arr_e1(arr, 3, 2);\n\n\treturn 0;\n}\n```\n* 编译运行结果:  \n![](./c-function-arg/compiling.png)  \nrun 时则提示 **段错误**  \n## 解决\n1. 对于 **warning** 来说，在 arr 传入函数是直接强制类型转换即可:\n```c\nlook_arr_e1((int**)arr, 3, 2);\n```\n2. 对于这个段错误就是大问题了，解决方式的核心也是强转，难点在于对 **数组指针** 的理解如何。在示例中 arr 的列数为 col 则在函数中要使用前，可先将 arr 强转为列数为 col 的数组指针:\n```c\nint (*arr_ptr)[col] = (int (*)[col])arr;\n```\n* 完整代码\n```c\n// 2d_array-arg.c\n\n#include <stdio.h>\n\n// 定义查看二维数组第一个元素的函数\nvoid look_arr_e1(int** arr, int row, int col) {\n\tint (*arr_ptr)[col] = (int (*)[col])arr;\n\tint e1;\n\te1 = arr_ptr[0][0];\n\tprintf(\"e1=%d\\n\", e1);\n}\n\nint main(int argc, char* argv[])\n{\n\t// 定义一个3x2的二维数组\n\tint arr[3][2] = {\n\t\t{1, 2},\n\t\t{3, 4},\n\t\t{5, 6} };\n\n\tlook_arr_e1((int**)arr, 3, 2);\n\n\treturn 0;\n}\n```\n","slug":"blog/c-function-arg","published":1,"date":"2025-01-20T08:57:09.720Z","updated":"2025-01-20T08:57:09.720Z","_id":"cm64sykf70001vvjxfc2rg5zq","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"二维数组作为函数参数的问题\"><a href=\"#二维数组作为函数参数的问题\" class=\"headerlink\" title=\"二维数组作为函数参数的问题\"></a>二维数组作为函数参数的问题</h1><p>通常在c函数中定义二维数组参数时，喜欢把二维数组当作二级指针来处理。但是这样就会引出其他一些问题：</p>\n<ol>\n<li>二维数组传入函数时，出现 <strong>不完整的数据来袭</strong> 的警告  </li>\n<li>在函数中无法向 <strong>访问二维数组</strong> 那样回去数组元素，也无法通过 <strong>直接解析地址</strong> 的方式访问数组元素，程序会直接崩溃。</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2d_array-arg.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义查看二维数组第一个元素的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">look_arr_e1</span><span class=\"params\">(<span class=\"type\">int</span>** arr, <span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1;</span><br><span class=\"line\">\te1 = arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e1=%d\\n&quot;</span>, e1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个3x2的二维数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlook_arr_e1(arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译运行结果:</li>\n</ul>\n<img src=\"/undefined/blog/c-function-arg/compiling.png\" class=\"\">  \n<p>run 时则提示 <strong>段错误</strong>  </p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ol>\n<li>对于 <strong>warning</strong> 来说，在 arr 传入函数是直接强制类型转换即可:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">look_arr_e1((<span class=\"type\">int</span>**)arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>对于这个段错误就是大问题了，解决方式的核心也是强转，难点在于对 <strong>数组指针</strong> 的理解如何。在示例中 arr 的列数为 col 则在函数中要使用前，可先将 arr 强转为列数为 col 的数组指针:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*arr_ptr)[col] = (<span class=\"type\">int</span> (*)[col])arr;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2d_array-arg.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义查看二维数组第一个元素的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">look_arr_e1</span><span class=\"params\">(<span class=\"type\">int</span>** arr, <span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*arr_ptr)[col] = (<span class=\"type\">int</span> (*)[col])arr;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1;</span><br><span class=\"line\">\te1 = arr_ptr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e1=%d\\n&quot;</span>, e1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个3x2的二维数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlook_arr_e1((<span class=\"type\">int</span>**)arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"二维数组作为函数参数的问题\"><a href=\"#二维数组作为函数参数的问题\" class=\"headerlink\" title=\"二维数组作为函数参数的问题\"></a>二维数组作为函数参数的问题</h1><p>通常在c函数中定义二维数组参数时，喜欢把二维数组当作二级指针来处理。但是这样就会引出其他一些问题：</p>\n<ol>\n<li>二维数组传入函数时，出现 <strong>不完整的数据来袭</strong> 的警告  </li>\n<li>在函数中无法向 <strong>访问二维数组</strong> 那样回去数组元素，也无法通过 <strong>直接解析地址</strong> 的方式访问数组元素，程序会直接崩溃。</li>\n</ol>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2d_array-arg.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义查看二维数组第一个元素的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">look_arr_e1</span><span class=\"params\">(<span class=\"type\">int</span>** arr, <span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1;</span><br><span class=\"line\">\te1 = arr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e1=%d\\n&quot;</span>, e1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个3x2的二维数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlook_arr_e1(arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译运行结果:</li>\n</ul>\n<img src=\"/undefined/blog/c-function-arg/compiling.png\" class=\"\">  \n<p>run 时则提示 <strong>段错误</strong>  </p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ol>\n<li>对于 <strong>warning</strong> 来说，在 arr 传入函数是直接强制类型转换即可:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">look_arr_e1((<span class=\"type\">int</span>**)arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>对于这个段错误就是大问题了，解决方式的核心也是强转，难点在于对 <strong>数组指针</strong> 的理解如何。在示例中 arr 的列数为 col 则在函数中要使用前，可先将 arr 强转为列数为 col 的数组指针:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> (*arr_ptr)[col] = (<span class=\"type\">int</span> (*)[col])arr;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>完整代码</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2d_array-arg.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义查看二维数组第一个元素的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">look_arr_e1</span><span class=\"params\">(<span class=\"type\">int</span>** arr, <span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> (*arr_ptr)[col] = (<span class=\"type\">int</span> (*)[col])arr;</span><br><span class=\"line\">\t<span class=\"type\">int</span> e1;</span><br><span class=\"line\">\te1 = arr_ptr[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;e1=%d\\n&quot;</span>, e1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个3x2的二维数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlook_arr_e1((<span class=\"type\">int</span>**)arr, <span class=\"number\">3</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"如何下载 google chrome 安卓版","toc":true,"_content":"[toc]\n\n# 如何下载 google chrome 安卓版\n## 解决科学上网的问题\n[科学上网](https://github.com/zhang20204/tools/blob/main/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/index.md)\n## 找到 chrome 在google play中的url\n1. 打开[google play](https://play.google.com/store/games)，并选中 **手机**\n    ![](./chrome-for-android/google-play-url.png)\n2. 在搜索栏中搜索 \"chrome\"\n    ![](./chrome-for-android/search-chrome.png)\n3. 点击 **Google Chrome 浏览器**\n    ![](./chrome-for-android/click-chrome.png)\n4. 点击 **分享**\n    ![](./chrome-for-android/get-chrome-url.png)\n5. 复制 url\n##  下载 chrome\n1. 打开 [apk-downloader](https://apps.evozi.com/apk-downloader/)\n    ![](./chrome-for-android/apk-downloader-ui.png)\n2. 将在 **google play** 中复制的 url  粘贴到里面 ,点击 **Generate Download Line** 生成下载链接\n    ![](./chrome-for-android/download-chrome.png)\n3. 点击 **Click here to download com.android.chrome now** 下载即可下载chrome apk\n\n# 趣事\n说来还蛮搞笑的。  \n&emsp;笔者原本打算是下载[Firefox(火狐)](https://www.mozilla.org/zh-CN/firefox/browsers/mobile/android/)的，但发现这玩意儿现在无法直接下载(我记得之前firefor,chrome都是可以直接下载apk的)，要下载就需要转到google paly，无语...  \n&emsp;然后就开始进 google play的官网，接着search, install, 提示我必须登陆，再次无语...  \n&emsp;好吧那就登录吧。登陆google paly 之后发现还是无法直接下载，说什么“此 Google 帐号尚未与设备关联。请在安装应用之前访问您设备上的 Play 商店应用。”，无语plus...  \n&emsp;当我在网络中寻回了解决办法时发现，既然安卓版 firefox 和 chrome 都需要在 google play 中才能获取，那我为什么不直接下载安装 chrome 呢？这在有了这篇博客。\n","source":"_posts/blog/chrome-for-android.md","raw":"---\ntitle: 如何下载 google chrome 安卓版\ntoc: true\n---\n[toc]\n\n# 如何下载 google chrome 安卓版\n## 解决科学上网的问题\n[科学上网](https://github.com/zhang20204/tools/blob/main/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/index.md)\n## 找到 chrome 在google play中的url\n1. 打开[google play](https://play.google.com/store/games)，并选中 **手机**\n    ![](./chrome-for-android/google-play-url.png)\n2. 在搜索栏中搜索 \"chrome\"\n    ![](./chrome-for-android/search-chrome.png)\n3. 点击 **Google Chrome 浏览器**\n    ![](./chrome-for-android/click-chrome.png)\n4. 点击 **分享**\n    ![](./chrome-for-android/get-chrome-url.png)\n5. 复制 url\n##  下载 chrome\n1. 打开 [apk-downloader](https://apps.evozi.com/apk-downloader/)\n    ![](./chrome-for-android/apk-downloader-ui.png)\n2. 将在 **google play** 中复制的 url  粘贴到里面 ,点击 **Generate Download Line** 生成下载链接\n    ![](./chrome-for-android/download-chrome.png)\n3. 点击 **Click here to download com.android.chrome now** 下载即可下载chrome apk\n\n# 趣事\n说来还蛮搞笑的。  \n&emsp;笔者原本打算是下载[Firefox(火狐)](https://www.mozilla.org/zh-CN/firefox/browsers/mobile/android/)的，但发现这玩意儿现在无法直接下载(我记得之前firefor,chrome都是可以直接下载apk的)，要下载就需要转到google paly，无语...  \n&emsp;然后就开始进 google play的官网，接着search, install, 提示我必须登陆，再次无语...  \n&emsp;好吧那就登录吧。登陆google paly 之后发现还是无法直接下载，说什么“此 Google 帐号尚未与设备关联。请在安装应用之前访问您设备上的 Play 商店应用。”，无语plus...  \n&emsp;当我在网络中寻回了解决办法时发现，既然安卓版 firefox 和 chrome 都需要在 google play 中才能获取，那我为什么不直接下载安装 chrome 呢？这在有了这篇博客。\n","slug":"blog/chrome-for-android","published":1,"date":"2025-01-20T08:57:09.720Z","updated":"2025-01-20T08:57:09.720Z","_id":"cm64sykf70002vvjx34jq7oiv","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"如何下载-google-chrome-安卓版\"><a href=\"#如何下载-google-chrome-安卓版\" class=\"headerlink\" title=\"如何下载 google chrome 安卓版\"></a>如何下载 google chrome 安卓版</h1><h2 id=\"解决科学上网的问题\"><a href=\"#解决科学上网的问题\" class=\"headerlink\" title=\"解决科学上网的问题\"></a>解决科学上网的问题</h2><p><a href=\"https://github.com/zhang20204/tools/blob/main/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/index.md\">科学上网</a></p>\n<h2 id=\"找到-chrome-在google-play中的url\"><a href=\"#找到-chrome-在google-play中的url\" class=\"headerlink\" title=\"找到 chrome 在google play中的url\"></a>找到 chrome 在google play中的url</h2><ol>\n<li>打开<a href=\"https://play.google.com/store/games\">google play</a>，并选中 <strong>手机</strong> <img src=\"/undefined/blog/chrome-for-android/google-play-url.png\" class=\"\"></li>\n<li>在搜索栏中搜索 “chrome” <img src=\"/undefined/blog/chrome-for-android/search-chrome.png\" class=\"\"></li>\n<li>点击 <strong>Google Chrome 浏览器</strong> <img src=\"/undefined/blog/chrome-for-android/click-chrome.png\" class=\"\"></li>\n<li>点击 <strong>分享</strong> <img src=\"/undefined/blog/chrome-for-android/get-chrome-url.png\" class=\"\"></li>\n<li>复制 url</li>\n</ol>\n<h2 id=\"下载-chrome\"><a href=\"#下载-chrome\" class=\"headerlink\" title=\"下载 chrome\"></a>下载 chrome</h2><ol>\n<li>打开 <a href=\"https://apps.evozi.com/apk-downloader/\">apk-downloader</a> <img src=\"/undefined/blog/chrome-for-android/apk-downloader-ui.png\" class=\"\"></li>\n<li>将在 <strong>google play</strong> 中复制的 url  粘贴到里面 ,点击 <strong>Generate Download Line</strong> 生成下载链接 <img src=\"/undefined/blog/chrome-for-android/download-chrome.png\" class=\"\"></li>\n<li>点击 <strong>Click here to download com.android.chrome now</strong> 下载即可下载chrome apk</li>\n</ol>\n<h1 id=\"趣事\"><a href=\"#趣事\" class=\"headerlink\" title=\"趣事\"></a>趣事</h1><p>说来还蛮搞笑的。<br>&emsp;笔者原本打算是下载<a href=\"https://www.mozilla.org/zh-CN/firefox/browsers/mobile/android/\">Firefox(火狐)</a>的，但发现这玩意儿现在无法直接下载(我记得之前firefor,chrome都是可以直接下载apk的)，要下载就需要转到google paly，无语…<br>&emsp;然后就开始进 google play的官网，接着search, install, 提示我必须登陆，再次无语…<br>&emsp;好吧那就登录吧。登陆google paly 之后发现还是无法直接下载，说什么“此 Google 帐号尚未与设备关联。请在安装应用之前访问您设备上的 Play 商店应用。”，无语plus…<br>&emsp;当我在网络中寻回了解决办法时发现，既然安卓版 firefox 和 chrome 都需要在 google play 中才能获取，那我为什么不直接下载安装 chrome 呢？这在有了这篇博客。</p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"如何下载-google-chrome-安卓版\"><a href=\"#如何下载-google-chrome-安卓版\" class=\"headerlink\" title=\"如何下载 google chrome 安卓版\"></a>如何下载 google chrome 安卓版</h1><h2 id=\"解决科学上网的问题\"><a href=\"#解决科学上网的问题\" class=\"headerlink\" title=\"解决科学上网的问题\"></a>解决科学上网的问题</h2><p><a href=\"https://github.com/zhang20204/tools/blob/main/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/index.md\">科学上网</a></p>\n<h2 id=\"找到-chrome-在google-play中的url\"><a href=\"#找到-chrome-在google-play中的url\" class=\"headerlink\" title=\"找到 chrome 在google play中的url\"></a>找到 chrome 在google play中的url</h2><ol>\n<li>打开<a href=\"https://play.google.com/store/games\">google play</a>，并选中 <strong>手机</strong> <img src=\"/undefined/blog/chrome-for-android/google-play-url.png\" class=\"\"></li>\n<li>在搜索栏中搜索 “chrome” <img src=\"/undefined/blog/chrome-for-android/search-chrome.png\" class=\"\"></li>\n<li>点击 <strong>Google Chrome 浏览器</strong> <img src=\"/undefined/blog/chrome-for-android/click-chrome.png\" class=\"\"></li>\n<li>点击 <strong>分享</strong> <img src=\"/undefined/blog/chrome-for-android/get-chrome-url.png\" class=\"\"></li>\n<li>复制 url</li>\n</ol>\n<h2 id=\"下载-chrome\"><a href=\"#下载-chrome\" class=\"headerlink\" title=\"下载 chrome\"></a>下载 chrome</h2><ol>\n<li>打开 <a href=\"https://apps.evozi.com/apk-downloader/\">apk-downloader</a> <img src=\"/undefined/blog/chrome-for-android/apk-downloader-ui.png\" class=\"\"></li>\n<li>将在 <strong>google play</strong> 中复制的 url  粘贴到里面 ,点击 <strong>Generate Download Line</strong> 生成下载链接 <img src=\"/undefined/blog/chrome-for-android/download-chrome.png\" class=\"\"></li>\n<li>点击 <strong>Click here to download com.android.chrome now</strong> 下载即可下载chrome apk</li>\n</ol>\n<h1 id=\"趣事\"><a href=\"#趣事\" class=\"headerlink\" title=\"趣事\"></a>趣事</h1><p>说来还蛮搞笑的。<br>&emsp;笔者原本打算是下载<a href=\"https://www.mozilla.org/zh-CN/firefox/browsers/mobile/android/\">Firefox(火狐)</a>的，但发现这玩意儿现在无法直接下载(我记得之前firefor,chrome都是可以直接下载apk的)，要下载就需要转到google paly，无语…<br>&emsp;然后就开始进 google play的官网，接着search, install, 提示我必须登陆，再次无语…<br>&emsp;好吧那就登录吧。登陆google paly 之后发现还是无法直接下载，说什么“此 Google 帐号尚未与设备关联。请在安装应用之前访问您设备上的 Play 商店应用。”，无语plus…<br>&emsp;当我在网络中寻回了解决办法时发现，既然安卓版 firefox 和 chrome 都需要在 google play 中才能获取，那我为什么不直接下载安装 chrome 呢？这在有了这篇博客。</p>\n"},{"title":"免费的云服务器","toc":true,"_content":"# 免费的云服务器\n\n## 阿贝云\n### 简介  \n[阿贝云](https://www.abeiyun.com/) 是陕西云游四海网络科技有限公司旗下网络服务品牌，与 2018 年 10 月创建。\n### 免费服务器  \n它有提供免费服务器服务，性能如下所示：  \n![](./cloud-server/abeiyun-free_version-performance.png)\n### 使用体验\n* 申请免费服务器的问题 \n    * 注册账户：\n        * 需要手机号、身份证号，是的，需要你比较注重个人隐私，那就放弃吧。\n    * 实名认证\n        * 注册好了之后是无法直接申请服务器的，需要实名认证，这里就需要你的真实姓名，并且认证需要付费(也就是需要充钱，嗯？我不是冲着免费去的吗？)，然后还要绑定微信，emmm。。。就差没要我籍贯啦。\n    * 免费延期\n    ![](./cloud-server/abeiyum.png)\n    这个操作怎么有点眼熟呢？对了，很多电商返红包的套路了，只不过这个不是在他的官网，而是需要在且它平台“发评论”，emmmm,这一点我还是比较反感的。\n## 总结\n免费的东西不能说没有，但是是很罕见的,大多数情况也及时拿个人隐私当作筹码罢了。相比“个人信息交换”，还要暴漏自己的其他平台(给它免费打广告)，这一点笔者还是不太乐意的。所以，笔者打算放弃它啦。\n","source":"_posts/blog/cloud-server.md","raw":"---\ntitle: 免费的云服务器\ntoc: true\n---\n# 免费的云服务器\n\n## 阿贝云\n### 简介  \n[阿贝云](https://www.abeiyun.com/) 是陕西云游四海网络科技有限公司旗下网络服务品牌，与 2018 年 10 月创建。\n### 免费服务器  \n它有提供免费服务器服务，性能如下所示：  \n![](./cloud-server/abeiyun-free_version-performance.png)\n### 使用体验\n* 申请免费服务器的问题 \n    * 注册账户：\n        * 需要手机号、身份证号，是的，需要你比较注重个人隐私，那就放弃吧。\n    * 实名认证\n        * 注册好了之后是无法直接申请服务器的，需要实名认证，这里就需要你的真实姓名，并且认证需要付费(也就是需要充钱，嗯？我不是冲着免费去的吗？)，然后还要绑定微信，emmm。。。就差没要我籍贯啦。\n    * 免费延期\n    ![](./cloud-server/abeiyum.png)\n    这个操作怎么有点眼熟呢？对了，很多电商返红包的套路了，只不过这个不是在他的官网，而是需要在且它平台“发评论”，emmmm,这一点我还是比较反感的。\n## 总结\n免费的东西不能说没有，但是是很罕见的,大多数情况也及时拿个人隐私当作筹码罢了。相比“个人信息交换”，还要暴漏自己的其他平台(给它免费打广告)，这一点笔者还是不太乐意的。所以，笔者打算放弃它啦。\n","slug":"blog/cloud-server","published":1,"date":"2025-01-20T08:57:09.720Z","updated":"2025-01-20T08:57:09.720Z","_id":"cm64sykf80003vvjxgvh36lit","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"免费的云服务器\"><a href=\"#免费的云服务器\" class=\"headerlink\" title=\"免费的云服务器\"></a>免费的云服务器</h1><h2 id=\"阿贝云\"><a href=\"#阿贝云\" class=\"headerlink\" title=\"阿贝云\"></a>阿贝云</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><a href=\"https://www.abeiyun.com/\">阿贝云</a> 是陕西云游四海网络科技有限公司旗下网络服务品牌，与 2018 年 10 月创建。</p>\n<h3 id=\"免费服务器\"><a href=\"#免费服务器\" class=\"headerlink\" title=\"免费服务器\"></a>免费服务器</h3><p>它有提供免费服务器服务，性能如下所示：  </p>\n<img src=\"/undefined/blog/cloud-server/abeiyun-free_version-performance.png\" class=\"\">\n<h3 id=\"使用体验\"><a href=\"#使用体验\" class=\"headerlink\" title=\"使用体验\"></a>使用体验</h3><ul>\n<li>申请免费服务器的问题 <ul>\n<li>注册账户：<ul>\n<li>需要手机号、身份证号，是的，需要你比较注重个人隐私，那就放弃吧。</li>\n</ul>\n</li>\n<li>实名认证<ul>\n<li>注册好了之后是无法直接申请服务器的，需要实名认证，这里就需要你的真实姓名，并且认证需要付费(也就是需要充钱，嗯？我不是冲着免费去的吗？)，然后还要绑定微信，emmm。。。就差没要我籍贯啦。</li>\n</ul>\n</li>\n<li>免费延期</li>\n</ul>\n  <img src=\"/undefined/blog/cloud-server/abeiyum.png\" class=\"\">\n<p>  这个操作怎么有点眼熟呢？对了，很多电商返红包的套路了，只不过这个不是在他的官网，而是需要在且它平台“发评论”，emmmm,这一点我还是比较反感的。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>免费的东西不能说没有，但是是很罕见的,大多数情况也及时拿个人隐私当作筹码罢了。相比“个人信息交换”，还要暴漏自己的其他平台(给它免费打广告)，这一点笔者还是不太乐意的。所以，笔者打算放弃它啦。</p>\n","excerpt":"","more":"<h1 id=\"免费的云服务器\"><a href=\"#免费的云服务器\" class=\"headerlink\" title=\"免费的云服务器\"></a>免费的云服务器</h1><h2 id=\"阿贝云\"><a href=\"#阿贝云\" class=\"headerlink\" title=\"阿贝云\"></a>阿贝云</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><a href=\"https://www.abeiyun.com/\">阿贝云</a> 是陕西云游四海网络科技有限公司旗下网络服务品牌，与 2018 年 10 月创建。</p>\n<h3 id=\"免费服务器\"><a href=\"#免费服务器\" class=\"headerlink\" title=\"免费服务器\"></a>免费服务器</h3><p>它有提供免费服务器服务，性能如下所示：  </p>\n<img src=\"/undefined/blog/cloud-server/abeiyun-free_version-performance.png\" class=\"\">\n<h3 id=\"使用体验\"><a href=\"#使用体验\" class=\"headerlink\" title=\"使用体验\"></a>使用体验</h3><ul>\n<li>申请免费服务器的问题 <ul>\n<li>注册账户：<ul>\n<li>需要手机号、身份证号，是的，需要你比较注重个人隐私，那就放弃吧。</li>\n</ul>\n</li>\n<li>实名认证<ul>\n<li>注册好了之后是无法直接申请服务器的，需要实名认证，这里就需要你的真实姓名，并且认证需要付费(也就是需要充钱，嗯？我不是冲着免费去的吗？)，然后还要绑定微信，emmm。。。就差没要我籍贯啦。</li>\n</ul>\n</li>\n<li>免费延期</li>\n</ul>\n  <img src=\"/undefined/blog/cloud-server/abeiyum.png\" class=\"\">\n<p>  这个操作怎么有点眼熟呢？对了，很多电商返红包的套路了，只不过这个不是在他的官网，而是需要在且它平台“发评论”，emmmm,这一点我还是比较反感的。</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>免费的东西不能说没有，但是是很罕见的,大多数情况也及时拿个人隐私当作筹码罢了。相比“个人信息交换”，还要暴漏自己的其他平台(给它免费打广告)，这一点笔者还是不太乐意的。所以，笔者打算放弃它啦。</p>\n"},{"title":"如何创建google账户","toc":true,"_content":"[toc]\n\n# 如何创建google账户\n**注意**:  \n<u>笔者在创建 google 账户时是成功的，而在编写该文档时为了截图就重新操作了一遍，并没有 步骤9 中的 **skip** 按钮(步骤9的截图来源于[参考视频](#参考视频)，而是必须填写手机号(本人前几次失败也是这样)，原因不详。可过几天再尝试</u>\n## 1. 解决网络问题\n首先通过科学上网的方式，解决无法访问外网的问题\n* 机场  \n本人使用的机场是[SSRDOG](https://dog.ssrdog.com/)，对于新用户来说第一个月免费。\n* 桌面代理软件  \n本人使用的是[clash verge](https://clashverge.net/)，我使用她的原因如下：  \n    1. 开源免费，无需登陆;\n    2. Android/Windows/macOS/iOS/Linux 都可用.\n## 2. 科学上网节点的选择\n请选择**美国**的节点，我失败的原因之一就是使用了香港节点。\n## 3. 开始创建账户\n1. [登陆网址](https://support.google.com/)\n2. 选择 **Google Accounts** 选项\n3. 在 **Browse help topics** 中选择 **Popular articles** --> **Create a Google Account**，在新页面中部分显示如下:\n    ![](./create-google-account/create-a-google-account.png)\n4. 选择 **For myself**\n5. 输入用户名, 然后**Next**\n    ![](./create-google-account/usrname.png)\n6. 输入一些基本信息，然后**Next**\n    ![](./create-google-account/base-info.png)\n7. 在该页面中将显示系统根据输入的用户名分配的两个google邮箱地址，你可以任选一个，若觉得**不好看**，可以选择**Create your own Gmail address**, 然后输入符合自己气质的邮箱地址，然后**Next**。\n    ![](./create-google-account/gen-email.png)\n8. 输入用户密码\n    ![](./create-google-account/user-password.png)\n9. 如果幸运的话，将来到**Add recovery**的界面，为了简便，可以直接点击**skip**\n    ![](./create-google-account/recovery-email.png)\n10. 点击**Next**，点击**I agree**，到此账户注册成功\n# 参考视频\n[2024最新绕过手机验证 无限注册 100%成功注册Google谷歌账号 无需短信验证 无需花钱找接码平台 轻松创建Gmail谷歌邮箱 谷歌网盘 Youtube等账号](https://www.youtube.com/watch?v=wU3EnawyaSs)\n","source":"_posts/blog/create-google-account.md","raw":"---\ntitle: 如何创建google账户\ntoc: true\n---\n[toc]\n\n# 如何创建google账户\n**注意**:  \n<u>笔者在创建 google 账户时是成功的，而在编写该文档时为了截图就重新操作了一遍，并没有 步骤9 中的 **skip** 按钮(步骤9的截图来源于[参考视频](#参考视频)，而是必须填写手机号(本人前几次失败也是这样)，原因不详。可过几天再尝试</u>\n## 1. 解决网络问题\n首先通过科学上网的方式，解决无法访问外网的问题\n* 机场  \n本人使用的机场是[SSRDOG](https://dog.ssrdog.com/)，对于新用户来说第一个月免费。\n* 桌面代理软件  \n本人使用的是[clash verge](https://clashverge.net/)，我使用她的原因如下：  \n    1. 开源免费，无需登陆;\n    2. Android/Windows/macOS/iOS/Linux 都可用.\n## 2. 科学上网节点的选择\n请选择**美国**的节点，我失败的原因之一就是使用了香港节点。\n## 3. 开始创建账户\n1. [登陆网址](https://support.google.com/)\n2. 选择 **Google Accounts** 选项\n3. 在 **Browse help topics** 中选择 **Popular articles** --> **Create a Google Account**，在新页面中部分显示如下:\n    ![](./create-google-account/create-a-google-account.png)\n4. 选择 **For myself**\n5. 输入用户名, 然后**Next**\n    ![](./create-google-account/usrname.png)\n6. 输入一些基本信息，然后**Next**\n    ![](./create-google-account/base-info.png)\n7. 在该页面中将显示系统根据输入的用户名分配的两个google邮箱地址，你可以任选一个，若觉得**不好看**，可以选择**Create your own Gmail address**, 然后输入符合自己气质的邮箱地址，然后**Next**。\n    ![](./create-google-account/gen-email.png)\n8. 输入用户密码\n    ![](./create-google-account/user-password.png)\n9. 如果幸运的话，将来到**Add recovery**的界面，为了简便，可以直接点击**skip**\n    ![](./create-google-account/recovery-email.png)\n10. 点击**Next**，点击**I agree**，到此账户注册成功\n# 参考视频\n[2024最新绕过手机验证 无限注册 100%成功注册Google谷歌账号 无需短信验证 无需花钱找接码平台 轻松创建Gmail谷歌邮箱 谷歌网盘 Youtube等账号](https://www.youtube.com/watch?v=wU3EnawyaSs)\n","slug":"blog/create-google-account","published":1,"date":"2025-01-20T08:57:09.720Z","updated":"2025-01-20T08:57:09.720Z","_id":"cm64sykf90004vvjx6am3fghw","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"如何创建google账户\"><a href=\"#如何创建google账户\" class=\"headerlink\" title=\"如何创建google账户\"></a>如何创建google账户</h1><p><strong>注意</strong>:<br><u>笔者在创建 google 账户时是成功的，而在编写该文档时为了截图就重新操作了一遍，并没有 步骤9 中的 <strong>skip</strong> 按钮(步骤9的截图来源于<a href=\"#%E5%8F%82%E8%80%83%E8%A7%86%E9%A2%91\">参考视频</a>，而是必须填写手机号(本人前几次失败也是这样)，原因不详。可过几天再尝试</u></p>\n<h2 id=\"1-解决网络问题\"><a href=\"#1-解决网络问题\" class=\"headerlink\" title=\"1. 解决网络问题\"></a>1. 解决网络问题</h2><p>首先通过科学上网的方式，解决无法访问外网的问题</p>\n<ul>\n<li>机场<br>本人使用的机场是<a href=\"https://dog.ssrdog.com/\">SSRDOG</a>，对于新用户来说第一个月免费。</li>\n<li>桌面代理软件<br>本人使用的是<a href=\"https://clashverge.net/\">clash verge</a>，我使用她的原因如下：  <ol>\n<li>开源免费，无需登陆;</li>\n<li>Android&#x2F;Windows&#x2F;macOS&#x2F;iOS&#x2F;Linux 都可用.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-科学上网节点的选择\"><a href=\"#2-科学上网节点的选择\" class=\"headerlink\" title=\"2. 科学上网节点的选择\"></a>2. 科学上网节点的选择</h2><p>请选择<strong>美国</strong>的节点，我失败的原因之一就是使用了香港节点。</p>\n<h2 id=\"3-开始创建账户\"><a href=\"#3-开始创建账户\" class=\"headerlink\" title=\"3. 开始创建账户\"></a>3. 开始创建账户</h2><ol>\n<li><a href=\"https://support.google.com/\">登陆网址</a></li>\n<li>选择 <strong>Google Accounts</strong> 选项</li>\n<li>在 <strong>Browse help topics</strong> 中选择 <strong>Popular articles</strong> –&gt; <strong>Create a Google Account</strong>，在新页面中部分显示如下: <img src=\"/undefined/blog/create-google-account/create-a-google-account.png\" class=\"\"></li>\n<li>选择 <strong>For myself</strong></li>\n<li>输入用户名, 然后<strong>Next</strong> <img src=\"/undefined/blog/create-google-account/usrname.png\" class=\"\"></li>\n<li>输入一些基本信息，然后<strong>Next</strong> <img src=\"/undefined/blog/create-google-account/base-info.png\" class=\"\"></li>\n<li>在该页面中将显示系统根据输入的用户名分配的两个google邮箱地址，你可以任选一个，若觉得<strong>不好看</strong>，可以选择<strong>Create your own Gmail address</strong>, 然后输入符合自己气质的邮箱地址，然后<strong>Next</strong>。 <img src=\"/undefined/blog/create-google-account/gen-email.png\" class=\"\"></li>\n<li>输入用户密码 <img src=\"/undefined/blog/create-google-account/user-password.png\" class=\"\"></li>\n<li>如果幸运的话，将来到<strong>Add recovery</strong>的界面，为了简便，可以直接点击<strong>skip</strong> <img src=\"/undefined/blog/create-google-account/recovery-email.png\" class=\"\"></li>\n<li>点击<strong>Next</strong>，点击<strong>I agree</strong>，到此账户注册成功</li>\n</ol>\n<h1 id=\"参考视频\"><a href=\"#参考视频\" class=\"headerlink\" title=\"参考视频\"></a>参考视频</h1><p><a href=\"https://www.youtube.com/watch?v=wU3EnawyaSs\">2024最新绕过手机验证 无限注册 100%成功注册Google谷歌账号 无需短信验证 无需花钱找接码平台 轻松创建Gmail谷歌邮箱 谷歌网盘 Youtube等账号</a></p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"如何创建google账户\"><a href=\"#如何创建google账户\" class=\"headerlink\" title=\"如何创建google账户\"></a>如何创建google账户</h1><p><strong>注意</strong>:<br><u>笔者在创建 google 账户时是成功的，而在编写该文档时为了截图就重新操作了一遍，并没有 步骤9 中的 <strong>skip</strong> 按钮(步骤9的截图来源于<a href=\"#%E5%8F%82%E8%80%83%E8%A7%86%E9%A2%91\">参考视频</a>，而是必须填写手机号(本人前几次失败也是这样)，原因不详。可过几天再尝试</u></p>\n<h2 id=\"1-解决网络问题\"><a href=\"#1-解决网络问题\" class=\"headerlink\" title=\"1. 解决网络问题\"></a>1. 解决网络问题</h2><p>首先通过科学上网的方式，解决无法访问外网的问题</p>\n<ul>\n<li>机场<br>本人使用的机场是<a href=\"https://dog.ssrdog.com/\">SSRDOG</a>，对于新用户来说第一个月免费。</li>\n<li>桌面代理软件<br>本人使用的是<a href=\"https://clashverge.net/\">clash verge</a>，我使用她的原因如下：  <ol>\n<li>开源免费，无需登陆;</li>\n<li>Android&#x2F;Windows&#x2F;macOS&#x2F;iOS&#x2F;Linux 都可用.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"2-科学上网节点的选择\"><a href=\"#2-科学上网节点的选择\" class=\"headerlink\" title=\"2. 科学上网节点的选择\"></a>2. 科学上网节点的选择</h2><p>请选择<strong>美国</strong>的节点，我失败的原因之一就是使用了香港节点。</p>\n<h2 id=\"3-开始创建账户\"><a href=\"#3-开始创建账户\" class=\"headerlink\" title=\"3. 开始创建账户\"></a>3. 开始创建账户</h2><ol>\n<li><a href=\"https://support.google.com/\">登陆网址</a></li>\n<li>选择 <strong>Google Accounts</strong> 选项</li>\n<li>在 <strong>Browse help topics</strong> 中选择 <strong>Popular articles</strong> –&gt; <strong>Create a Google Account</strong>，在新页面中部分显示如下: <img src=\"/undefined/blog/create-google-account/create-a-google-account.png\" class=\"\"></li>\n<li>选择 <strong>For myself</strong></li>\n<li>输入用户名, 然后<strong>Next</strong> <img src=\"/undefined/blog/create-google-account/usrname.png\" class=\"\"></li>\n<li>输入一些基本信息，然后<strong>Next</strong> <img src=\"/undefined/blog/create-google-account/base-info.png\" class=\"\"></li>\n<li>在该页面中将显示系统根据输入的用户名分配的两个google邮箱地址，你可以任选一个，若觉得<strong>不好看</strong>，可以选择<strong>Create your own Gmail address</strong>, 然后输入符合自己气质的邮箱地址，然后<strong>Next</strong>。 <img src=\"/undefined/blog/create-google-account/gen-email.png\" class=\"\"></li>\n<li>输入用户密码 <img src=\"/undefined/blog/create-google-account/user-password.png\" class=\"\"></li>\n<li>如果幸运的话，将来到<strong>Add recovery</strong>的界面，为了简便，可以直接点击<strong>skip</strong> <img src=\"/undefined/blog/create-google-account/recovery-email.png\" class=\"\"></li>\n<li>点击<strong>Next</strong>，点击<strong>I agree</strong>，到此账户注册成功</li>\n</ol>\n<h1 id=\"参考视频\"><a href=\"#参考视频\" class=\"headerlink\" title=\"参考视频\"></a>参考视频</h1><p><a href=\"https://www.youtube.com/watch?v=wU3EnawyaSs\">2024最新绕过手机验证 无限注册 100%成功注册Google谷歌账号 无需短信验证 无需花钱找接码平台 轻松创建Gmail谷歌邮箱 谷歌网盘 Youtube等账号</a></p>\n"},{"title":"在安卓手机中使用linxu虚拟机","toc":true,"_content":"\n# 在安卓手机中使用linxu虚拟机\n## 简介\n由于笔者需要，便尝试如何在安卓手机中使用linux虚拟机。步骤如下：\n1. 安装 termux\n2. 在 termux 中安装 proot 和 proot-distro\n3. 使用 proot-distro 安卓 linux 虚拟机\n## 安装 termux\n* 进入[官网](https://github.com/termux/termux-app)\n* 点击 Releases 查看发行版本 \n![](./termux-for-android/open-web-termux.png)\n* 下载适合自己手机的版本,笔者选择如下所示：\n![](./termux-for-android/install-termux.png)\n* 将下载好的 apk 拷贝到手机上，然后点击 apk 文件即可安装,安装好后如图所示：\n![](./termux-for-android/termux.png)\n## 安装 proot 和 proot-distro\n* 点击打开 termux 软件  \n![](./termux-for-android/open-termux.png)  \n* 安装方式\n    * pkg 安装\n    ```shell\n    pkg upgrade\n    pkg install proot proot-distro\n    ```\n    * apt 安装\n    ```shell\n    apt install proot proot-distro\n    ```\n>NOTE: <u>然而笔者还是更喜欢在键盘上敲命令，所以选择了远程连接(远程连接到 termux)的方式进行后续操作，当然在远程连接之前的准备工作，还是需要在 termux 中敲命令的。</u>\n## 安装 ubuntu\n* 查看可以安装哪些 linux 版本: `proot-distro list`\n![](./termux-for-android/install-ubuntu.png)\n* 安装linux（笔者选择 Ubuntu 24.04,即 ubuntu, 安装时需要满足能访问github):\n```shell\nproot-distro install ubuntu\n```\n* 启动linux: `proot-distro login ubuntu`\n![](./termux-for-android/login-ubuntu.png)\n## 远程连接到 termux\n1. 让电脑和手机连接同一个局域网\n2. 安装ssh服务器\n```shell\npkg install openssh\n```\n3. 启动ssh\n```shell\nsshd\n```\n4. 查看ip地址、sshd端口号、用户名、密码\n    * 查看用户名：`whoami`\n    * 设置用户密码：`passwd`\n    * 查看ip：`ifconfig 2>&1 | grep -oP \"192\\.168\\.[0-9]+\\.[0-9]+\" | head -n 1`\n    * 设置sshd端口号：`sshd -p 9000`\n5. 在电脑上远程连接:`ssh <user_name>@<ip> -p <port>`, 然后输入密码即可登陆：\n![](./termux-for-android/remote-login.png)\n","source":"_posts/blog/termux-for-android.md","raw":"---\ntitle: 在安卓手机中使用linxu虚拟机\ntoc: true\n---\n\n# 在安卓手机中使用linxu虚拟机\n## 简介\n由于笔者需要，便尝试如何在安卓手机中使用linux虚拟机。步骤如下：\n1. 安装 termux\n2. 在 termux 中安装 proot 和 proot-distro\n3. 使用 proot-distro 安卓 linux 虚拟机\n## 安装 termux\n* 进入[官网](https://github.com/termux/termux-app)\n* 点击 Releases 查看发行版本 \n![](./termux-for-android/open-web-termux.png)\n* 下载适合自己手机的版本,笔者选择如下所示：\n![](./termux-for-android/install-termux.png)\n* 将下载好的 apk 拷贝到手机上，然后点击 apk 文件即可安装,安装好后如图所示：\n![](./termux-for-android/termux.png)\n## 安装 proot 和 proot-distro\n* 点击打开 termux 软件  \n![](./termux-for-android/open-termux.png)  \n* 安装方式\n    * pkg 安装\n    ```shell\n    pkg upgrade\n    pkg install proot proot-distro\n    ```\n    * apt 安装\n    ```shell\n    apt install proot proot-distro\n    ```\n>NOTE: <u>然而笔者还是更喜欢在键盘上敲命令，所以选择了远程连接(远程连接到 termux)的方式进行后续操作，当然在远程连接之前的准备工作，还是需要在 termux 中敲命令的。</u>\n## 安装 ubuntu\n* 查看可以安装哪些 linux 版本: `proot-distro list`\n![](./termux-for-android/install-ubuntu.png)\n* 安装linux（笔者选择 Ubuntu 24.04,即 ubuntu, 安装时需要满足能访问github):\n```shell\nproot-distro install ubuntu\n```\n* 启动linux: `proot-distro login ubuntu`\n![](./termux-for-android/login-ubuntu.png)\n## 远程连接到 termux\n1. 让电脑和手机连接同一个局域网\n2. 安装ssh服务器\n```shell\npkg install openssh\n```\n3. 启动ssh\n```shell\nsshd\n```\n4. 查看ip地址、sshd端口号、用户名、密码\n    * 查看用户名：`whoami`\n    * 设置用户密码：`passwd`\n    * 查看ip：`ifconfig 2>&1 | grep -oP \"192\\.168\\.[0-9]+\\.[0-9]+\" | head -n 1`\n    * 设置sshd端口号：`sshd -p 9000`\n5. 在电脑上远程连接:`ssh <user_name>@<ip> -p <port>`, 然后输入密码即可登陆：\n![](./termux-for-android/remote-login.png)\n","slug":"blog/termux-for-android","published":1,"date":"2025-01-20T09:50:59.303Z","updated":"2025-01-20T09:50:59.303Z","_id":"cm64sykf90005vvjx80lscp26","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"在安卓手机中使用linxu虚拟机\"><a href=\"#在安卓手机中使用linxu虚拟机\" class=\"headerlink\" title=\"在安卓手机中使用linxu虚拟机\"></a>在安卓手机中使用linxu虚拟机</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>由于笔者需要，便尝试如何在安卓手机中使用linux虚拟机。步骤如下：</p>\n<ol>\n<li>安装 termux</li>\n<li>在 termux 中安装 proot 和 proot-distro</li>\n<li>使用 proot-distro 安卓 linux 虚拟机</li>\n</ol>\n<h2 id=\"安装-termux\"><a href=\"#安装-termux\" class=\"headerlink\" title=\"安装 termux\"></a>安装 termux</h2><ul>\n<li>进入<a href=\"https://github.com/termux/termux-app\">官网</a></li>\n<li>点击 Releases 查看发行版本</li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/open-web-termux.png\" class=\"\">\n<ul>\n<li>下载适合自己手机的版本,笔者选择如下所示：</li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/install-termux.png\" class=\"\">\n<ul>\n<li>将下载好的 apk 拷贝到手机上，然后点击 apk 文件即可安装,安装好后如图所示：</li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/termux.png\" class=\"\">\n<h2 id=\"安装-proot-和-proot-distro\"><a href=\"#安装-proot-和-proot-distro\" class=\"headerlink\" title=\"安装 proot 和 proot-distro\"></a>安装 proot 和 proot-distro</h2><ul>\n<li>点击打开 termux 软件</li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/open-termux.png\" class=\"\">  \n<ul>\n<li>安装方式<ul>\n<li>pkg 安装</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg upgrade</span><br><span class=\"line\">pkg install proot proot-distro</span><br></pre></td></tr></table></figure>\n<ul>\n<li>apt 安装</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install proot proot-distro</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE: <u>然而笔者还是更喜欢在键盘上敲命令，所以选择了远程连接(远程连接到 termux)的方式进行后续操作，当然在远程连接之前的准备工作，还是需要在 termux 中敲命令的。</u></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"安装-ubuntu\"><a href=\"#安装-ubuntu\" class=\"headerlink\" title=\"安装 ubuntu\"></a>安装 ubuntu</h2><ul>\n<li>查看可以安装哪些 linux 版本: <code>proot-distro list</code></li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/install-ubuntu.png\" class=\"\">\n<ul>\n<li>安装linux（笔者选择 Ubuntu 24.04,即 ubuntu, 安装时需要满足能访问github):</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proot-distro install ubuntu</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动linux: <code>proot-distro login ubuntu</code></li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/login-ubuntu.png\" class=\"\">\n<h2 id=\"远程连接到-termux\"><a href=\"#远程连接到-termux\" class=\"headerlink\" title=\"远程连接到 termux\"></a>远程连接到 termux</h2><ol>\n<li>让电脑和手机连接同一个局域网</li>\n<li>安装ssh服务器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install openssh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>启动ssh</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshd</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看ip地址、sshd端口号、用户名、密码<ul>\n<li>查看用户名：<code>whoami</code></li>\n<li>设置用户密码：<code>passwd</code></li>\n<li>查看ip：<code>ifconfig 2&gt;&amp;1 | grep -oP &quot;192\\.168\\.[0-9]+\\.[0-9]+&quot; | head -n 1</code></li>\n<li>设置sshd端口号：<code>sshd -p 9000</code></li>\n</ul>\n</li>\n<li>在电脑上远程连接:<code>ssh &lt;user_name&gt;@&lt;ip&gt; -p &lt;port&gt;</code>, 然后输入密码即可登陆：</li>\n</ol>\n<img src=\"/undefined/blog/termux-for-android/remote-login.png\" class=\"\">\n","excerpt":"","more":"<h1 id=\"在安卓手机中使用linxu虚拟机\"><a href=\"#在安卓手机中使用linxu虚拟机\" class=\"headerlink\" title=\"在安卓手机中使用linxu虚拟机\"></a>在安卓手机中使用linxu虚拟机</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>由于笔者需要，便尝试如何在安卓手机中使用linux虚拟机。步骤如下：</p>\n<ol>\n<li>安装 termux</li>\n<li>在 termux 中安装 proot 和 proot-distro</li>\n<li>使用 proot-distro 安卓 linux 虚拟机</li>\n</ol>\n<h2 id=\"安装-termux\"><a href=\"#安装-termux\" class=\"headerlink\" title=\"安装 termux\"></a>安装 termux</h2><ul>\n<li>进入<a href=\"https://github.com/termux/termux-app\">官网</a></li>\n<li>点击 Releases 查看发行版本</li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/open-web-termux.png\" class=\"\">\n<ul>\n<li>下载适合自己手机的版本,笔者选择如下所示：</li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/install-termux.png\" class=\"\">\n<ul>\n<li>将下载好的 apk 拷贝到手机上，然后点击 apk 文件即可安装,安装好后如图所示：</li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/termux.png\" class=\"\">\n<h2 id=\"安装-proot-和-proot-distro\"><a href=\"#安装-proot-和-proot-distro\" class=\"headerlink\" title=\"安装 proot 和 proot-distro\"></a>安装 proot 和 proot-distro</h2><ul>\n<li>点击打开 termux 软件</li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/open-termux.png\" class=\"\">  \n<ul>\n<li>安装方式<ul>\n<li>pkg 安装</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg upgrade</span><br><span class=\"line\">pkg install proot proot-distro</span><br></pre></td></tr></table></figure>\n<ul>\n<li>apt 安装</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install proot proot-distro</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>NOTE: <u>然而笔者还是更喜欢在键盘上敲命令，所以选择了远程连接(远程连接到 termux)的方式进行后续操作，当然在远程连接之前的准备工作，还是需要在 termux 中敲命令的。</u></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"安装-ubuntu\"><a href=\"#安装-ubuntu\" class=\"headerlink\" title=\"安装 ubuntu\"></a>安装 ubuntu</h2><ul>\n<li>查看可以安装哪些 linux 版本: <code>proot-distro list</code></li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/install-ubuntu.png\" class=\"\">\n<ul>\n<li>安装linux（笔者选择 Ubuntu 24.04,即 ubuntu, 安装时需要满足能访问github):</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proot-distro install ubuntu</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动linux: <code>proot-distro login ubuntu</code></li>\n</ul>\n<img src=\"/undefined/blog/termux-for-android/login-ubuntu.png\" class=\"\">\n<h2 id=\"远程连接到-termux\"><a href=\"#远程连接到-termux\" class=\"headerlink\" title=\"远程连接到 termux\"></a>远程连接到 termux</h2><ol>\n<li>让电脑和手机连接同一个局域网</li>\n<li>安装ssh服务器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install openssh</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>启动ssh</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshd</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看ip地址、sshd端口号、用户名、密码<ul>\n<li>查看用户名：<code>whoami</code></li>\n<li>设置用户密码：<code>passwd</code></li>\n<li>查看ip：<code>ifconfig 2&gt;&amp;1 | grep -oP &quot;192\\.168\\.[0-9]+\\.[0-9]+&quot; | head -n 1</code></li>\n<li>设置sshd端口号：<code>sshd -p 9000</code></li>\n</ul>\n</li>\n<li>在电脑上远程连接:<code>ssh &lt;user_name&gt;@&lt;ip&gt; -p &lt;port&gt;</code>, 然后输入密码即可登陆：</li>\n</ol>\n<img src=\"/undefined/blog/termux-for-android/remote-login.png\" class=\"\">\n"},{"title":"修改 github昵称和用户名","toc":true,"_content":"# 修改 github昵称和用户名\n刚开始使用 github 的时候，为了方便创建账户，就使用了一个方便注册但不怎么优雅的用户名，后来想改个好一点的，却只是修改了昵称，而不知道如何修改用户名——好吧，是我太蠢了，嘻嘻。今天不经意间看了下，嘿，三下五除二就改好了。\n\n感谢当时的我没耗费太多时间，而是选择了搁置；\n\n感谢今天的我又想起了这回事儿；\n\n感谢这篇博客 [github 修改昵称和用户名][github 修改昵称和用户名]\n\n[github 修改昵称和用户名]: https://cloud.tencent.com/developer/article/1701478\n","source":"_posts/blog/rename-github-account.md","raw":"---\ntitle: 修改 github昵称和用户名\ntoc: true\n---\n# 修改 github昵称和用户名\n刚开始使用 github 的时候，为了方便创建账户，就使用了一个方便注册但不怎么优雅的用户名，后来想改个好一点的，却只是修改了昵称，而不知道如何修改用户名——好吧，是我太蠢了，嘻嘻。今天不经意间看了下，嘿，三下五除二就改好了。\n\n感谢当时的我没耗费太多时间，而是选择了搁置；\n\n感谢今天的我又想起了这回事儿；\n\n感谢这篇博客 [github 修改昵称和用户名][github 修改昵称和用户名]\n\n[github 修改昵称和用户名]: https://cloud.tencent.com/developer/article/1701478\n","slug":"blog/rename-github-account","published":1,"date":"2025-01-20T09:50:59.303Z","updated":"2025-01-20T09:50:59.303Z","_id":"cm64v9a0i0000mqjxbjja5jyd","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"修改-github昵称和用户名\"><a href=\"#修改-github昵称和用户名\" class=\"headerlink\" title=\"修改 github昵称和用户名\"></a>修改 github昵称和用户名</h1><p>刚开始使用 github 的时候，为了方便创建账户，就使用了一个方便注册但不怎么优雅的用户名，后来想改个好一点的，却只是修改了昵称，而不知道如何修改用户名——好吧，是我太蠢了，嘻嘻。今天不经意间看了下，嘿，三下五除二就改好了。</p>\n<p>感谢当时的我没耗费太多时间，而是选择了搁置；</p>\n<p>感谢今天的我又想起了这回事儿；</p>\n<p>感谢这篇博客 <a href=\"https://cloud.tencent.com/developer/article/1701478\">github 修改昵称和用户名</a></p>\n","excerpt":"","more":"<h1 id=\"修改-github昵称和用户名\"><a href=\"#修改-github昵称和用户名\" class=\"headerlink\" title=\"修改 github昵称和用户名\"></a>修改 github昵称和用户名</h1><p>刚开始使用 github 的时候，为了方便创建账户，就使用了一个方便注册但不怎么优雅的用户名，后来想改个好一点的，却只是修改了昵称，而不知道如何修改用户名——好吧，是我太蠢了，嘻嘻。今天不经意间看了下，嘿，三下五除二就改好了。</p>\n<p>感谢当时的我没耗费太多时间，而是选择了搁置；</p>\n<p>感谢今天的我又想起了这回事儿；</p>\n<p>感谢这篇博客 <a href=\"https://cloud.tencent.com/developer/article/1701478\">github 修改昵称和用户名</a></p>\n"},{"_content":"# stady-notes\n学无止境，需要笔记\n","source":"_posts/study-notes/README.md","raw":"# stady-notes\n学无止境，需要笔记\n","slug":"study-notes/README","published":1,"date":"2025-01-30T06:31:16.149Z","updated":"2025-01-30T06:31:16.149Z","_id":"cm6nbsy5q0000uvjxcmuj9242","title":"","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"stady-notes\"><a href=\"#stady-notes\" class=\"headerlink\" title=\"stady-notes\"></a>stady-notes</h1><p>学无止境，需要笔记</p>\n","excerpt":"","more":"<h1 id=\"stady-notes\"><a href=\"#stady-notes\" class=\"headerlink\" title=\"stady-notes\"></a>stady-notes</h1><p>学无止境，需要笔记</p>\n"},{"title":"谷歌搜索技巧","toc":true,"_content":"[toc]\n\n<u>学习差距=信息差+时间投入</u>\n# 网络资源搜索技巧\n## 搜索语法\n* 限定关键词-`\"\"`\n* 限定标题\n    * 限定单个标题-`intile:内容1`\n    * 在标题里面设置限定词-`intile:\"限定词\"`\n    * 限定多个标题内容-`allintitle:内容1 内容2`\n* 限定内容-`intext:`\n* 限定url-`inurl:`\n* 限定网址来源-`site:`\n* 搜索图片\n    * 限定图片大小-`imagesize:1920x1080`\n* 文件格式-`filetype:pdf`\n## 常用网站\n* 国建药品监督管理局\n## 搜索引擎\n* 搜狗搜索：可以用来搜索微信公众号、知乎等内容(腾讯内容资源不易在google中搜索到)\n* 百度:广告多、内容差\n## 网站\n* 搜索同类型网站\n    * similarsites:用于搜索罗列一些同类型的网站\n* 英文论文\n    * 谷歌学术：英文论文期刊\n    * sci-hub:英文论文期刊，特点是免费\n* 电子书\n    * 中文:鸠摩搜书\n    * 英文:\n        * zlibrary\n        * manybooks\n        * pdfbooksworld\n        * kindle\n* 无版权图片网站:pexels\n* ppt模板：islide插件\n* 在线设计网站：canva\n* 在线抠图：remove.bg\n* 脑图：\n    * miro\n    * canva\n* 视频剪辑：\n    * clipchamp\n    * flexclip\n","source":"_posts/study-notes/google_search_tips.md","raw":"---\ntitle: 谷歌搜索技巧 \ntoc: true\n---\n[toc]\n\n<u>学习差距=信息差+时间投入</u>\n# 网络资源搜索技巧\n## 搜索语法\n* 限定关键词-`\"\"`\n* 限定标题\n    * 限定单个标题-`intile:内容1`\n    * 在标题里面设置限定词-`intile:\"限定词\"`\n    * 限定多个标题内容-`allintitle:内容1 内容2`\n* 限定内容-`intext:`\n* 限定url-`inurl:`\n* 限定网址来源-`site:`\n* 搜索图片\n    * 限定图片大小-`imagesize:1920x1080`\n* 文件格式-`filetype:pdf`\n## 常用网站\n* 国建药品监督管理局\n## 搜索引擎\n* 搜狗搜索：可以用来搜索微信公众号、知乎等内容(腾讯内容资源不易在google中搜索到)\n* 百度:广告多、内容差\n## 网站\n* 搜索同类型网站\n    * similarsites:用于搜索罗列一些同类型的网站\n* 英文论文\n    * 谷歌学术：英文论文期刊\n    * sci-hub:英文论文期刊，特点是免费\n* 电子书\n    * 中文:鸠摩搜书\n    * 英文:\n        * zlibrary\n        * manybooks\n        * pdfbooksworld\n        * kindle\n* 无版权图片网站:pexels\n* ppt模板：islide插件\n* 在线设计网站：canva\n* 在线抠图：remove.bg\n* 脑图：\n    * miro\n    * canva\n* 视频剪辑：\n    * clipchamp\n    * flexclip\n","slug":"study-notes/google_search_tips","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nbsy5t0001uvjx9ktz9d2n","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<p><u>学习差距&#x3D;信息差+时间投入</u></p>\n<h1 id=\"网络资源搜索技巧\"><a href=\"#网络资源搜索技巧\" class=\"headerlink\" title=\"网络资源搜索技巧\"></a>网络资源搜索技巧</h1><h2 id=\"搜索语法\"><a href=\"#搜索语法\" class=\"headerlink\" title=\"搜索语法\"></a>搜索语法</h2><ul>\n<li>限定关键词-<code>&quot;&quot;</code></li>\n<li>限定标题<ul>\n<li>限定单个标题-<code>intile:内容1</code></li>\n<li>在标题里面设置限定词-<code>intile:&quot;限定词&quot;</code></li>\n<li>限定多个标题内容-<code>allintitle:内容1 内容2</code></li>\n</ul>\n</li>\n<li>限定内容-<code>intext:</code></li>\n<li>限定url-<code>inurl:</code></li>\n<li>限定网址来源-<code>site:</code></li>\n<li>搜索图片<ul>\n<li>限定图片大小-<code>imagesize:1920x1080</code></li>\n</ul>\n</li>\n<li>文件格式-<code>filetype:pdf</code></li>\n</ul>\n<h2 id=\"常用网站\"><a href=\"#常用网站\" class=\"headerlink\" title=\"常用网站\"></a>常用网站</h2><ul>\n<li>国建药品监督管理局</li>\n</ul>\n<h2 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h2><ul>\n<li>搜狗搜索：可以用来搜索微信公众号、知乎等内容(腾讯内容资源不易在google中搜索到)</li>\n<li>百度:广告多、内容差</li>\n</ul>\n<h2 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h2><ul>\n<li>搜索同类型网站<ul>\n<li>similarsites:用于搜索罗列一些同类型的网站</li>\n</ul>\n</li>\n<li>英文论文<ul>\n<li>谷歌学术：英文论文期刊</li>\n<li>sci-hub:英文论文期刊，特点是免费</li>\n</ul>\n</li>\n<li>电子书<ul>\n<li>中文:鸠摩搜书</li>\n<li>英文:<ul>\n<li>zlibrary</li>\n<li>manybooks</li>\n<li>pdfbooksworld</li>\n<li>kindle</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>无版权图片网站:pexels</li>\n<li>ppt模板：islide插件</li>\n<li>在线设计网站：canva</li>\n<li>在线抠图：remove.bg</li>\n<li>脑图：<ul>\n<li>miro</li>\n<li>canva</li>\n</ul>\n</li>\n<li>视频剪辑：<ul>\n<li>clipchamp</li>\n<li>flexclip</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<p><u>学习差距&#x3D;信息差+时间投入</u></p>\n<h1 id=\"网络资源搜索技巧\"><a href=\"#网络资源搜索技巧\" class=\"headerlink\" title=\"网络资源搜索技巧\"></a>网络资源搜索技巧</h1><h2 id=\"搜索语法\"><a href=\"#搜索语法\" class=\"headerlink\" title=\"搜索语法\"></a>搜索语法</h2><ul>\n<li>限定关键词-<code>&quot;&quot;</code></li>\n<li>限定标题<ul>\n<li>限定单个标题-<code>intile:内容1</code></li>\n<li>在标题里面设置限定词-<code>intile:&quot;限定词&quot;</code></li>\n<li>限定多个标题内容-<code>allintitle:内容1 内容2</code></li>\n</ul>\n</li>\n<li>限定内容-<code>intext:</code></li>\n<li>限定url-<code>inurl:</code></li>\n<li>限定网址来源-<code>site:</code></li>\n<li>搜索图片<ul>\n<li>限定图片大小-<code>imagesize:1920x1080</code></li>\n</ul>\n</li>\n<li>文件格式-<code>filetype:pdf</code></li>\n</ul>\n<h2 id=\"常用网站\"><a href=\"#常用网站\" class=\"headerlink\" title=\"常用网站\"></a>常用网站</h2><ul>\n<li>国建药品监督管理局</li>\n</ul>\n<h2 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h2><ul>\n<li>搜狗搜索：可以用来搜索微信公众号、知乎等内容(腾讯内容资源不易在google中搜索到)</li>\n<li>百度:广告多、内容差</li>\n</ul>\n<h2 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h2><ul>\n<li>搜索同类型网站<ul>\n<li>similarsites:用于搜索罗列一些同类型的网站</li>\n</ul>\n</li>\n<li>英文论文<ul>\n<li>谷歌学术：英文论文期刊</li>\n<li>sci-hub:英文论文期刊，特点是免费</li>\n</ul>\n</li>\n<li>电子书<ul>\n<li>中文:鸠摩搜书</li>\n<li>英文:<ul>\n<li>zlibrary</li>\n<li>manybooks</li>\n<li>pdfbooksworld</li>\n<li>kindle</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>无版权图片网站:pexels</li>\n<li>ppt模板：islide插件</li>\n<li>在线设计网站：canva</li>\n<li>在线抠图：remove.bg</li>\n<li>脑图：<ul>\n<li>miro</li>\n<li>canva</li>\n</ul>\n</li>\n<li>视频剪辑：<ul>\n<li>clipchamp</li>\n<li>flexclip</li>\n</ul>\n</li>\n</ul>\n"},{"title":"markdown 技巧","toc":true,"_content":"[TOC]\n\n# 基础用法\n## 标题\n```Markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n## 引用\n### 显示目录链接\n```Markdown\n[TOC]\n```\n### 链接到指定标题\n```Markdown\n[提示符](#标题名称)\n```\n示例：[跳转到'高级用法'标题](#高级用法)\n### 链接 `[显示的文字](地址)`\n示例：[菜鸟教程](https://www.runoob.com)\n\n### 图片\n用法：\n```Markdown\n![alt 属性文本](图片地址)\n```\n### 变量  \n[度娘][阿度]  \n[阿度]: www.baidu.com\n\n## 正文\n\n### 段落\n行尾敲两个空格：`  `  \n我有一头小毛驴我从来也不骑  \n有一天我心血来潮骑着去赶集\n\n### 首行缩颈\n```Markdown\n&ensp; 半字缩进\n&emsp; 全字缩进\n```\n我和我的祖国，一刻也不能分割(不缩进)  \n&ensp;我和我的祖国，一刻也不能分割(半字缩进)  \n&emsp;我和我的祖国，一刻也不能分割(全字缩进)  \n\n\n### 加粗\n文字加粗：**文字加粗**\n\n### 删除线\n删除线 `~~`  \n~~我有一头小毛驴我从来也不骑~~  \n有一天我心血来潮骑着去赶集\n\n### 下划线  \n下划线 `<u></u>`  \n<u>我有一头小毛驴我从来也不骑</u>\n有一天我心血来潮骑着去赶集\n\n\n## 区块\n### 表格\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n###  列表\n列表 `*`\n* 第一项\n    * 第二项\n        * 第三项\n\n### 区块`>`\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n\n### 代码段\n```javascript\n$(document).ready(function () {\n    alert('RUNOOB');\n});\n```\n\n# 高级用法\n## 注脚\n1. 示例:  \n百度[^baidu]是一家搜索引擎发家的公司，谷歌[^google]也是。\n[^baidu]:国内搜索网站，官网地址为www.baidu.com\n[^google]:国外搜索网站，官网地址为www.google.com\n## 任务列表\n* [x] 吃饭\n* [ ] 睡觉\n* [ ] 打豆豆\n## 横向流程图\n```mermaid\ngraph LR\nA[方形] --> B(圆角)\nB --> C{条件a}\nC -->|a=1| D[结果1]\nC -->|a=2| E[结果2]\nF[横向流程图]\n```\n## 使用 Emoji 表情\n1. 示例：真是笑哭了 :joy:\n2. [Emoji 表情](https://gist.github.com/rxaviers/7360908)查找\n","source":"_posts/study-notes/markdown_usage.md","raw":"---\ntitle: markdown 技巧\ntoc: true\n---\n[TOC]\n\n# 基础用法\n## 标题\n```Markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n## 引用\n### 显示目录链接\n```Markdown\n[TOC]\n```\n### 链接到指定标题\n```Markdown\n[提示符](#标题名称)\n```\n示例：[跳转到'高级用法'标题](#高级用法)\n### 链接 `[显示的文字](地址)`\n示例：[菜鸟教程](https://www.runoob.com)\n\n### 图片\n用法：\n```Markdown\n![alt 属性文本](图片地址)\n```\n### 变量  \n[度娘][阿度]  \n[阿度]: www.baidu.com\n\n## 正文\n\n### 段落\n行尾敲两个空格：`  `  \n我有一头小毛驴我从来也不骑  \n有一天我心血来潮骑着去赶集\n\n### 首行缩颈\n```Markdown\n&ensp; 半字缩进\n&emsp; 全字缩进\n```\n我和我的祖国，一刻也不能分割(不缩进)  \n&ensp;我和我的祖国，一刻也不能分割(半字缩进)  \n&emsp;我和我的祖国，一刻也不能分割(全字缩进)  \n\n\n### 加粗\n文字加粗：**文字加粗**\n\n### 删除线\n删除线 `~~`  \n~~我有一头小毛驴我从来也不骑~~  \n有一天我心血来潮骑着去赶集\n\n### 下划线  \n下划线 `<u></u>`  \n<u>我有一头小毛驴我从来也不骑</u>\n有一天我心血来潮骑着去赶集\n\n\n## 区块\n### 表格\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n###  列表\n列表 `*`\n* 第一项\n    * 第二项\n        * 第三项\n\n### 区块`>`\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n\n### 代码段\n```javascript\n$(document).ready(function () {\n    alert('RUNOOB');\n});\n```\n\n# 高级用法\n## 注脚\n1. 示例:  \n百度[^baidu]是一家搜索引擎发家的公司，谷歌[^google]也是。\n[^baidu]:国内搜索网站，官网地址为www.baidu.com\n[^google]:国外搜索网站，官网地址为www.google.com\n## 任务列表\n* [x] 吃饭\n* [ ] 睡觉\n* [ ] 打豆豆\n## 横向流程图\n```mermaid\ngraph LR\nA[方形] --> B(圆角)\nB --> C{条件a}\nC -->|a=1| D[结果1]\nC -->|a=2| E[结果2]\nF[横向流程图]\n```\n## 使用 Emoji 表情\n1. 示例：真是笑哭了 :joy:\n2. [Emoji 表情](https://gist.github.com/rxaviers/7360908)查找\n","slug":"study-notes/markdown_usage","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nbsy5y0002uvjx85zkdm71","comments":1,"layout":"post","photos":[],"content":"<p>[TOC]</p>\n<h1 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><h3 id=\"显示目录链接\"><a href=\"#显示目录链接\" class=\"headerlink\" title=\"显示目录链接\"></a>显示目录链接</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[TOC]</span><br></pre></td></tr></table></figure>\n<h3 id=\"链接到指定标题\"><a href=\"#链接到指定标题\" class=\"headerlink\" title=\"链接到指定标题\"></a>链接到指定标题</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">提示符</span>](<span class=\"link\">#标题名称</span>)</span><br></pre></td></tr></table></figure>\n<p>示例：<a href=\"#%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95\">跳转到’高级用法’标题</a></p>\n<h3 id=\"链接-显示的文字-地址\"><a href=\"#链接-显示的文字-地址\" class=\"headerlink\" title=\"链接 [显示的文字](地址)\"></a>链接 <code>[显示的文字](地址)</code></h3><p>示例：<a href=\"https://www.runoob.com/\">菜鸟教程</a></p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>用法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% asset_img \"span>\" \"<span class=\"string\">alt 属性文本</span>\" %}</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>[度娘][阿度]<br>[阿度]: <a href=\"http://www.baidu.com/\">www.baidu.com</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h3><p>行尾敲两个空格：<code>  </code><br>我有一头小毛驴我从来也不骑<br>有一天我心血来潮骑着去赶集</p>\n<h3 id=\"首行缩颈\"><a href=\"#首行缩颈\" class=\"headerlink\" title=\"首行缩颈\"></a>首行缩颈</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">&amp;ensp;</span> 半字缩进</span><br><span class=\"line\"><span class=\"literal\">&amp;emsp;</span> 全字缩进</span><br></pre></td></tr></table></figure>\n<p>我和我的祖国，一刻也不能分割(不缩进)<br>&ensp;我和我的祖国，一刻也不能分割(半字缩进)<br>&emsp;我和我的祖国，一刻也不能分割(全字缩进)  </p>\n<h3 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h3><p>文字加粗：<strong>文字加粗</strong></p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>删除线 <code>~~</code><br><del>我有一头小毛驴我从来也不骑</del><br>有一天我心血来潮骑着去赶集</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>下划线 <code>&lt;u&gt;&lt;/u&gt;</code><br><u>我有一头小毛驴我从来也不骑</u><br>有一天我心血来潮骑着去赶集</p>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"right\">右对齐</th>\n<th align=\"center\">居中对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n</tbody></table>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>列表 <code>*</code></p>\n<ul>\n<li>第一项<ul>\n<li>第二项<ul>\n<li>第三项</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"区块-1\"><a href=\"#区块-1\" class=\"headerlink\" title=\"区块&gt;\"></a>区块<code>&gt;</code></h3><blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"代码段\"><a href=\"#代码段\" class=\"headerlink\" title=\"代码段\"></a>代码段</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;RUNOOB&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h1><h2 id=\"注脚\"><a href=\"#注脚\" class=\"headerlink\" title=\"注脚\"></a>注脚</h2><ol>\n<li>示例:<br>百度[^baidu]是一家搜索引擎发家的公司，谷歌[^google]也是。<br>[^baidu]:国内搜索网站，官网地址为<a href=\"http://www.baidu.com/\">www.baidu.com</a><br><br>[^google]:国外搜索网站，官网地址为<a href=\"http://www.google.com/\">www.google.com</a></li>\n</ol>\n<h2 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 吃饭</li>\n<li><input disabled=\"\" type=\"checkbox\"> 睡觉</li>\n<li><input disabled=\"\" type=\"checkbox\"> 打豆豆</li>\n</ul>\n<h2 id=\"横向流程图\"><a href=\"#横向流程图\" class=\"headerlink\" title=\"横向流程图\"></a>横向流程图</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[方形] --&gt; B(圆角)</span><br><span class=\"line\">B --&gt; C&#123;条件a&#125;</span><br><span class=\"line\">C --&gt;|a=1| D[结果1]</span><br><span class=\"line\">C --&gt;|a=2| E[结果2]</span><br><span class=\"line\">F[横向流程图]</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Emoji-表情\"><a href=\"#使用-Emoji-表情\" class=\"headerlink\" title=\"使用 Emoji 表情\"></a>使用 Emoji 表情</h2><ol>\n<li>示例：真是笑哭了 :joy:</li>\n<li><a href=\"https://gist.github.com/rxaviers/7360908\">Emoji 表情</a>查找</li>\n</ol>\n","excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><h3 id=\"显示目录链接\"><a href=\"#显示目录链接\" class=\"headerlink\" title=\"显示目录链接\"></a>显示目录链接</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[TOC]</span><br></pre></td></tr></table></figure>\n<h3 id=\"链接到指定标题\"><a href=\"#链接到指定标题\" class=\"headerlink\" title=\"链接到指定标题\"></a>链接到指定标题</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">提示符</span>](<span class=\"link\">#标题名称</span>)</span><br></pre></td></tr></table></figure>\n<p>示例：<a href=\"#%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95\">跳转到’高级用法’标题</a></p>\n<h3 id=\"链接-显示的文字-地址\"><a href=\"#链接-显示的文字-地址\" class=\"headerlink\" title=\"链接 [显示的文字](地址)\"></a>链接 <code>[显示的文字](地址)</code></h3><p>示例：<a href=\"https://www.runoob.com/\">菜鸟教程</a></p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>用法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% asset_img \"span>\" \"<span class=\"string\">alt 属性文本</span>\" %}</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>[度娘][阿度]<br>[阿度]: <a href=\"http://www.baidu.com/\">www.baidu.com</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h3><p>行尾敲两个空格：<code>  </code><br>我有一头小毛驴我从来也不骑<br>有一天我心血来潮骑着去赶集</p>\n<h3 id=\"首行缩颈\"><a href=\"#首行缩颈\" class=\"headerlink\" title=\"首行缩颈\"></a>首行缩颈</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">&amp;ensp;</span> 半字缩进</span><br><span class=\"line\"><span class=\"literal\">&amp;emsp;</span> 全字缩进</span><br></pre></td></tr></table></figure>\n<p>我和我的祖国，一刻也不能分割(不缩进)<br>&ensp;我和我的祖国，一刻也不能分割(半字缩进)<br>&emsp;我和我的祖国，一刻也不能分割(全字缩进)  </p>\n<h3 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h3><p>文字加粗：<strong>文字加粗</strong></p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>删除线 <code>~~</code><br><del>我有一头小毛驴我从来也不骑</del><br>有一天我心血来潮骑着去赶集</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>下划线 <code>&lt;u&gt;&lt;/u&gt;</code><br><u>我有一头小毛驴我从来也不骑</u><br>有一天我心血来潮骑着去赶集</p>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"right\">右对齐</th>\n<th align=\"center\">居中对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n</tbody></table>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>列表 <code>*</code></p>\n<ul>\n<li>第一项<ul>\n<li>第二项<ul>\n<li>第三项</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"区块-1\"><a href=\"#区块-1\" class=\"headerlink\" title=\"区块&gt;\"></a>区块<code>&gt;</code></h3><blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h3 id=\"代码段\"><a href=\"#代码段\" class=\"headerlink\" title=\"代码段\"></a>代码段</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;RUNOOB&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"高级用法\"><a href=\"#高级用法\" class=\"headerlink\" title=\"高级用法\"></a>高级用法</h1><h2 id=\"注脚\"><a href=\"#注脚\" class=\"headerlink\" title=\"注脚\"></a>注脚</h2><ol>\n<li>示例:<br>百度[^baidu]是一家搜索引擎发家的公司，谷歌[^google]也是。<br>[^baidu]:国内搜索网站，官网地址为<a href=\"http://www.baidu.com/\">www.baidu.com</a><br><br>[^google]:国外搜索网站，官网地址为<a href=\"http://www.google.com/\">www.google.com</a></li>\n</ol>\n<h2 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 吃饭</li>\n<li><input disabled=\"\" type=\"checkbox\"> 睡觉</li>\n<li><input disabled=\"\" type=\"checkbox\"> 打豆豆</li>\n</ul>\n<h2 id=\"横向流程图\"><a href=\"#横向流程图\" class=\"headerlink\" title=\"横向流程图\"></a>横向流程图</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR</span><br><span class=\"line\">A[方形] --&gt; B(圆角)</span><br><span class=\"line\">B --&gt; C&#123;条件a&#125;</span><br><span class=\"line\">C --&gt;|a=1| D[结果1]</span><br><span class=\"line\">C --&gt;|a=2| E[结果2]</span><br><span class=\"line\">F[横向流程图]</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-Emoji-表情\"><a href=\"#使用-Emoji-表情\" class=\"headerlink\" title=\"使用 Emoji 表情\"></a>使用 Emoji 表情</h2><ol>\n<li>示例：真是笑哭了 :joy:</li>\n<li><a href=\"https://gist.github.com/rxaviers/7360908\">Emoji 表情</a>查找</li>\n</ol>\n"},{"title":"neovim 技巧","toc":true,"_content":"[toc]\n\n# 代码跳转\n## 依赖 tag 文件\n* 查看tag栈情况: <tag-!>\n* 回到跳转栈的位置,即栈顶:`:tag`\n* 跳转到定义，即入栈:`<C-]>`\n* 从上次跳转回来,即出栈:`<C-t>`  \n<u>`<C-o>`只是回到上次的位置，而不会改变跳转栈</u>\n* 当定义有多个位置时，查看其列表：`g<c-]>`\n## nvim内置lsp\n# 从meovim的终端模式的输入模式返回到普通模式\n使用快捷键:`<c-\\><c-n>`\n# 行模式修改内容\n* **当前文件** 中 **全局** 内容修改:`:%s/<pattern1>/<pattern2>/g`\n* **当前行** 中 **全局** 内容修改:`:s/<pattern1>/<pattern2>/g`\n* **当前文件** 中 **每行首次匹配** 内容修改:`:%s/<pattern1>/<pattern2>/`\n* **当前行** 中 **首次匹配** 内容修改:`:s/<pattern1>/<pattern2>/`\n","source":"_posts/study-notes/nvim_tips.md","raw":"---\ntitle: neovim 技巧\ntoc: true\n---\n[toc]\n\n# 代码跳转\n## 依赖 tag 文件\n* 查看tag栈情况: <tag-!>\n* 回到跳转栈的位置,即栈顶:`:tag`\n* 跳转到定义，即入栈:`<C-]>`\n* 从上次跳转回来,即出栈:`<C-t>`  \n<u>`<C-o>`只是回到上次的位置，而不会改变跳转栈</u>\n* 当定义有多个位置时，查看其列表：`g<c-]>`\n## nvim内置lsp\n# 从meovim的终端模式的输入模式返回到普通模式\n使用快捷键:`<c-\\><c-n>`\n# 行模式修改内容\n* **当前文件** 中 **全局** 内容修改:`:%s/<pattern1>/<pattern2>/g`\n* **当前行** 中 **全局** 内容修改:`:s/<pattern1>/<pattern2>/g`\n* **当前文件** 中 **每行首次匹配** 内容修改:`:%s/<pattern1>/<pattern2>/`\n* **当前行** 中 **首次匹配** 内容修改:`:s/<pattern1>/<pattern2>/`\n","slug":"study-notes/nvim_tips","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nbsy5z0003uvjx90ze1dty","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"代码跳转\"><a href=\"#代码跳转\" class=\"headerlink\" title=\"代码跳转\"></a>代码跳转</h1><h2 id=\"依赖-tag-文件\"><a href=\"#依赖-tag-文件\" class=\"headerlink\" title=\"依赖 tag 文件\"></a>依赖 tag 文件</h2><ul>\n<li>查看tag栈情况: &lt;tag-!&gt;</li>\n<li>回到跳转栈的位置,即栈顶:<code>:tag</code></li>\n<li>跳转到定义，即入栈:<code>&lt;C-]&gt;</code></li>\n<li>从上次跳转回来,即出栈:<code>&lt;C-t&gt;</code></li>\n</ul>\n<p><u><code>&lt;C-o&gt;</code>只是回到上次的位置，而不会改变跳转栈</u></p>\n<ul>\n<li>当定义有多个位置时，查看其列表：<code>g&lt;c-]&gt;</code></li>\n</ul>\n<h2 id=\"nvim内置lsp\"><a href=\"#nvim内置lsp\" class=\"headerlink\" title=\"nvim内置lsp\"></a>nvim内置lsp</h2><h1 id=\"从meovim的终端模式的输入模式返回到普通模式\"><a href=\"#从meovim的终端模式的输入模式返回到普通模式\" class=\"headerlink\" title=\"从meovim的终端模式的输入模式返回到普通模式\"></a>从meovim的终端模式的输入模式返回到普通模式</h1><p>使用快捷键:<code>&lt;c-\\&gt;&lt;c-n&gt;</code></p>\n<h1 id=\"行模式修改内容\"><a href=\"#行模式修改内容\" class=\"headerlink\" title=\"行模式修改内容\"></a>行模式修改内容</h1><ul>\n<li><strong>当前文件</strong> 中 <strong>全局</strong> 内容修改:<code>:%s/&lt;pattern1&gt;/&lt;pattern2&gt;/g</code></li>\n<li><strong>当前行</strong> 中 <strong>全局</strong> 内容修改:<code>:s/&lt;pattern1&gt;/&lt;pattern2&gt;/g</code></li>\n<li><strong>当前文件</strong> 中 <strong>每行首次匹配</strong> 内容修改:<code>:%s/&lt;pattern1&gt;/&lt;pattern2&gt;/</code></li>\n<li><strong>当前行</strong> 中 <strong>首次匹配</strong> 内容修改:<code>:s/&lt;pattern1&gt;/&lt;pattern2&gt;/</code></li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"代码跳转\"><a href=\"#代码跳转\" class=\"headerlink\" title=\"代码跳转\"></a>代码跳转</h1><h2 id=\"依赖-tag-文件\"><a href=\"#依赖-tag-文件\" class=\"headerlink\" title=\"依赖 tag 文件\"></a>依赖 tag 文件</h2><ul>\n<li>查看tag栈情况: &lt;tag-!&gt;</li>\n<li>回到跳转栈的位置,即栈顶:<code>:tag</code></li>\n<li>跳转到定义，即入栈:<code>&lt;C-]&gt;</code></li>\n<li>从上次跳转回来,即出栈:<code>&lt;C-t&gt;</code></li>\n</ul>\n<p><u><code>&lt;C-o&gt;</code>只是回到上次的位置，而不会改变跳转栈</u></p>\n<ul>\n<li>当定义有多个位置时，查看其列表：<code>g&lt;c-]&gt;</code></li>\n</ul>\n<h2 id=\"nvim内置lsp\"><a href=\"#nvim内置lsp\" class=\"headerlink\" title=\"nvim内置lsp\"></a>nvim内置lsp</h2><h1 id=\"从meovim的终端模式的输入模式返回到普通模式\"><a href=\"#从meovim的终端模式的输入模式返回到普通模式\" class=\"headerlink\" title=\"从meovim的终端模式的输入模式返回到普通模式\"></a>从meovim的终端模式的输入模式返回到普通模式</h1><p>使用快捷键:<code>&lt;c-\\&gt;&lt;c-n&gt;</code></p>\n<h1 id=\"行模式修改内容\"><a href=\"#行模式修改内容\" class=\"headerlink\" title=\"行模式修改内容\"></a>行模式修改内容</h1><ul>\n<li><strong>当前文件</strong> 中 <strong>全局</strong> 内容修改:<code>:%s/&lt;pattern1&gt;/&lt;pattern2&gt;/g</code></li>\n<li><strong>当前行</strong> 中 <strong>全局</strong> 内容修改:<code>:s/&lt;pattern1&gt;/&lt;pattern2&gt;/g</code></li>\n<li><strong>当前文件</strong> 中 <strong>每行首次匹配</strong> 内容修改:<code>:%s/&lt;pattern1&gt;/&lt;pattern2&gt;/</code></li>\n<li><strong>当前行</strong> 中 <strong>首次匹配</strong> 内容修改:<code>:s/&lt;pattern1&gt;/&lt;pattern2&gt;/</code></li>\n</ul>\n"},{"title":"终端控制","toc":true,"_content":"# VT100\n借助 VT100 控制码，实现花里胡哨的终端界面  \n博客：https://www.cnblogs.com/zengjfgit/p/4373564.html\n","source":"_posts/study-notes/terminal_control.md","raw":"---\ntitle: 终端控制\ntoc: true\n---\n# VT100\n借助 VT100 控制码，实现花里胡哨的终端界面  \n博客：https://www.cnblogs.com/zengjfgit/p/4373564.html\n","slug":"study-notes/terminal_control","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nbsy610004uvjxdkkh7ik4","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"VT100\"><a href=\"#VT100\" class=\"headerlink\" title=\"VT100\"></a>VT100</h1><p>借助 VT100 控制码，实现花里胡哨的终端界面<br>博客：<a href=\"https://www.cnblogs.com/zengjfgit/p/4373564.html\">https://www.cnblogs.com/zengjfgit/p/4373564.html</a></p>\n","excerpt":"","more":"<h1 id=\"VT100\"><a href=\"#VT100\" class=\"headerlink\" title=\"VT100\"></a>VT100</h1><p>借助 VT100 控制码，实现花里胡哨的终端界面<br>博客：<a href=\"https://www.cnblogs.com/zengjfgit/p/4373564.html\">https://www.cnblogs.com/zengjfgit/p/4373564.html</a></p>\n"},{"title":"I think","toc":true,"_content":"[toc]\n# 嵌入式开发中的地址\n## 嵌入式硬件的地址\n在嵌入式中总要和地址打交道，但影响地址的因素是什么呢?\n\n### flash 和 ram 的地址和大小\n* flash的地址和大小  \n编译好的固件是要烧写到 flash 中的，而决定 flash 的起始地址和大小的是芯片厂商。  \n厂商会决定指定型号的芯片使用多大的 flash ，也就会设定该 flash 的起始地址和大小。\n* ram 的地址和大小  \n要想程序运行，就需要把必要的数据加载到 ram 中，在此之前必定要先知道 ram 的大小和位置，和flash 一样，ram 的起始地址和大小也是由芯片厂商决定的。\n# 开发板上电后的执行位置\n开发版上电之后从哪儿里开始执行呢？\n## 从不同位置启动程序\n芯片厂商通常会根据具体芯片的设计需要，设置一种或多种启动方式。例如从内部 flash 启动。此时芯片上电之后将从内部的 flash 寻找程序开始执行。\n\n通常来说， 如果没有对内部 flash 划分时，将从 flah 的起始地址开始执行。\n## 根据芯片配置固件\n在芯片层面确定了启动位置之后，那么就需要在链接生产固件时通过连接脚本指定必要的硬件信息(例如 flash 在哪，ram 在哪等等)和固件被烧录的位置。\n\n链接脚本举例:\n```\nMEMORY\n{\n    FLASH (rx) : ORIGIN = 0x08000000, LENGTH = 128K\n    RAM (rwx)  : ORIGIN = 0x20000000, LENGTH = 32K\n}\n\nSECTIONS\n{\n    .text : { *(.text*) } > FLASH\n    .data : { *(.data*) } > RAM AT > FLASH\n    .bss  : { *(.bss*)  } > RAM\n}\n```\n","source":"_posts/study-notes/embedded/I_think.md","raw":"---\ntitle: I think\ntoc: true\n---\n[toc]\n# 嵌入式开发中的地址\n## 嵌入式硬件的地址\n在嵌入式中总要和地址打交道，但影响地址的因素是什么呢?\n\n### flash 和 ram 的地址和大小\n* flash的地址和大小  \n编译好的固件是要烧写到 flash 中的，而决定 flash 的起始地址和大小的是芯片厂商。  \n厂商会决定指定型号的芯片使用多大的 flash ，也就会设定该 flash 的起始地址和大小。\n* ram 的地址和大小  \n要想程序运行，就需要把必要的数据加载到 ram 中，在此之前必定要先知道 ram 的大小和位置，和flash 一样，ram 的起始地址和大小也是由芯片厂商决定的。\n# 开发板上电后的执行位置\n开发版上电之后从哪儿里开始执行呢？\n## 从不同位置启动程序\n芯片厂商通常会根据具体芯片的设计需要，设置一种或多种启动方式。例如从内部 flash 启动。此时芯片上电之后将从内部的 flash 寻找程序开始执行。\n\n通常来说， 如果没有对内部 flash 划分时，将从 flah 的起始地址开始执行。\n## 根据芯片配置固件\n在芯片层面确定了启动位置之后，那么就需要在链接生产固件时通过连接脚本指定必要的硬件信息(例如 flash 在哪，ram 在哪等等)和固件被烧录的位置。\n\n链接脚本举例:\n```\nMEMORY\n{\n    FLASH (rx) : ORIGIN = 0x08000000, LENGTH = 128K\n    RAM (rwx)  : ORIGIN = 0x20000000, LENGTH = 32K\n}\n\nSECTIONS\n{\n    .text : { *(.text*) } > FLASH\n    .data : { *(.data*) } > RAM AT > FLASH\n    .bss  : { *(.bss*)  } > RAM\n}\n```\n","slug":"study-notes/embedded/I_think","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nbsy650007uvjx3yczgvuk","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"嵌入式开发中的地址\"><a href=\"#嵌入式开发中的地址\" class=\"headerlink\" title=\"嵌入式开发中的地址\"></a>嵌入式开发中的地址</h1><h2 id=\"嵌入式硬件的地址\"><a href=\"#嵌入式硬件的地址\" class=\"headerlink\" title=\"嵌入式硬件的地址\"></a>嵌入式硬件的地址</h2><p>在嵌入式中总要和地址打交道，但影响地址的因素是什么呢?</p>\n<h3 id=\"flash-和-ram-的地址和大小\"><a href=\"#flash-和-ram-的地址和大小\" class=\"headerlink\" title=\"flash 和 ram 的地址和大小\"></a>flash 和 ram 的地址和大小</h3><ul>\n<li>flash的地址和大小<br>编译好的固件是要烧写到 flash 中的，而决定 flash 的起始地址和大小的是芯片厂商。<br>厂商会决定指定型号的芯片使用多大的 flash ，也就会设定该 flash 的起始地址和大小。</li>\n<li>ram 的地址和大小<br>要想程序运行，就需要把必要的数据加载到 ram 中，在此之前必定要先知道 ram 的大小和位置，和flash 一样，ram 的起始地址和大小也是由芯片厂商决定的。</li>\n</ul>\n<h1 id=\"开发板上电后的执行位置\"><a href=\"#开发板上电后的执行位置\" class=\"headerlink\" title=\"开发板上电后的执行位置\"></a>开发板上电后的执行位置</h1><p>开发版上电之后从哪儿里开始执行呢？</p>\n<h2 id=\"从不同位置启动程序\"><a href=\"#从不同位置启动程序\" class=\"headerlink\" title=\"从不同位置启动程序\"></a>从不同位置启动程序</h2><p>芯片厂商通常会根据具体芯片的设计需要，设置一种或多种启动方式。例如从内部 flash 启动。此时芯片上电之后将从内部的 flash 寻找程序开始执行。</p>\n<p>通常来说， 如果没有对内部 flash 划分时，将从 flah 的起始地址开始执行。</p>\n<h2 id=\"根据芯片配置固件\"><a href=\"#根据芯片配置固件\" class=\"headerlink\" title=\"根据芯片配置固件\"></a>根据芯片配置固件</h2><p>在芯片层面确定了启动位置之后，那么就需要在链接生产固件时通过连接脚本指定必要的硬件信息(例如 flash 在哪，ram 在哪等等)和固件被烧录的位置。</p>\n<p>链接脚本举例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MEMORY</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FLASH (rx) : ORIGIN = 0x08000000, LENGTH = 128K</span><br><span class=\"line\">    RAM (rwx)  : ORIGIN = 0x20000000, LENGTH = 32K</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SECTIONS</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .text : &#123; *(.text*) &#125; &gt; FLASH</span><br><span class=\"line\">    .data : &#123; *(.data*) &#125; &gt; RAM AT &gt; FLASH</span><br><span class=\"line\">    .bss  : &#123; *(.bss*)  &#125; &gt; RAM</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"嵌入式开发中的地址\"><a href=\"#嵌入式开发中的地址\" class=\"headerlink\" title=\"嵌入式开发中的地址\"></a>嵌入式开发中的地址</h1><h2 id=\"嵌入式硬件的地址\"><a href=\"#嵌入式硬件的地址\" class=\"headerlink\" title=\"嵌入式硬件的地址\"></a>嵌入式硬件的地址</h2><p>在嵌入式中总要和地址打交道，但影响地址的因素是什么呢?</p>\n<h3 id=\"flash-和-ram-的地址和大小\"><a href=\"#flash-和-ram-的地址和大小\" class=\"headerlink\" title=\"flash 和 ram 的地址和大小\"></a>flash 和 ram 的地址和大小</h3><ul>\n<li>flash的地址和大小<br>编译好的固件是要烧写到 flash 中的，而决定 flash 的起始地址和大小的是芯片厂商。<br>厂商会决定指定型号的芯片使用多大的 flash ，也就会设定该 flash 的起始地址和大小。</li>\n<li>ram 的地址和大小<br>要想程序运行，就需要把必要的数据加载到 ram 中，在此之前必定要先知道 ram 的大小和位置，和flash 一样，ram 的起始地址和大小也是由芯片厂商决定的。</li>\n</ul>\n<h1 id=\"开发板上电后的执行位置\"><a href=\"#开发板上电后的执行位置\" class=\"headerlink\" title=\"开发板上电后的执行位置\"></a>开发板上电后的执行位置</h1><p>开发版上电之后从哪儿里开始执行呢？</p>\n<h2 id=\"从不同位置启动程序\"><a href=\"#从不同位置启动程序\" class=\"headerlink\" title=\"从不同位置启动程序\"></a>从不同位置启动程序</h2><p>芯片厂商通常会根据具体芯片的设计需要，设置一种或多种启动方式。例如从内部 flash 启动。此时芯片上电之后将从内部的 flash 寻找程序开始执行。</p>\n<p>通常来说， 如果没有对内部 flash 划分时，将从 flah 的起始地址开始执行。</p>\n<h2 id=\"根据芯片配置固件\"><a href=\"#根据芯片配置固件\" class=\"headerlink\" title=\"根据芯片配置固件\"></a>根据芯片配置固件</h2><p>在芯片层面确定了启动位置之后，那么就需要在链接生产固件时通过连接脚本指定必要的硬件信息(例如 flash 在哪，ram 在哪等等)和固件被烧录的位置。</p>\n<p>链接脚本举例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MEMORY</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FLASH (rx) : ORIGIN = 0x08000000, LENGTH = 128K</span><br><span class=\"line\">    RAM (rwx)  : ORIGIN = 0x20000000, LENGTH = 32K</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SECTIONS</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    .text : &#123; *(.text*) &#125; &gt; FLASH</span><br><span class=\"line\">    .data : &#123; *(.data*) &#125; &gt; RAM AT &gt; FLASH</span><br><span class=\"line\">    .bss  : &#123; *(.bss*)  &#125; &gt; RAM</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"sed","toc":true,"_content":"[toc]\n\n# sed 作用  \n    1. sed 是一种流编辑器，它一次处理一行内容;\n    2. 处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（patternspace ），接着用sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环;\n    3. 如果没有使诸如‘D’ 的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾;\n    4. 文件内容并没有改变，除非使用重定向存储输出或-i。\n\n# 语法\n```shell\nsed [options] '[地址界定] command' file(s)\n```\n* 参数说明：\n    * -n：不输出模式空间内容到屏幕，即不自动打印，只打印匹配到的行\n    * -e：多点编辑，对每行处理时，可以有多个Script\n    * -f：把Script写到文件当中，在执行sed时-f 指定文件路径，如果是多个Script，换行写\n    * -r：支持扩展的正则表达式\n    * -i：直接将处理的结果写入文件\n    * -i.bak：在将处理的结果写入文件之前备份一份\n\n* 地址界定\n    * 不给地址：对全文进行处理\n    * 单地址：\n        * #: 指定的行\n        * /pattern/：被此处模式所能够匹配到的每一行\n    * 地址范围：\n        * #,#\n        * #,+#\n        * /pat1/,/pat2/\n        * #,/pat1/\n    * ~：步进\n        * sed -n '1~2p'  只打印奇数行 （1~2 从第1行，一次加2行）\n        * sed -n '2~2p'  只打印偶数行\n\n* command：\n    * d：删除模式空间匹配的行，并立即启用下一轮循环\n    * p：打印当前模式空间内容，追加到默认输出之后\n    * a：在指定行后面追加文本，支持使用\\n实现多行追加\n    * i：在行前面插入文本，支持使用\\n实现多行追加\n    * c：替换行为单行或多行文本，支持使用\\n实现多行追加\n    * w：保存模式匹配的行至指定文件\n    * r：读取指定文件的文本至模式空间中匹配到的行后\n    * =：为模式空间中的行打印行号\n    * !：模式空间中匹配行取反处理\n    * s///：查找替换，支持使用其它分隔符，如：s@@@，s###；\n        * 加g表示行内全局替换；\n        * 在替换时，可以加一下命令，实现大小写转换\n        * \\l：把下个字符转换成小写。\n        * \\L：把replacement字母转换成小写，直到\\U或\\E出现。\n        * \\u：把下个字符转换成大写。\n        * \\U：把replacement字母转换成大写，直到\\L或\\E出现。\n        * \\E：停止以\\L或\\U开始的大小写转换\n\n# 常用需求\n修改指定目录下所有文件中匹配到内容：\n```shell\ngrep -rl \"pattern\" dirname | xargs sed -i \"s/string_before/string_affter/g\"\n```\n","source":"_posts/study-notes/file_operations/sed.md","raw":"---\ntitle: sed\ntoc: true\n---\n[toc]\n\n# sed 作用  \n    1. sed 是一种流编辑器，它一次处理一行内容;\n    2. 处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（patternspace ），接着用sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环;\n    3. 如果没有使诸如‘D’ 的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾;\n    4. 文件内容并没有改变，除非使用重定向存储输出或-i。\n\n# 语法\n```shell\nsed [options] '[地址界定] command' file(s)\n```\n* 参数说明：\n    * -n：不输出模式空间内容到屏幕，即不自动打印，只打印匹配到的行\n    * -e：多点编辑，对每行处理时，可以有多个Script\n    * -f：把Script写到文件当中，在执行sed时-f 指定文件路径，如果是多个Script，换行写\n    * -r：支持扩展的正则表达式\n    * -i：直接将处理的结果写入文件\n    * -i.bak：在将处理的结果写入文件之前备份一份\n\n* 地址界定\n    * 不给地址：对全文进行处理\n    * 单地址：\n        * #: 指定的行\n        * /pattern/：被此处模式所能够匹配到的每一行\n    * 地址范围：\n        * #,#\n        * #,+#\n        * /pat1/,/pat2/\n        * #,/pat1/\n    * ~：步进\n        * sed -n '1~2p'  只打印奇数行 （1~2 从第1行，一次加2行）\n        * sed -n '2~2p'  只打印偶数行\n\n* command：\n    * d：删除模式空间匹配的行，并立即启用下一轮循环\n    * p：打印当前模式空间内容，追加到默认输出之后\n    * a：在指定行后面追加文本，支持使用\\n实现多行追加\n    * i：在行前面插入文本，支持使用\\n实现多行追加\n    * c：替换行为单行或多行文本，支持使用\\n实现多行追加\n    * w：保存模式匹配的行至指定文件\n    * r：读取指定文件的文本至模式空间中匹配到的行后\n    * =：为模式空间中的行打印行号\n    * !：模式空间中匹配行取反处理\n    * s///：查找替换，支持使用其它分隔符，如：s@@@，s###；\n        * 加g表示行内全局替换；\n        * 在替换时，可以加一下命令，实现大小写转换\n        * \\l：把下个字符转换成小写。\n        * \\L：把replacement字母转换成小写，直到\\U或\\E出现。\n        * \\u：把下个字符转换成大写。\n        * \\U：把replacement字母转换成大写，直到\\L或\\E出现。\n        * \\E：停止以\\L或\\U开始的大小写转换\n\n# 常用需求\n修改指定目录下所有文件中匹配到内容：\n```shell\ngrep -rl \"pattern\" dirname | xargs sed -i \"s/string_before/string_affter/g\"\n```\n","slug":"study-notes/file_operations/sed","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nbsy670008uvjxfgx9dnvg","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"sed-作用\"><a href=\"#sed-作用\" class=\"headerlink\" title=\"sed 作用\"></a>sed 作用</h1><pre><code>1. sed 是一种流编辑器，它一次处理一行内容;\n2. 处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（patternspace ），接着用sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环;\n3. 如果没有使诸如‘D’ 的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾;\n4. 文件内容并没有改变，除非使用重定向存储输出或-i。\n</code></pre>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed [options] &#x27;[地址界定] command&#x27; file(s)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>参数说明：</p>\n<ul>\n<li>-n：不输出模式空间内容到屏幕，即不自动打印，只打印匹配到的行</li>\n<li>-e：多点编辑，对每行处理时，可以有多个Script</li>\n<li>-f：把Script写到文件当中，在执行sed时-f 指定文件路径，如果是多个Script，换行写</li>\n<li>-r：支持扩展的正则表达式</li>\n<li>-i：直接将处理的结果写入文件</li>\n<li>-i.bak：在将处理的结果写入文件之前备份一份</li>\n</ul>\n</li>\n<li><p>地址界定</p>\n<ul>\n<li>不给地址：对全文进行处理</li>\n<li>单地址：<ul>\n<li>#: 指定的行</li>\n<li>&#x2F;pattern&#x2F;：被此处模式所能够匹配到的每一行</li>\n</ul>\n</li>\n<li>地址范围：<ul>\n<li>#,#</li>\n<li>#,+#</li>\n<li>&#x2F;pat1&#x2F;,&#x2F;pat2&#x2F;</li>\n<li>#,&#x2F;pat1&#x2F;</li>\n</ul>\n</li>\n<li>~：步进<ul>\n<li>sed -n ‘1<del>2p’  只打印奇数行 （1</del>2 从第1行，一次加2行）</li>\n<li>sed -n ‘2~2p’  只打印偶数行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>command：</p>\n<ul>\n<li>d：删除模式空间匹配的行，并立即启用下一轮循环</li>\n<li>p：打印当前模式空间内容，追加到默认输出之后</li>\n<li>a：在指定行后面追加文本，支持使用\\n实现多行追加</li>\n<li>i：在行前面插入文本，支持使用\\n实现多行追加</li>\n<li>c：替换行为单行或多行文本，支持使用\\n实现多行追加</li>\n<li>w：保存模式匹配的行至指定文件</li>\n<li>r：读取指定文件的文本至模式空间中匹配到的行后</li>\n<li>&#x3D;：为模式空间中的行打印行号</li>\n<li>!：模式空间中匹配行取反处理</li>\n<li>s&#x2F;&#x2F;&#x2F;：查找替换，支持使用其它分隔符，如：s@@@，s###；<ul>\n<li>加g表示行内全局替换；</li>\n<li>在替换时，可以加一下命令，实现大小写转换</li>\n<li>\\l：把下个字符转换成小写。</li>\n<li>\\L：把replacement字母转换成小写，直到\\U或\\E出现。</li>\n<li>\\u：把下个字符转换成大写。</li>\n<li>\\U：把replacement字母转换成大写，直到\\L或\\E出现。</li>\n<li>\\E：停止以\\L或\\U开始的大小写转换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"常用需求\"><a href=\"#常用需求\" class=\"headerlink\" title=\"常用需求\"></a>常用需求</h1><p>修改指定目录下所有文件中匹配到内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -rl &quot;pattern&quot; dirname | xargs sed -i &quot;s/string_before/string_affter/g&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"sed-作用\"><a href=\"#sed-作用\" class=\"headerlink\" title=\"sed 作用\"></a>sed 作用</h1><pre><code>1. sed 是一种流编辑器，它一次处理一行内容;\n2. 处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（patternspace ），接着用sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环;\n3. 如果没有使诸如‘D’ 的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾;\n4. 文件内容并没有改变，除非使用重定向存储输出或-i。\n</code></pre>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed [options] &#x27;[地址界定] command&#x27; file(s)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>参数说明：</p>\n<ul>\n<li>-n：不输出模式空间内容到屏幕，即不自动打印，只打印匹配到的行</li>\n<li>-e：多点编辑，对每行处理时，可以有多个Script</li>\n<li>-f：把Script写到文件当中，在执行sed时-f 指定文件路径，如果是多个Script，换行写</li>\n<li>-r：支持扩展的正则表达式</li>\n<li>-i：直接将处理的结果写入文件</li>\n<li>-i.bak：在将处理的结果写入文件之前备份一份</li>\n</ul>\n</li>\n<li><p>地址界定</p>\n<ul>\n<li>不给地址：对全文进行处理</li>\n<li>单地址：<ul>\n<li>#: 指定的行</li>\n<li>&#x2F;pattern&#x2F;：被此处模式所能够匹配到的每一行</li>\n</ul>\n</li>\n<li>地址范围：<ul>\n<li>#,#</li>\n<li>#,+#</li>\n<li>&#x2F;pat1&#x2F;,&#x2F;pat2&#x2F;</li>\n<li>#,&#x2F;pat1&#x2F;</li>\n</ul>\n</li>\n<li>~：步进<ul>\n<li>sed -n ‘1<del>2p’  只打印奇数行 （1</del>2 从第1行，一次加2行）</li>\n<li>sed -n ‘2~2p’  只打印偶数行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>command：</p>\n<ul>\n<li>d：删除模式空间匹配的行，并立即启用下一轮循环</li>\n<li>p：打印当前模式空间内容，追加到默认输出之后</li>\n<li>a：在指定行后面追加文本，支持使用\\n实现多行追加</li>\n<li>i：在行前面插入文本，支持使用\\n实现多行追加</li>\n<li>c：替换行为单行或多行文本，支持使用\\n实现多行追加</li>\n<li>w：保存模式匹配的行至指定文件</li>\n<li>r：读取指定文件的文本至模式空间中匹配到的行后</li>\n<li>&#x3D;：为模式空间中的行打印行号</li>\n<li>!：模式空间中匹配行取反处理</li>\n<li>s&#x2F;&#x2F;&#x2F;：查找替换，支持使用其它分隔符，如：s@@@，s###；<ul>\n<li>加g表示行内全局替换；</li>\n<li>在替换时，可以加一下命令，实现大小写转换</li>\n<li>\\l：把下个字符转换成小写。</li>\n<li>\\L：把replacement字母转换成小写，直到\\U或\\E出现。</li>\n<li>\\u：把下个字符转换成大写。</li>\n<li>\\U：把replacement字母转换成大写，直到\\L或\\E出现。</li>\n<li>\\E：停止以\\L或\\U开始的大小写转换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"常用需求\"><a href=\"#常用需求\" class=\"headerlink\" title=\"常用需求\"></a>常用需求</h1><p>修改指定目录下所有文件中匹配到内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -rl &quot;pattern&quot; dirname | xargs sed -i &quot;s/string_before/string_affter/g&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"git","toc":true,"_content":"[toc]\n\n# git 基础\n## 简介\n## git 的三种状态\n* 工作区\n\n已经修改了仓库中的文件但尚未提交到数据库,即没有使用 `git add ` 命令\n\n* 暂存区\n\n将当前修改标记为进入下一个提交的快照 ,即使用了 `git add ` 命令\n\n* 本地仓库\n\n将修改的数据存储在了本地数据库中\n\n## 处理工作区中的内容\n* 清理未跟踪的文件 && 目录: `git clean -f -d`\n* 清理工作区的修改: `git checkout .`\n## 处理暂存区中的内容\n* 1. 将暂存区的内容回退到工作区\n```shell\ngit reset .\n```\n## 处理本地仓库中的内容\n\n## 子模块——submodule\n* 在主仓库库中添加子模块\n```shell\ngit submodule add <子仓库的url> <在主仓库中的位置>\n```\n\n* 在主仓库库中移除子模块\n```shell\n# 取消注册\ngit submodule deinit <在主仓库中的位置>\n# 移除\ngit rm <在主仓库中的位置>\n```\n\n* 在主仓库库中更新子模块\n    * 方法1\n    ```shell\n    # 更新所有子模块\n    cd <submodule-name>\n    git pull\n    cd -\n    git submodule --merge\n    # 将对子模块的更新(patch跟踪)在主仓库中提交\n    git add .\n    git commit -m \"commit info\"\n    ```\n    * 方法2\n    ```shell\n    # 更新所有子模块\n    git submodule update --remote\n    # 将对子模块的更新(patch跟踪)在主仓库中提交\n    git add .\n    git commit -m \"commit info\"\n    ```\n","source":"_posts/study-notes/version_control/git.md","raw":"---\ntitle: git\ntoc: true\n---\n[toc]\n\n# git 基础\n## 简介\n## git 的三种状态\n* 工作区\n\n已经修改了仓库中的文件但尚未提交到数据库,即没有使用 `git add ` 命令\n\n* 暂存区\n\n将当前修改标记为进入下一个提交的快照 ,即使用了 `git add ` 命令\n\n* 本地仓库\n\n将修改的数据存储在了本地数据库中\n\n## 处理工作区中的内容\n* 清理未跟踪的文件 && 目录: `git clean -f -d`\n* 清理工作区的修改: `git checkout .`\n## 处理暂存区中的内容\n* 1. 将暂存区的内容回退到工作区\n```shell\ngit reset .\n```\n## 处理本地仓库中的内容\n\n## 子模块——submodule\n* 在主仓库库中添加子模块\n```shell\ngit submodule add <子仓库的url> <在主仓库中的位置>\n```\n\n* 在主仓库库中移除子模块\n```shell\n# 取消注册\ngit submodule deinit <在主仓库中的位置>\n# 移除\ngit rm <在主仓库中的位置>\n```\n\n* 在主仓库库中更新子模块\n    * 方法1\n    ```shell\n    # 更新所有子模块\n    cd <submodule-name>\n    git pull\n    cd -\n    git submodule --merge\n    # 将对子模块的更新(patch跟踪)在主仓库中提交\n    git add .\n    git commit -m \"commit info\"\n    ```\n    * 方法2\n    ```shell\n    # 更新所有子模块\n    git submodule update --remote\n    # 将对子模块的更新(patch跟踪)在主仓库中提交\n    git add .\n    git commit -m \"commit info\"\n    ```\n","slug":"study-notes/version_control/git","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nbsy690009uvjx9woy1oqx","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"git-基础\"><a href=\"#git-基础\" class=\"headerlink\" title=\"git 基础\"></a>git 基础</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"git-的三种状态\"><a href=\"#git-的三种状态\" class=\"headerlink\" title=\"git 的三种状态\"></a>git 的三种状态</h2><ul>\n<li>工作区</li>\n</ul>\n<p>已经修改了仓库中的文件但尚未提交到数据库,即没有使用 <code>git add </code> 命令</p>\n<ul>\n<li>暂存区</li>\n</ul>\n<p>将当前修改标记为进入下一个提交的快照 ,即使用了 <code>git add </code> 命令</p>\n<ul>\n<li>本地仓库</li>\n</ul>\n<p>将修改的数据存储在了本地数据库中</p>\n<h2 id=\"处理工作区中的内容\"><a href=\"#处理工作区中的内容\" class=\"headerlink\" title=\"处理工作区中的内容\"></a>处理工作区中的内容</h2><ul>\n<li>清理未跟踪的文件 &amp;&amp; 目录: <code>git clean -f -d</code></li>\n<li>清理工作区的修改: <code>git checkout .</code></li>\n</ul>\n<h2 id=\"处理暂存区中的内容\"><a href=\"#处理暂存区中的内容\" class=\"headerlink\" title=\"处理暂存区中的内容\"></a>处理暂存区中的内容</h2><ul>\n<li><ol>\n<li>将暂存区的内容回退到工作区</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset .</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理本地仓库中的内容\"><a href=\"#处理本地仓库中的内容\" class=\"headerlink\" title=\"处理本地仓库中的内容\"></a>处理本地仓库中的内容</h2><h2 id=\"子模块——submodule\"><a href=\"#子模块——submodule\" class=\"headerlink\" title=\"子模块——submodule\"></a>子模块——submodule</h2><ul>\n<li>在主仓库库中添加子模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;子仓库的url&gt; &lt;在主仓库中的位置&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在主仓库库中移除子模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">取消注册</span></span><br><span class=\"line\">git submodule deinit &lt;在主仓库中的位置&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移除</span></span><br><span class=\"line\">git rm &lt;在主仓库中的位置&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在主仓库库中更新子模块<ul>\n<li>方法1</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新所有子模块</span></span><br><span class=\"line\">cd &lt;submodule-name&gt;</span><br><span class=\"line\">git pull</span><br><span class=\"line\">cd -</span><br><span class=\"line\">git submodule --merge</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将对子模块的更新(patch跟踪)在主仓库中提交</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;commit info&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法2</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新所有子模块</span></span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将对子模块的更新(patch跟踪)在主仓库中提交</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;commit info&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"git-基础\"><a href=\"#git-基础\" class=\"headerlink\" title=\"git 基础\"></a>git 基础</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"git-的三种状态\"><a href=\"#git-的三种状态\" class=\"headerlink\" title=\"git 的三种状态\"></a>git 的三种状态</h2><ul>\n<li>工作区</li>\n</ul>\n<p>已经修改了仓库中的文件但尚未提交到数据库,即没有使用 <code>git add </code> 命令</p>\n<ul>\n<li>暂存区</li>\n</ul>\n<p>将当前修改标记为进入下一个提交的快照 ,即使用了 <code>git add </code> 命令</p>\n<ul>\n<li>本地仓库</li>\n</ul>\n<p>将修改的数据存储在了本地数据库中</p>\n<h2 id=\"处理工作区中的内容\"><a href=\"#处理工作区中的内容\" class=\"headerlink\" title=\"处理工作区中的内容\"></a>处理工作区中的内容</h2><ul>\n<li>清理未跟踪的文件 &amp;&amp; 目录: <code>git clean -f -d</code></li>\n<li>清理工作区的修改: <code>git checkout .</code></li>\n</ul>\n<h2 id=\"处理暂存区中的内容\"><a href=\"#处理暂存区中的内容\" class=\"headerlink\" title=\"处理暂存区中的内容\"></a>处理暂存区中的内容</h2><ul>\n<li><ol>\n<li>将暂存区的内容回退到工作区</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset .</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理本地仓库中的内容\"><a href=\"#处理本地仓库中的内容\" class=\"headerlink\" title=\"处理本地仓库中的内容\"></a>处理本地仓库中的内容</h2><h2 id=\"子模块——submodule\"><a href=\"#子模块——submodule\" class=\"headerlink\" title=\"子模块——submodule\"></a>子模块——submodule</h2><ul>\n<li>在主仓库库中添加子模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;子仓库的url&gt; &lt;在主仓库中的位置&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在主仓库库中移除子模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">取消注册</span></span><br><span class=\"line\">git submodule deinit &lt;在主仓库中的位置&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移除</span></span><br><span class=\"line\">git rm &lt;在主仓库中的位置&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在主仓库库中更新子模块<ul>\n<li>方法1</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新所有子模块</span></span><br><span class=\"line\">cd &lt;submodule-name&gt;</span><br><span class=\"line\">git pull</span><br><span class=\"line\">cd -</span><br><span class=\"line\">git submodule --merge</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将对子模块的更新(patch跟踪)在主仓库中提交</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;commit info&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方法2</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新所有子模块</span></span><br><span class=\"line\">git submodule update --remote</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将对子模块的更新(patch跟踪)在主仓库中提交</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;commit info&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"git tips","toc":true,"_content":"# 补丁——patch\n* 生成补丁的方式\n    * 基于 **当前提交** 的数据库中的 patch 生成补丁:\n    ```shell\n    git format-patch HEAD^\n    ```\n    * 基于数据库中指定 patch **哈希或标签** 生成补丁:\n    ```shell\n    git format-patch <哈希或标签>\n    ```\n    * 基于 **工作区的修改** 生成补丁\n    ```shell\n    git diff > <patch_name.patch>\n    ```\n* 应用补丁\n    * 将补丁打在 **工作区**:\n    ```shell\n    git apply  <补丁>\n    ```\n    * 将补丁打在 **本地仓库** 上：\n    ```shell\n    git am <补丁>\n    ```\n* 取消补丁——反向应用补丁\n```shell\ngit apply -R <补丁>\n```\n","source":"_posts/study-notes/version_control/git_tips.md","raw":"---\ntitle: git tips\ntoc: true\n---\n# 补丁——patch\n* 生成补丁的方式\n    * 基于 **当前提交** 的数据库中的 patch 生成补丁:\n    ```shell\n    git format-patch HEAD^\n    ```\n    * 基于数据库中指定 patch **哈希或标签** 生成补丁:\n    ```shell\n    git format-patch <哈希或标签>\n    ```\n    * 基于 **工作区的修改** 生成补丁\n    ```shell\n    git diff > <patch_name.patch>\n    ```\n* 应用补丁\n    * 将补丁打在 **工作区**:\n    ```shell\n    git apply  <补丁>\n    ```\n    * 将补丁打在 **本地仓库** 上：\n    ```shell\n    git am <补丁>\n    ```\n* 取消补丁——反向应用补丁\n```shell\ngit apply -R <补丁>\n```\n","slug":"study-notes/version_control/git_tips","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nbsy6b000auvjxfhsmhdil","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"补丁——patch\"><a href=\"#补丁——patch\" class=\"headerlink\" title=\"补丁——patch\"></a>补丁——patch</h1><ul>\n<li>生成补丁的方式<ul>\n<li>基于 <strong>当前提交</strong> 的数据库中的 patch 生成补丁:</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch HEAD^</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基于数据库中指定 patch <strong>哈希或标签</strong> 生成补丁:</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch &lt;哈希或标签&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基于 <strong>工作区的修改</strong> 生成补丁</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &gt; &lt;patch_name.patch&gt;</span><br></pre></td></tr></table></figure></li>\n<li>应用补丁<ul>\n<li>将补丁打在 <strong>工作区</strong>:</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply  &lt;补丁&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将补丁打在 <strong>本地仓库</strong> 上：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git am &lt;补丁&gt;</span><br></pre></td></tr></table></figure></li>\n<li>取消补丁——反向应用补丁</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply -R &lt;补丁&gt;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"补丁——patch\"><a href=\"#补丁——patch\" class=\"headerlink\" title=\"补丁——patch\"></a>补丁——patch</h1><ul>\n<li>生成补丁的方式<ul>\n<li>基于 <strong>当前提交</strong> 的数据库中的 patch 生成补丁:</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch HEAD^</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基于数据库中指定 patch <strong>哈希或标签</strong> 生成补丁:</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch &lt;哈希或标签&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>基于 <strong>工作区的修改</strong> 生成补丁</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &gt; &lt;patch_name.patch&gt;</span><br></pre></td></tr></table></figure></li>\n<li>应用补丁<ul>\n<li>将补丁打在 <strong>工作区</strong>:</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply  &lt;补丁&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将补丁打在 <strong>本地仓库</strong> 上：</li>\n</ul>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git am &lt;补丁&gt;</span><br></pre></td></tr></table></figure></li>\n<li>取消补丁——反向应用补丁</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply -R &lt;补丁&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"sdcc","toc":true,"_content":"[toc]\n\n# sdcc 编译器\n## 简介\n[SDCC](https://sdcc.sourceforge.net/)（Small Device C Compiler） 是一个可重新定位的、优化的标准 C 编译器套件。\n## 特点\n1. 语言支持：支持C语言编译，提供了C语言的高级抽象能力，使得代码更易于编写和维护。\n2. 目标架构：除了8051系列外，还支持其他微控制器架构，如PIC、Z80、MCS-51等。\n3. 代码生成：从C代码生成汇编再到机器码，提供了更高的抽象层次，代码可读性和可维护性更好，但可能在某些情况下不如手工汇编代码效率高。\n4. 开发环境：可以集成到多种IDE中（如Visual Studio Code），支持更广泛的开发工具链和开发环境。\n5. 优化：提供了多种优化选项，可以自动优化代码，但优化效果受限于编译器的算法和设置。\n6. 社区与资源：作为开源项目，拥有一个较大的社区，提供了丰富的文档、示例和支持。\n7. 使用场景：适用于需要快速开发、代码可读性和维护性更重要的项目，特别是当使用C语言能满足需求时。\n## 安装\n* ubuntu\n```shell\nsudo apt install sdcc\n\n```\n## 简单使用\n```shell\n# 实例：将 test.c 文件编译成 mcs51单片机可食用的固件test.hex\nsdcc -mmcs51 test.c -o test.hex\n```\n## sdcc编译时生成的系列文件\nSDCC 在编译过程中会生成一系列的文件，每个文件都有其特定的作用。以下是常见的SDCC编译过程中生成的文件及其用途：  \n1. .ihx 文件  \n    * 作用：这是Intel Hex Format文件，是编译器生成的主要输出文件。.ihx文件包含程序代码和数据在内存中的地址和内容，用于烧录到微控制器中。  \n    * 用途：这是一个中间格式，通常需要转换成.hex或.bin文件以供烧录工具使用。\n2. .asm 文件\n    * 作用：这是由C代码生成的汇编代码文件。SDCC在编译C代码时会将其转换为汇编语言。\n    * 用途：用于查看编译器如何将C代码转换为汇编代码，帮助理解代码的优化和执行方式，也可以手动优化或调试。\n\n3. .lst 文件\n    * 作用：列表文件，包含汇编代码和对应的机器码、源代码行号等详细信息。\n    * 用途：用于调试和优化过程，可以看到每条汇编指令对应的机器码和源代码行，帮助跟踪程序的执行流程。\n\n4. .map 文件\n    * 作用：内存映射文件，显示程序中每个变量、函数的位置以及程序如何分配内存。\n    * 用途：帮助开发者了解程序的内存使用情况，特别是在内存受限的嵌入式系统中。\n\n5. .sym 文件\n    * 作用：符号表文件，包含了程序中所有符号（如变量名、函数名）及其在内存中的地址。\n    * 用途：在调试过程中，符号表可以帮助将地址映射回符号名，增强调试体验。\n\n6. .rel 文件\n    * 作用：可重定位的目标文件，包含编译后的代码和数据，但地址还没有被固定。\n    * 用途：这些文件可用于链接多个模块的程序，SDCC在链接阶段会使用它们。\n\n7. .cdb 文件\n    * 作用：调试信息文件，包含了调试器所需的信息，如变量名、行号等。\n    * 用途：在使用支持SDCC的调试器时提供调试信息。\n\n8. .hex 文件\n    * 作用：虽然不是SDCC默认生成的，但可以通过packihx工具将.ihx文件转换为.hex文件。.hex文件是Intel Hex格式的最终烧录文件。\n    * 用途：直接用于烧录到目标微控制器中。\n\n9. .bin 文件\n    * 作用：同样不是默认生成的，需要从.ihx或.hex文件转换而来，.bin文件是二进制格式。\n    * 用途：某些烧录工具或引导加载程序可能需要.bin格式的文件。\n","source":"_posts/study-notes/building/compiling/sdcc.md","raw":"---\ntitle: sdcc\ntoc: true\n---\n[toc]\n\n# sdcc 编译器\n## 简介\n[SDCC](https://sdcc.sourceforge.net/)（Small Device C Compiler） 是一个可重新定位的、优化的标准 C 编译器套件。\n## 特点\n1. 语言支持：支持C语言编译，提供了C语言的高级抽象能力，使得代码更易于编写和维护。\n2. 目标架构：除了8051系列外，还支持其他微控制器架构，如PIC、Z80、MCS-51等。\n3. 代码生成：从C代码生成汇编再到机器码，提供了更高的抽象层次，代码可读性和可维护性更好，但可能在某些情况下不如手工汇编代码效率高。\n4. 开发环境：可以集成到多种IDE中（如Visual Studio Code），支持更广泛的开发工具链和开发环境。\n5. 优化：提供了多种优化选项，可以自动优化代码，但优化效果受限于编译器的算法和设置。\n6. 社区与资源：作为开源项目，拥有一个较大的社区，提供了丰富的文档、示例和支持。\n7. 使用场景：适用于需要快速开发、代码可读性和维护性更重要的项目，特别是当使用C语言能满足需求时。\n## 安装\n* ubuntu\n```shell\nsudo apt install sdcc\n\n```\n## 简单使用\n```shell\n# 实例：将 test.c 文件编译成 mcs51单片机可食用的固件test.hex\nsdcc -mmcs51 test.c -o test.hex\n```\n## sdcc编译时生成的系列文件\nSDCC 在编译过程中会生成一系列的文件，每个文件都有其特定的作用。以下是常见的SDCC编译过程中生成的文件及其用途：  \n1. .ihx 文件  \n    * 作用：这是Intel Hex Format文件，是编译器生成的主要输出文件。.ihx文件包含程序代码和数据在内存中的地址和内容，用于烧录到微控制器中。  \n    * 用途：这是一个中间格式，通常需要转换成.hex或.bin文件以供烧录工具使用。\n2. .asm 文件\n    * 作用：这是由C代码生成的汇编代码文件。SDCC在编译C代码时会将其转换为汇编语言。\n    * 用途：用于查看编译器如何将C代码转换为汇编代码，帮助理解代码的优化和执行方式，也可以手动优化或调试。\n\n3. .lst 文件\n    * 作用：列表文件，包含汇编代码和对应的机器码、源代码行号等详细信息。\n    * 用途：用于调试和优化过程，可以看到每条汇编指令对应的机器码和源代码行，帮助跟踪程序的执行流程。\n\n4. .map 文件\n    * 作用：内存映射文件，显示程序中每个变量、函数的位置以及程序如何分配内存。\n    * 用途：帮助开发者了解程序的内存使用情况，特别是在内存受限的嵌入式系统中。\n\n5. .sym 文件\n    * 作用：符号表文件，包含了程序中所有符号（如变量名、函数名）及其在内存中的地址。\n    * 用途：在调试过程中，符号表可以帮助将地址映射回符号名，增强调试体验。\n\n6. .rel 文件\n    * 作用：可重定位的目标文件，包含编译后的代码和数据，但地址还没有被固定。\n    * 用途：这些文件可用于链接多个模块的程序，SDCC在链接阶段会使用它们。\n\n7. .cdb 文件\n    * 作用：调试信息文件，包含了调试器所需的信息，如变量名、行号等。\n    * 用途：在使用支持SDCC的调试器时提供调试信息。\n\n8. .hex 文件\n    * 作用：虽然不是SDCC默认生成的，但可以通过packihx工具将.ihx文件转换为.hex文件。.hex文件是Intel Hex格式的最终烧录文件。\n    * 用途：直接用于烧录到目标微控制器中。\n\n9. .bin 文件\n    * 作用：同样不是默认生成的，需要从.ihx或.hex文件转换而来，.bin文件是二进制格式。\n    * 用途：某些烧录工具或引导加载程序可能需要.bin格式的文件。\n","slug":"study-notes/building/compiling/sdcc","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nbsy6d000buvjx0rnf2wlv","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"sdcc-编译器\"><a href=\"#sdcc-编译器\" class=\"headerlink\" title=\"sdcc 编译器\"></a>sdcc 编译器</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://sdcc.sourceforge.net/\">SDCC</a>（Small Device C Compiler） 是一个可重新定位的、优化的标准 C 编译器套件。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li>语言支持：支持C语言编译，提供了C语言的高级抽象能力，使得代码更易于编写和维护。</li>\n<li>目标架构：除了8051系列外，还支持其他微控制器架构，如PIC、Z80、MCS-51等。</li>\n<li>代码生成：从C代码生成汇编再到机器码，提供了更高的抽象层次，代码可读性和可维护性更好，但可能在某些情况下不如手工汇编代码效率高。</li>\n<li>开发环境：可以集成到多种IDE中（如Visual Studio Code），支持更广泛的开发工具链和开发环境。</li>\n<li>优化：提供了多种优化选项，可以自动优化代码，但优化效果受限于编译器的算法和设置。</li>\n<li>社区与资源：作为开源项目，拥有一个较大的社区，提供了丰富的文档、示例和支持。</li>\n<li>使用场景：适用于需要快速开发、代码可读性和维护性更重要的项目，特别是当使用C语言能满足需求时。</li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>ubuntu</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install sdcc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">实例：将 test.c 文件编译成 mcs51单片机可食用的固件test.hex</span></span><br><span class=\"line\">sdcc -mmcs51 test.c -o test.hex</span><br></pre></td></tr></table></figure>\n<h2 id=\"sdcc编译时生成的系列文件\"><a href=\"#sdcc编译时生成的系列文件\" class=\"headerlink\" title=\"sdcc编译时生成的系列文件\"></a>sdcc编译时生成的系列文件</h2><p>SDCC 在编译过程中会生成一系列的文件，每个文件都有其特定的作用。以下是常见的SDCC编译过程中生成的文件及其用途：  </p>\n<ol>\n<li><p>.ihx 文件  </p>\n<ul>\n<li>作用：这是Intel Hex Format文件，是编译器生成的主要输出文件。.ihx文件包含程序代码和数据在内存中的地址和内容，用于烧录到微控制器中。  </li>\n<li>用途：这是一个中间格式，通常需要转换成.hex或.bin文件以供烧录工具使用。</li>\n</ul>\n</li>\n<li><p>.asm 文件</p>\n<ul>\n<li>作用：这是由C代码生成的汇编代码文件。SDCC在编译C代码时会将其转换为汇编语言。</li>\n<li>用途：用于查看编译器如何将C代码转换为汇编代码，帮助理解代码的优化和执行方式，也可以手动优化或调试。</li>\n</ul>\n</li>\n<li><p>.lst 文件</p>\n<ul>\n<li>作用：列表文件，包含汇编代码和对应的机器码、源代码行号等详细信息。</li>\n<li>用途：用于调试和优化过程，可以看到每条汇编指令对应的机器码和源代码行，帮助跟踪程序的执行流程。</li>\n</ul>\n</li>\n<li><p>.map 文件</p>\n<ul>\n<li>作用：内存映射文件，显示程序中每个变量、函数的位置以及程序如何分配内存。</li>\n<li>用途：帮助开发者了解程序的内存使用情况，特别是在内存受限的嵌入式系统中。</li>\n</ul>\n</li>\n<li><p>.sym 文件</p>\n<ul>\n<li>作用：符号表文件，包含了程序中所有符号（如变量名、函数名）及其在内存中的地址。</li>\n<li>用途：在调试过程中，符号表可以帮助将地址映射回符号名，增强调试体验。</li>\n</ul>\n</li>\n<li><p>.rel 文件</p>\n<ul>\n<li>作用：可重定位的目标文件，包含编译后的代码和数据，但地址还没有被固定。</li>\n<li>用途：这些文件可用于链接多个模块的程序，SDCC在链接阶段会使用它们。</li>\n</ul>\n</li>\n<li><p>.cdb 文件</p>\n<ul>\n<li>作用：调试信息文件，包含了调试器所需的信息，如变量名、行号等。</li>\n<li>用途：在使用支持SDCC的调试器时提供调试信息。</li>\n</ul>\n</li>\n<li><p>.hex 文件</p>\n<ul>\n<li>作用：虽然不是SDCC默认生成的，但可以通过packihx工具将.ihx文件转换为.hex文件。.hex文件是Intel Hex格式的最终烧录文件。</li>\n<li>用途：直接用于烧录到目标微控制器中。</li>\n</ul>\n</li>\n<li><p>.bin 文件</p>\n<ul>\n<li>作用：同样不是默认生成的，需要从.ihx或.hex文件转换而来，.bin文件是二进制格式。</li>\n<li>用途：某些烧录工具或引导加载程序可能需要.bin格式的文件。</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"sdcc-编译器\"><a href=\"#sdcc-编译器\" class=\"headerlink\" title=\"sdcc 编译器\"></a>sdcc 编译器</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://sdcc.sourceforge.net/\">SDCC</a>（Small Device C Compiler） 是一个可重新定位的、优化的标准 C 编译器套件。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ol>\n<li>语言支持：支持C语言编译，提供了C语言的高级抽象能力，使得代码更易于编写和维护。</li>\n<li>目标架构：除了8051系列外，还支持其他微控制器架构，如PIC、Z80、MCS-51等。</li>\n<li>代码生成：从C代码生成汇编再到机器码，提供了更高的抽象层次，代码可读性和可维护性更好，但可能在某些情况下不如手工汇编代码效率高。</li>\n<li>开发环境：可以集成到多种IDE中（如Visual Studio Code），支持更广泛的开发工具链和开发环境。</li>\n<li>优化：提供了多种优化选项，可以自动优化代码，但优化效果受限于编译器的算法和设置。</li>\n<li>社区与资源：作为开源项目，拥有一个较大的社区，提供了丰富的文档、示例和支持。</li>\n<li>使用场景：适用于需要快速开发、代码可读性和维护性更重要的项目，特别是当使用C语言能满足需求时。</li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>ubuntu</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install sdcc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">实例：将 test.c 文件编译成 mcs51单片机可食用的固件test.hex</span></span><br><span class=\"line\">sdcc -mmcs51 test.c -o test.hex</span><br></pre></td></tr></table></figure>\n<h2 id=\"sdcc编译时生成的系列文件\"><a href=\"#sdcc编译时生成的系列文件\" class=\"headerlink\" title=\"sdcc编译时生成的系列文件\"></a>sdcc编译时生成的系列文件</h2><p>SDCC 在编译过程中会生成一系列的文件，每个文件都有其特定的作用。以下是常见的SDCC编译过程中生成的文件及其用途：  </p>\n<ol>\n<li><p>.ihx 文件  </p>\n<ul>\n<li>作用：这是Intel Hex Format文件，是编译器生成的主要输出文件。.ihx文件包含程序代码和数据在内存中的地址和内容，用于烧录到微控制器中。  </li>\n<li>用途：这是一个中间格式，通常需要转换成.hex或.bin文件以供烧录工具使用。</li>\n</ul>\n</li>\n<li><p>.asm 文件</p>\n<ul>\n<li>作用：这是由C代码生成的汇编代码文件。SDCC在编译C代码时会将其转换为汇编语言。</li>\n<li>用途：用于查看编译器如何将C代码转换为汇编代码，帮助理解代码的优化和执行方式，也可以手动优化或调试。</li>\n</ul>\n</li>\n<li><p>.lst 文件</p>\n<ul>\n<li>作用：列表文件，包含汇编代码和对应的机器码、源代码行号等详细信息。</li>\n<li>用途：用于调试和优化过程，可以看到每条汇编指令对应的机器码和源代码行，帮助跟踪程序的执行流程。</li>\n</ul>\n</li>\n<li><p>.map 文件</p>\n<ul>\n<li>作用：内存映射文件，显示程序中每个变量、函数的位置以及程序如何分配内存。</li>\n<li>用途：帮助开发者了解程序的内存使用情况，特别是在内存受限的嵌入式系统中。</li>\n</ul>\n</li>\n<li><p>.sym 文件</p>\n<ul>\n<li>作用：符号表文件，包含了程序中所有符号（如变量名、函数名）及其在内存中的地址。</li>\n<li>用途：在调试过程中，符号表可以帮助将地址映射回符号名，增强调试体验。</li>\n</ul>\n</li>\n<li><p>.rel 文件</p>\n<ul>\n<li>作用：可重定位的目标文件，包含编译后的代码和数据，但地址还没有被固定。</li>\n<li>用途：这些文件可用于链接多个模块的程序，SDCC在链接阶段会使用它们。</li>\n</ul>\n</li>\n<li><p>.cdb 文件</p>\n<ul>\n<li>作用：调试信息文件，包含了调试器所需的信息，如变量名、行号等。</li>\n<li>用途：在使用支持SDCC的调试器时提供调试信息。</li>\n</ul>\n</li>\n<li><p>.hex 文件</p>\n<ul>\n<li>作用：虽然不是SDCC默认生成的，但可以通过packihx工具将.ihx文件转换为.hex文件。.hex文件是Intel Hex格式的最终烧录文件。</li>\n<li>用途：直接用于烧录到目标微控制器中。</li>\n</ul>\n</li>\n<li><p>.bin 文件</p>\n<ul>\n<li>作用：同样不是默认生成的，需要从.ihx或.hex文件转换而来，.bin文件是二进制格式。</li>\n<li>用途：某些烧录工具或引导加载程序可能需要.bin格式的文件。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"汇编风格","toc":true,"_content":"[toc]\n\n# 汇编语法风格\n* 在 **DOS/Windows** 下的汇编采用 **Intel** 风格，**Unix/Linux** 多采用 **AT&T** 风格。\n* 在linux系统下常用的汇编器\n    * AT&T格式: as\n    * Intel格式: NASM\n## 使用系统调用\n* linux 使用一些寄存器来指定要使用的系统调用号及该系统调用所需的参数:\n    * `eax`:存放系统调用号\n    * `ebx`:系统调用的第一个参数\n    * `ecx`:第二个参数，后面的参数类推  \n**note:**<u>当系统调用所需的参数大于5时，全部参数将一次放在一块连续的内存中,ebx存放指向这块内存的指针</u>\n* 通过中断(`int 0x80`)进入内核\n* 系统调用结束后，返回值存放在 `eax` 中\n## AT&T\n* 寄存器名要加`%`\n* 用`$`前缀表示立即操作数\n* 源操作数在前，目标操作数在后\n* 操作数的字长由操作符的最后一个字母决定\n* 绝对转移和调用指令 `jump/call` 的操作数前面要加前缀 `*`\n* 远程转移指令和远程子调用指令的操作码为：`ljump/lcall`\n* 远程返回指令：`lret`\n* 内存操作数的寻址方式：`section:disp(base, index, scale)`\n## Intel\n* 目标操作数在前，源操作数在后\n* 远程转移指令和远程子调用指令的操作码为：`jump far /call far`\n* 远程返回指令：`ret for`\n* 内存操作数的寻址方式：`section:[base + index * scale + disp]`\n","source":"_posts/study-notes/language/assembly/assembly_style.md","raw":"---\ntitle: 汇编风格\ntoc: true\n---\n[toc]\n\n# 汇编语法风格\n* 在 **DOS/Windows** 下的汇编采用 **Intel** 风格，**Unix/Linux** 多采用 **AT&T** 风格。\n* 在linux系统下常用的汇编器\n    * AT&T格式: as\n    * Intel格式: NASM\n## 使用系统调用\n* linux 使用一些寄存器来指定要使用的系统调用号及该系统调用所需的参数:\n    * `eax`:存放系统调用号\n    * `ebx`:系统调用的第一个参数\n    * `ecx`:第二个参数，后面的参数类推  \n**note:**<u>当系统调用所需的参数大于5时，全部参数将一次放在一块连续的内存中,ebx存放指向这块内存的指针</u>\n* 通过中断(`int 0x80`)进入内核\n* 系统调用结束后，返回值存放在 `eax` 中\n## AT&T\n* 寄存器名要加`%`\n* 用`$`前缀表示立即操作数\n* 源操作数在前，目标操作数在后\n* 操作数的字长由操作符的最后一个字母决定\n* 绝对转移和调用指令 `jump/call` 的操作数前面要加前缀 `*`\n* 远程转移指令和远程子调用指令的操作码为：`ljump/lcall`\n* 远程返回指令：`lret`\n* 内存操作数的寻址方式：`section:disp(base, index, scale)`\n## Intel\n* 目标操作数在前，源操作数在后\n* 远程转移指令和远程子调用指令的操作码为：`jump far /call far`\n* 远程返回指令：`ret for`\n* 内存操作数的寻址方式：`section:[base + index * scale + disp]`\n","slug":"study-notes/language/assembly/assembly_style","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nbsy6e000cuvjxfhg486rt","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"汇编语法风格\"><a href=\"#汇编语法风格\" class=\"headerlink\" title=\"汇编语法风格\"></a>汇编语法风格</h1><ul>\n<li>在 <strong>DOS&#x2F;Windows</strong> 下的汇编采用 <strong>Intel</strong> 风格，<strong>Unix&#x2F;Linux</strong> 多采用 <strong>AT&amp;T</strong> 风格。</li>\n<li>在linux系统下常用的汇编器<ul>\n<li>AT&amp;T格式: as</li>\n<li>Intel格式: NASM</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用系统调用\"><a href=\"#使用系统调用\" class=\"headerlink\" title=\"使用系统调用\"></a>使用系统调用</h2><ul>\n<li>linux 使用一些寄存器来指定要使用的系统调用号及该系统调用所需的参数:<ul>\n<li><code>eax</code>:存放系统调用号</li>\n<li><code>ebx</code>:系统调用的第一个参数</li>\n<li><code>ecx</code>:第二个参数，后面的参数类推<br><strong>note:</strong><u>当系统调用所需的参数大于5时，全部参数将一次放在一块连续的内存中,ebx存放指向这块内存的指针</u></li>\n</ul>\n</li>\n<li>通过中断(<code>int 0x80</code>)进入内核</li>\n<li>系统调用结束后，返回值存放在 <code>eax</code> 中</li>\n</ul>\n<h2 id=\"AT-T\"><a href=\"#AT-T\" class=\"headerlink\" title=\"AT&amp;T\"></a>AT&amp;T</h2><ul>\n<li>寄存器名要加<code>%</code></li>\n<li>用<code>$</code>前缀表示立即操作数</li>\n<li>源操作数在前，目标操作数在后</li>\n<li>操作数的字长由操作符的最后一个字母决定</li>\n<li>绝对转移和调用指令 <code>jump/call</code> 的操作数前面要加前缀 <code>*</code></li>\n<li>远程转移指令和远程子调用指令的操作码为：<code>ljump/lcall</code></li>\n<li>远程返回指令：<code>lret</code></li>\n<li>内存操作数的寻址方式：<code>section:disp(base, index, scale)</code></li>\n</ul>\n<h2 id=\"Intel\"><a href=\"#Intel\" class=\"headerlink\" title=\"Intel\"></a>Intel</h2><ul>\n<li>目标操作数在前，源操作数在后</li>\n<li>远程转移指令和远程子调用指令的操作码为：<code>jump far /call far</code></li>\n<li>远程返回指令：<code>ret for</code></li>\n<li>内存操作数的寻址方式：<code>section:[base + index * scale + disp]</code></li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"汇编语法风格\"><a href=\"#汇编语法风格\" class=\"headerlink\" title=\"汇编语法风格\"></a>汇编语法风格</h1><ul>\n<li>在 <strong>DOS&#x2F;Windows</strong> 下的汇编采用 <strong>Intel</strong> 风格，<strong>Unix&#x2F;Linux</strong> 多采用 <strong>AT&amp;T</strong> 风格。</li>\n<li>在linux系统下常用的汇编器<ul>\n<li>AT&amp;T格式: as</li>\n<li>Intel格式: NASM</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用系统调用\"><a href=\"#使用系统调用\" class=\"headerlink\" title=\"使用系统调用\"></a>使用系统调用</h2><ul>\n<li>linux 使用一些寄存器来指定要使用的系统调用号及该系统调用所需的参数:<ul>\n<li><code>eax</code>:存放系统调用号</li>\n<li><code>ebx</code>:系统调用的第一个参数</li>\n<li><code>ecx</code>:第二个参数，后面的参数类推<br><strong>note:</strong><u>当系统调用所需的参数大于5时，全部参数将一次放在一块连续的内存中,ebx存放指向这块内存的指针</u></li>\n</ul>\n</li>\n<li>通过中断(<code>int 0x80</code>)进入内核</li>\n<li>系统调用结束后，返回值存放在 <code>eax</code> 中</li>\n</ul>\n<h2 id=\"AT-T\"><a href=\"#AT-T\" class=\"headerlink\" title=\"AT&amp;T\"></a>AT&amp;T</h2><ul>\n<li>寄存器名要加<code>%</code></li>\n<li>用<code>$</code>前缀表示立即操作数</li>\n<li>源操作数在前，目标操作数在后</li>\n<li>操作数的字长由操作符的最后一个字母决定</li>\n<li>绝对转移和调用指令 <code>jump/call</code> 的操作数前面要加前缀 <code>*</code></li>\n<li>远程转移指令和远程子调用指令的操作码为：<code>ljump/lcall</code></li>\n<li>远程返回指令：<code>lret</code></li>\n<li>内存操作数的寻址方式：<code>section:disp(base, index, scale)</code></li>\n</ul>\n<h2 id=\"Intel\"><a href=\"#Intel\" class=\"headerlink\" title=\"Intel\"></a>Intel</h2><ul>\n<li>目标操作数在前，源操作数在后</li>\n<li>远程转移指令和远程子调用指令的操作码为：<code>jump far /call far</code></li>\n<li>远程返回指令：<code>ret for</code></li>\n<li>内存操作数的寻址方式：<code>section:[base + index * scale + disp]</code></li>\n</ul>\n"},{"title":"c++ 基础","toc":true,"_content":"[toc]\n\n# 类和对象\n## 类成员的访问控制\n* public：使用类对象的程序都可以直接访问\n* private:只能通过共有成员函数(或友元函数)来访问\n* protected:\n## 对类对象似有部分的访问\n*  常规办法\n通过共有类方法提供的方式访问\n* 友元(friend)\n有元有3中：\n1. 友元类\n2. 友元函数\n3. 友元类函数\n\n## 类的构造函数和析构函数\n* 构造函数：在创建对象时自动对该对象进行初始化\n* 析构函数：通过构造函数创建的对象过期后，程序会调用析构函数释放掉该对象占用的资源，这是一个自动完成的过程\n```c++\n```\n# 函数重载\n**函数重载** 是多态的一种体现，它要求多个函数可以有相同的函数名，区别这些函数的方式是根据函数的参数列表:\n```c++\n/*\nroot 有两个含义:\n    1. 支持\n    2. 种植\n*/\n// 支持: 支持什么观点\nvoid root(char* view);\n// 种植：在哪里种植什么植物\nvoid root(char* addr, char* name);\n```\n虽然函数名不同，但在特定的场景下会使用不同的参数列表，那么调用的具体的函数也就不同。\n\n# 模板重载(函数模板)\n**模板重载** 的原理和函数重载差不多，还是看参数列表:  \n&emsp;<u>**notes**: 在新版本中，可能需要用 `typename` 关键字代替 `class` 关键字, 后者为类模板关键字</u>\n```c++\ntemplate <class T>\nvoid swap(T &a, T &b) {\n    T temp;\n    temp = a;\n    a = b;\n    b = temp;\n}\n\ntemplate <class T>\nvoid swap(T a[], T b[], T n) {\n    T temp;\n    for(int i = 0; i < n; i++) {\n        temp = a[i];\n        a[i] = b[i];\n        b[i] = a[i];\n    }\n}\n```\n","source":"_posts/study-notes/language/c++/c++basic.md","raw":"---\ntitle: c++ 基础\ntoc: true\n---\n[toc]\n\n# 类和对象\n## 类成员的访问控制\n* public：使用类对象的程序都可以直接访问\n* private:只能通过共有成员函数(或友元函数)来访问\n* protected:\n## 对类对象似有部分的访问\n*  常规办法\n通过共有类方法提供的方式访问\n* 友元(friend)\n有元有3中：\n1. 友元类\n2. 友元函数\n3. 友元类函数\n\n## 类的构造函数和析构函数\n* 构造函数：在创建对象时自动对该对象进行初始化\n* 析构函数：通过构造函数创建的对象过期后，程序会调用析构函数释放掉该对象占用的资源，这是一个自动完成的过程\n```c++\n```\n# 函数重载\n**函数重载** 是多态的一种体现，它要求多个函数可以有相同的函数名，区别这些函数的方式是根据函数的参数列表:\n```c++\n/*\nroot 有两个含义:\n    1. 支持\n    2. 种植\n*/\n// 支持: 支持什么观点\nvoid root(char* view);\n// 种植：在哪里种植什么植物\nvoid root(char* addr, char* name);\n```\n虽然函数名不同，但在特定的场景下会使用不同的参数列表，那么调用的具体的函数也就不同。\n\n# 模板重载(函数模板)\n**模板重载** 的原理和函数重载差不多，还是看参数列表:  \n&emsp;<u>**notes**: 在新版本中，可能需要用 `typename` 关键字代替 `class` 关键字, 后者为类模板关键字</u>\n```c++\ntemplate <class T>\nvoid swap(T &a, T &b) {\n    T temp;\n    temp = a;\n    a = b;\n    b = temp;\n}\n\ntemplate <class T>\nvoid swap(T a[], T b[], T n) {\n    T temp;\n    for(int i = 0; i < n; i++) {\n        temp = a[i];\n        a[i] = b[i];\n        b[i] = a[i];\n    }\n}\n```\n","slug":"study-notes/language/c++/c++basic","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nbsy6f000duvjx3i2i5buw","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h1><h2 id=\"类成员的访问控制\"><a href=\"#类成员的访问控制\" class=\"headerlink\" title=\"类成员的访问控制\"></a>类成员的访问控制</h2><ul>\n<li>public：使用类对象的程序都可以直接访问</li>\n<li>private:只能通过共有成员函数(或友元函数)来访问</li>\n<li>protected:</li>\n</ul>\n<h2 id=\"对类对象似有部分的访问\"><a href=\"#对类对象似有部分的访问\" class=\"headerlink\" title=\"对类对象似有部分的访问\"></a>对类对象似有部分的访问</h2><ul>\n<li>常规办法<br>通过共有类方法提供的方式访问</li>\n<li>友元(friend)<br>有元有3中：</li>\n</ul>\n<ol>\n<li>友元类</li>\n<li>友元函数</li>\n<li>友元类函数</li>\n</ol>\n<h2 id=\"类的构造函数和析构函数\"><a href=\"#类的构造函数和析构函数\" class=\"headerlink\" title=\"类的构造函数和析构函数\"></a>类的构造函数和析构函数</h2><ul>\n<li>构造函数：在创建对象时自动对该对象进行初始化</li>\n<li>析构函数：通过构造函数创建的对象过期后，程序会调用析构函数释放掉该对象占用的资源，这是一个自动完成的过程</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"># 函数重载</span><br><span class=\"line\">**函数重载** 是多态的一种体现，它要求多个函数可以有相同的函数名，区别这些函数的方式是根据函数的参数列表:</span><br><span class=\"line\">```c++</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">root 有两个含义:</span></span><br><span class=\"line\"><span class=\"comment\">    1. 支持</span></span><br><span class=\"line\"><span class=\"comment\">    2. 种植</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 支持: 支持什么观点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"type\">char</span>* view)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 种植：在哪里种植什么植物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"type\">char</span>* addr, <span class=\"type\">char</span>* name)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>虽然函数名不同，但在特定的场景下会使用不同的参数列表，那么调用的具体的函数也就不同。</p>\n<h1 id=\"模板重载-函数模板\"><a href=\"#模板重载-函数模板\" class=\"headerlink\" title=\"模板重载(函数模板)\"></a>模板重载(函数模板)</h1><p><strong>模板重载</strong> 的原理和函数重载差不多，还是看参数列表:<br>&emsp;<u><strong>notes</strong>: 在新版本中，可能需要用 <code>typename</code> 关键字代替 <code>class</code> 关键字, 后者为类模板关键字</u></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T &amp;a, T &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    T temp;</span><br><span class=\"line\">    temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T a[], T b[], T n)</span> </span>&#123;</span><br><span class=\"line\">    T temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        temp = a[i];</span><br><span class=\"line\">        a[i] = b[i];</span><br><span class=\"line\">        b[i] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h1><h2 id=\"类成员的访问控制\"><a href=\"#类成员的访问控制\" class=\"headerlink\" title=\"类成员的访问控制\"></a>类成员的访问控制</h2><ul>\n<li>public：使用类对象的程序都可以直接访问</li>\n<li>private:只能通过共有成员函数(或友元函数)来访问</li>\n<li>protected:</li>\n</ul>\n<h2 id=\"对类对象似有部分的访问\"><a href=\"#对类对象似有部分的访问\" class=\"headerlink\" title=\"对类对象似有部分的访问\"></a>对类对象似有部分的访问</h2><ul>\n<li>常规办法<br>通过共有类方法提供的方式访问</li>\n<li>友元(friend)<br>有元有3中：</li>\n</ul>\n<ol>\n<li>友元类</li>\n<li>友元函数</li>\n<li>友元类函数</li>\n</ol>\n<h2 id=\"类的构造函数和析构函数\"><a href=\"#类的构造函数和析构函数\" class=\"headerlink\" title=\"类的构造函数和析构函数\"></a>类的构造函数和析构函数</h2><ul>\n<li>构造函数：在创建对象时自动对该对象进行初始化</li>\n<li>析构函数：通过构造函数创建的对象过期后，程序会调用析构函数释放掉该对象占用的资源，这是一个自动完成的过程</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"># 函数重载</span><br><span class=\"line\">**函数重载** 是多态的一种体现，它要求多个函数可以有相同的函数名，区别这些函数的方式是根据函数的参数列表:</span><br><span class=\"line\">```c++</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">root 有两个含义:</span></span><br><span class=\"line\"><span class=\"comment\">    1. 支持</span></span><br><span class=\"line\"><span class=\"comment\">    2. 种植</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">// 支持: 支持什么观点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"type\">char</span>* view)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 种植：在哪里种植什么植物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">root</span><span class=\"params\">(<span class=\"type\">char</span>* addr, <span class=\"type\">char</span>* name)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>虽然函数名不同，但在特定的场景下会使用不同的参数列表，那么调用的具体的函数也就不同。</p>\n<h1 id=\"模板重载-函数模板\"><a href=\"#模板重载-函数模板\" class=\"headerlink\" title=\"模板重载(函数模板)\"></a>模板重载(函数模板)</h1><p><strong>模板重载</strong> 的原理和函数重载差不多，还是看参数列表:<br>&emsp;<u><strong>notes</strong>: 在新版本中，可能需要用 <code>typename</code> 关键字代替 <code>class</code> 关键字, 后者为类模板关键字</u></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T &amp;a, T &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    T temp;</span><br><span class=\"line\">    temp = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T a[], T b[], T n)</span> </span>&#123;</span><br><span class=\"line\">    T temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        temp = a[i];</span><br><span class=\"line\">        a[i] = b[i];</span><br><span class=\"line\">        b[i] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"c++ tips","toc":true,"_content":"[toc]\n\n# 类\n## 类和结构体\n类是结构体在面向对象思想上的扩展，他们唯一的区别是：结构体的所有成员都是共有的，而类成员有三种访问控制.\n## 类的对象\n同一个类的多个对象共用一组成员函数，但各自有各自的数据\n## this\n`this` 是一个特殊指针，指向对象。  \n# pragma pack(n)\n设置成员变量的对齐方式，例如：  \n```c++\n#pragma pack(push) // 保存对齐状态\n#pragma pack(4) // 设定4字节对齐\nstruct st {\n    char c;\n    double d;\n    int i;\n};\n#pragma pack(pop) // 恢复对齐状态\n```\n# 关键字\n## volatile 关键字\n1. 表明被修饰的类型变量可能被某修未知因素更改，所在在编译时告诉编译器不要做优化;  \n2. cpu 在访问时必须在内存中取值;  \n# extern \"C\"\n1. 告诉编译器按照 C 语言的方式编译和链接这段代码;  \n2. 好处是避免C++因为**符号修饰**导致不能和C语言中的符号连接的问题\n# 数据类型\n## union 联合\n1. 是一种数据结构，可以在有限的空间中存储不同类型的数据节;  \n2. union 可以有多个数据成员，但只有一个可以是有效值\n","source":"_posts/study-notes/language/c++/c++interview_tips.md","raw":"---\ntitle: c++ tips\ntoc: true\n---\n[toc]\n\n# 类\n## 类和结构体\n类是结构体在面向对象思想上的扩展，他们唯一的区别是：结构体的所有成员都是共有的，而类成员有三种访问控制.\n## 类的对象\n同一个类的多个对象共用一组成员函数，但各自有各自的数据\n## this\n`this` 是一个特殊指针，指向对象。  \n# pragma pack(n)\n设置成员变量的对齐方式，例如：  \n```c++\n#pragma pack(push) // 保存对齐状态\n#pragma pack(4) // 设定4字节对齐\nstruct st {\n    char c;\n    double d;\n    int i;\n};\n#pragma pack(pop) // 恢复对齐状态\n```\n# 关键字\n## volatile 关键字\n1. 表明被修饰的类型变量可能被某修未知因素更改，所在在编译时告诉编译器不要做优化;  \n2. cpu 在访问时必须在内存中取值;  \n# extern \"C\"\n1. 告诉编译器按照 C 语言的方式编译和链接这段代码;  \n2. 好处是避免C++因为**符号修饰**导致不能和C语言中的符号连接的问题\n# 数据类型\n## union 联合\n1. 是一种数据结构，可以在有限的空间中存储不同类型的数据节;  \n2. union 可以有多个数据成员，但只有一个可以是有效值\n","slug":"study-notes/language/c++/c++interview_tips","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nbsy6h000euvjx8rv7etxd","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"类和结构体\"><a href=\"#类和结构体\" class=\"headerlink\" title=\"类和结构体\"></a>类和结构体</h2><p>类是结构体在面向对象思想上的扩展，他们唯一的区别是：结构体的所有成员都是共有的，而类成员有三种访问控制.</p>\n<h2 id=\"类的对象\"><a href=\"#类的对象\" class=\"headerlink\" title=\"类的对象\"></a>类的对象</h2><p>同一个类的多个对象共用一组成员函数，但各自有各自的数据</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p><code>this</code> 是一个特殊指针，指向对象。  </p>\n<h1 id=\"pragma-pack-n\"><a href=\"#pragma-pack-n\" class=\"headerlink\" title=\"pragma pack(n)\"></a>pragma pack(n)</h1><p>设置成员变量的对齐方式，例如：  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(push) <span class=\"comment\">// 保存对齐状态</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(4) <span class=\"comment\">// 设定4字节对齐</span></span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">st</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    <span class=\"type\">double</span> d;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(pop) <span class=\"comment\">// 恢复对齐状态</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><h2 id=\"volatile-关键字\"><a href=\"#volatile-关键字\" class=\"headerlink\" title=\"volatile 关键字\"></a>volatile 关键字</h2><ol>\n<li>表明被修饰的类型变量可能被某修未知因素更改，所在在编译时告诉编译器不要做优化;  </li>\n<li>cpu 在访问时必须在内存中取值;</li>\n</ol>\n<h1 id=\"extern-“C”\"><a href=\"#extern-“C”\" class=\"headerlink\" title=\"extern “C”\"></a>extern “C”</h1><ol>\n<li>告诉编译器按照 C 语言的方式编译和链接这段代码;  </li>\n<li>好处是避免C++因为<strong>符号修饰</strong>导致不能和C语言中的符号连接的问题</li>\n</ol>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"union-联合\"><a href=\"#union-联合\" class=\"headerlink\" title=\"union 联合\"></a>union 联合</h2><ol>\n<li>是一种数据结构，可以在有限的空间中存储不同类型的数据节;  </li>\n<li>union 可以有多个数据成员，但只有一个可以是有效值</li>\n</ol>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"类和结构体\"><a href=\"#类和结构体\" class=\"headerlink\" title=\"类和结构体\"></a>类和结构体</h2><p>类是结构体在面向对象思想上的扩展，他们唯一的区别是：结构体的所有成员都是共有的，而类成员有三种访问控制.</p>\n<h2 id=\"类的对象\"><a href=\"#类的对象\" class=\"headerlink\" title=\"类的对象\"></a>类的对象</h2><p>同一个类的多个对象共用一组成员函数，但各自有各自的数据</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p><code>this</code> 是一个特殊指针，指向对象。  </p>\n<h1 id=\"pragma-pack-n\"><a href=\"#pragma-pack-n\" class=\"headerlink\" title=\"pragma pack(n)\"></a>pragma pack(n)</h1><p>设置成员变量的对齐方式，例如：  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(push) <span class=\"comment\">// 保存对齐状态</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(4) <span class=\"comment\">// 设定4字节对齐</span></span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">st</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    <span class=\"type\">double</span> d;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> pack(pop) <span class=\"comment\">// 恢复对齐状态</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><h2 id=\"volatile-关键字\"><a href=\"#volatile-关键字\" class=\"headerlink\" title=\"volatile 关键字\"></a>volatile 关键字</h2><ol>\n<li>表明被修饰的类型变量可能被某修未知因素更改，所在在编译时告诉编译器不要做优化;  </li>\n<li>cpu 在访问时必须在内存中取值;</li>\n</ol>\n<h1 id=\"extern-“C”\"><a href=\"#extern-“C”\" class=\"headerlink\" title=\"extern “C”\"></a>extern “C”</h1><ol>\n<li>告诉编译器按照 C 语言的方式编译和链接这段代码;  </li>\n<li>好处是避免C++因为<strong>符号修饰</strong>导致不能和C语言中的符号连接的问题</li>\n</ol>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"union-联合\"><a href=\"#union-联合\" class=\"headerlink\" title=\"union 联合\"></a>union 联合</h2><ol>\n<li>是一种数据结构，可以在有限的空间中存储不同类型的数据节;  </li>\n<li>union 可以有多个数据成员，但只有一个可以是有效值</li>\n</ol>\n"},{"title":"python","toc":true,"_content":"* 目录\n    * venv创建虚拟环境\n\n# venv创建虚拟环境\n## 1. 查看帮助\n```py\npython3 -m venv -h\n```\n\n## 2. 创建虚拟环境\n```py\npython3 -m venv [venv_dir_name]\n```\n## 3. 激活虚拟环境\n```py\nsource venv_dir_name/bin/activate\n```\n\n","source":"_posts/study-notes/language/python/python进阶.md","raw":"---\ntitle: python\ntoc: true\n---\n* 目录\n    * venv创建虚拟环境\n\n# venv创建虚拟环境\n## 1. 查看帮助\n```py\npython3 -m venv -h\n```\n\n## 2. 创建虚拟环境\n```py\npython3 -m venv [venv_dir_name]\n```\n## 3. 激活虚拟环境\n```py\nsource venv_dir_name/bin/activate\n```\n\n","slug":"study-notes/language/python/python进阶","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nbsy6i000fuvjx12652ehy","comments":1,"layout":"post","photos":[],"content":"<ul>\n<li>目录<ul>\n<li>venv创建虚拟环境</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"venv创建虚拟环境\"><a href=\"#venv创建虚拟环境\" class=\"headerlink\" title=\"venv创建虚拟环境\"></a>venv创建虚拟环境</h1><h2 id=\"1-查看帮助\"><a href=\"#1-查看帮助\" class=\"headerlink\" title=\"1. 查看帮助\"></a>1. 查看帮助</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv -h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-创建虚拟环境\"><a href=\"#2-创建虚拟环境\" class=\"headerlink\" title=\"2. 创建虚拟环境\"></a>2. 创建虚拟环境</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv [venv_dir_name]</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-激活虚拟环境\"><a href=\"#3-激活虚拟环境\" class=\"headerlink\" title=\"3. 激活虚拟环境\"></a>3. 激活虚拟环境</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source venv_dir_name/<span class=\"built_in\">bin</span>/activate</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<ul>\n<li>目录<ul>\n<li>venv创建虚拟环境</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"venv创建虚拟环境\"><a href=\"#venv创建虚拟环境\" class=\"headerlink\" title=\"venv创建虚拟环境\"></a>venv创建虚拟环境</h1><h2 id=\"1-查看帮助\"><a href=\"#1-查看帮助\" class=\"headerlink\" title=\"1. 查看帮助\"></a>1. 查看帮助</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv -h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-创建虚拟环境\"><a href=\"#2-创建虚拟环境\" class=\"headerlink\" title=\"2. 创建虚拟环境\"></a>2. 创建虚拟环境</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv [venv_dir_name]</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-激活虚拟环境\"><a href=\"#3-激活虚拟环境\" class=\"headerlink\" title=\"3. 激活虚拟环境\"></a>3. 激活虚拟环境</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source venv_dir_name/<span class=\"built_in\">bin</span>/activate</span><br></pre></td></tr></table></figure>\n\n"},{"title":"simulIDE","toc":true,"_content":"[toc]\n\n#SimulIED\n\n## 简介\n[SimulIDE](https://simulide.com/p/) 是一个简单的实时电子电路模拟器，旨在供业余爱好者或学生学习和试验模拟和数字电子电路和微控制器。它支持 PIC、AVR、Arduino 和其他 MCU 和 MPU。\n## 吸引我的点\n1. 免费\n2. 免安装\n3. 多平台（windows、mac、linux）都可用\n## start\n笔者实在ubuntu环境下使用的，搭配 sdcc 编译器可是编写、调试比较mcs51等单片机底层的东西，很适合喜欢在变成方面刨根问底的朋友。\n## \"下载安装\"\n1. 登录[官网](https://simulide.com/p/)，选择 Downloads > official versions\n![](./pictures/simulIDE-download.png)\n2. 选择自己想要的版本(笔者选择的是1.1.0)并点击\n![](./pictures/select-version.png)\n3. 选择按照自己的操作系统选择不同的平台，笔者使用的是ubuntu，所以选择了Linux64。至于下面的“爱心”，笔者就后者脸皮写了 0 啦（白剽，嘻嘻），然后点击 Download 即可下载\n![](./pictures/select-platform.png)\n4. 下载之后会得到一个压缩包。在指定的路径下面解压后和得到以下内容：\n```shell\ndu -sh SimulIDE_1.1.0-SR1_Lin64\n76M\tSimulIDE_1.1.0-SR1_Lin64\n\ntree -L 1 SimulIDE_1.1.0-SR1_Lin64\nSimulIDE_1.1.0-SR1_Lin64\n├── data\n├── examples\n└── simulide\n\n3 directories, 1 file\n```\n可以看到解压后的到小也就80M的样子，还是很小的。其中 simulide 是可执行文件，examples/ 下是官方提供的一些例子，data是simulide 运行所需的所有文件。要使用 SimulIED 时只需启动 simulide 即可。\n## 简单使用\n具体使用说明可参考[官方文档](https://simulide.com/p/simulidekb/)  \n下面仅演示如何使用用例\n### 使用官方用例\n用例之一位置:  \n`SimulIDE_1.1.0-SR1_Lin64/examples/Micro/mcs-51/mcs-51_switch`\n1. 运行 simulide 可执行文件\n```shell\n./simulide\n```\n结果如下：\n![](./pictures/run.png)\n\n# TODO:<u>不想写文档啦，就先这样啦</u>\n","source":"_posts/study-notes/virtual/SimulIDE/simulIDE.md","raw":"---\ntitle: simulIDE\ntoc: true\n---\n[toc]\n\n#SimulIED\n\n## 简介\n[SimulIDE](https://simulide.com/p/) 是一个简单的实时电子电路模拟器，旨在供业余爱好者或学生学习和试验模拟和数字电子电路和微控制器。它支持 PIC、AVR、Arduino 和其他 MCU 和 MPU。\n## 吸引我的点\n1. 免费\n2. 免安装\n3. 多平台（windows、mac、linux）都可用\n## start\n笔者实在ubuntu环境下使用的，搭配 sdcc 编译器可是编写、调试比较mcs51等单片机底层的东西，很适合喜欢在变成方面刨根问底的朋友。\n## \"下载安装\"\n1. 登录[官网](https://simulide.com/p/)，选择 Downloads > official versions\n![](./pictures/simulIDE-download.png)\n2. 选择自己想要的版本(笔者选择的是1.1.0)并点击\n![](./pictures/select-version.png)\n3. 选择按照自己的操作系统选择不同的平台，笔者使用的是ubuntu，所以选择了Linux64。至于下面的“爱心”，笔者就后者脸皮写了 0 啦（白剽，嘻嘻），然后点击 Download 即可下载\n![](./pictures/select-platform.png)\n4. 下载之后会得到一个压缩包。在指定的路径下面解压后和得到以下内容：\n```shell\ndu -sh SimulIDE_1.1.0-SR1_Lin64\n76M\tSimulIDE_1.1.0-SR1_Lin64\n\ntree -L 1 SimulIDE_1.1.0-SR1_Lin64\nSimulIDE_1.1.0-SR1_Lin64\n├── data\n├── examples\n└── simulide\n\n3 directories, 1 file\n```\n可以看到解压后的到小也就80M的样子，还是很小的。其中 simulide 是可执行文件，examples/ 下是官方提供的一些例子，data是simulide 运行所需的所有文件。要使用 SimulIED 时只需启动 simulide 即可。\n## 简单使用\n具体使用说明可参考[官方文档](https://simulide.com/p/simulidekb/)  \n下面仅演示如何使用用例\n### 使用官方用例\n用例之一位置:  \n`SimulIDE_1.1.0-SR1_Lin64/examples/Micro/mcs-51/mcs-51_switch`\n1. 运行 simulide 可执行文件\n```shell\n./simulide\n```\n结果如下：\n![](./pictures/run.png)\n\n# TODO:<u>不想写文档啦，就先这样啦</u>\n","slug":"study-notes/virtual/SimulIDE/simulIDE","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nbsy6i000guvjxan65cfs5","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<p>#SimulIED</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://simulide.com/p/\">SimulIDE</a> 是一个简单的实时电子电路模拟器，旨在供业余爱好者或学生学习和试验模拟和数字电子电路和微控制器。它支持 PIC、AVR、Arduino 和其他 MCU 和 MPU。</p>\n<h2 id=\"吸引我的点\"><a href=\"#吸引我的点\" class=\"headerlink\" title=\"吸引我的点\"></a>吸引我的点</h2><ol>\n<li>免费</li>\n<li>免安装</li>\n<li>多平台（windows、mac、linux）都可用</li>\n</ol>\n<h2 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h2><p>笔者实在ubuntu环境下使用的，搭配 sdcc 编译器可是编写、调试比较mcs51等单片机底层的东西，很适合喜欢在变成方面刨根问底的朋友。</p>\n<h2 id=\"“下载安装”\"><a href=\"#“下载安装”\" class=\"headerlink\" title=\"“下载安装”\"></a>“下载安装”</h2><ol>\n<li>登录<a href=\"https://simulide.com/p/\">官网</a>，选择 Downloads &gt; official versions</li>\n</ol>\n\n<ol start=\"2\">\n<li>选择自己想要的版本(笔者选择的是1.1.0)并点击</li>\n</ol>\n\n<ol start=\"3\">\n<li>选择按照自己的操作系统选择不同的平台，笔者使用的是ubuntu，所以选择了Linux64。至于下面的“爱心”，笔者就后者脸皮写了 0 啦（白剽，嘻嘻），然后点击 Download 即可下载</li>\n</ol>\n\n<ol start=\"4\">\n<li>下载之后会得到一个压缩包。在指定的路径下面解压后和得到以下内容：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -sh SimulIDE_1.1.0-SR1_Lin64</span><br><span class=\"line\">76M\tSimulIDE_1.1.0-SR1_Lin64</span><br><span class=\"line\"></span><br><span class=\"line\">tree -L 1 SimulIDE_1.1.0-SR1_Lin64</span><br><span class=\"line\">SimulIDE_1.1.0-SR1_Lin64</span><br><span class=\"line\">├── data</span><br><span class=\"line\">├── examples</span><br><span class=\"line\">└── simulide</span><br><span class=\"line\"></span><br><span class=\"line\">3 directories, 1 file</span><br></pre></td></tr></table></figure>\n<p>可以看到解压后的到小也就80M的样子，还是很小的。其中 simulide 是可执行文件，examples&#x2F; 下是官方提供的一些例子，data是simulide 运行所需的所有文件。要使用 SimulIED 时只需启动 simulide 即可。</p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p>具体使用说明可参考<a href=\"https://simulide.com/p/simulidekb/\">官方文档</a><br>下面仅演示如何使用用例</p>\n<h3 id=\"使用官方用例\"><a href=\"#使用官方用例\" class=\"headerlink\" title=\"使用官方用例\"></a>使用官方用例</h3><p>用例之一位置:<br><code>SimulIDE_1.1.0-SR1_Lin64/examples/Micro/mcs-51/mcs-51_switch</code></p>\n<ol>\n<li>运行 simulide 可执行文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./simulide</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n\n\n<h1 id=\"TODO-不想写文档啦，就先这样啦\"><a href=\"#TODO-不想写文档啦，就先这样啦\" class=\"headerlink\" title=\"TODO:不想写文档啦，就先这样啦\"></a>TODO:<u>不想写文档啦，就先这样啦</u></h1>","excerpt":"","more":"<p>[toc]</p>\n<p>#SimulIED</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://simulide.com/p/\">SimulIDE</a> 是一个简单的实时电子电路模拟器，旨在供业余爱好者或学生学习和试验模拟和数字电子电路和微控制器。它支持 PIC、AVR、Arduino 和其他 MCU 和 MPU。</p>\n<h2 id=\"吸引我的点\"><a href=\"#吸引我的点\" class=\"headerlink\" title=\"吸引我的点\"></a>吸引我的点</h2><ol>\n<li>免费</li>\n<li>免安装</li>\n<li>多平台（windows、mac、linux）都可用</li>\n</ol>\n<h2 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h2><p>笔者实在ubuntu环境下使用的，搭配 sdcc 编译器可是编写、调试比较mcs51等单片机底层的东西，很适合喜欢在变成方面刨根问底的朋友。</p>\n<h2 id=\"“下载安装”\"><a href=\"#“下载安装”\" class=\"headerlink\" title=\"“下载安装”\"></a>“下载安装”</h2><ol>\n<li>登录<a href=\"https://simulide.com/p/\">官网</a>，选择 Downloads &gt; official versions</li>\n</ol>\n\n<ol start=\"2\">\n<li>选择自己想要的版本(笔者选择的是1.1.0)并点击</li>\n</ol>\n\n<ol start=\"3\">\n<li>选择按照自己的操作系统选择不同的平台，笔者使用的是ubuntu，所以选择了Linux64。至于下面的“爱心”，笔者就后者脸皮写了 0 啦（白剽，嘻嘻），然后点击 Download 即可下载</li>\n</ol>\n\n<ol start=\"4\">\n<li>下载之后会得到一个压缩包。在指定的路径下面解压后和得到以下内容：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -sh SimulIDE_1.1.0-SR1_Lin64</span><br><span class=\"line\">76M\tSimulIDE_1.1.0-SR1_Lin64</span><br><span class=\"line\"></span><br><span class=\"line\">tree -L 1 SimulIDE_1.1.0-SR1_Lin64</span><br><span class=\"line\">SimulIDE_1.1.0-SR1_Lin64</span><br><span class=\"line\">├── data</span><br><span class=\"line\">├── examples</span><br><span class=\"line\">└── simulide</span><br><span class=\"line\"></span><br><span class=\"line\">3 directories, 1 file</span><br></pre></td></tr></table></figure>\n<p>可以看到解压后的到小也就80M的样子，还是很小的。其中 simulide 是可执行文件，examples&#x2F; 下是官方提供的一些例子，data是simulide 运行所需的所有文件。要使用 SimulIED 时只需启动 simulide 即可。</p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p>具体使用说明可参考<a href=\"https://simulide.com/p/simulidekb/\">官方文档</a><br>下面仅演示如何使用用例</p>\n<h3 id=\"使用官方用例\"><a href=\"#使用官方用例\" class=\"headerlink\" title=\"使用官方用例\"></a>使用官方用例</h3><p>用例之一位置:<br><code>SimulIDE_1.1.0-SR1_Lin64/examples/Micro/mcs-51/mcs-51_switch</code></p>\n<ol>\n<li>运行 simulide 可执行文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./simulide</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n\n\n<h1 id=\"TODO-不想写文档啦，就先这样啦\"><a href=\"#TODO-不想写文档啦，就先这样啦\" class=\"headerlink\" title=\"TODO:不想写文档啦，就先这样啦\"></a>TODO:<u>不想写文档啦，就先这样啦</u></h1>"},{"title":"docker","toc":true,"_content":"[toc]\n\n# 常用命令\n```shell\n# 拉去镜像\ndocker image pull <image_name:version_no>\n```\n# 查看镜像\n```shell\ndocker images\n```\n# 使用镜像创建容器\n```shell\ndocker create -it -v <host-dir-path>:</container_dir_path> --name my-container   <image_name>\n# -it   :交互模式\n# -v    :共享目录\n```\n\n\n# 启用容器\n```shell\ndocker start <container_id> bash\n```\n\n# 进入容器\n```shell\ndocker attach <container_id>\n```\n\n# 在x86-64中实现arm平台\n1. docker配置\n```shell\n# 开启experimental 功能配置\n# 查看\ndocker info | grep -i 'experimental'\n# 配置\n在`/etc/docker/`\n在`/etc/docker/daemon.json`中添加 experimental = true\"\n```\n2. 配置 qemu-user-static\n```shell\n注册可支持的架构解析器\ndocker run --rm --privileged multiarch/qemu-user-static:register --reset\n```\n\n","source":"_posts/study-notes/virtual/docker/docker.md","raw":"---\ntitle: docker\ntoc: true\n---\n[toc]\n\n# 常用命令\n```shell\n# 拉去镜像\ndocker image pull <image_name:version_no>\n```\n# 查看镜像\n```shell\ndocker images\n```\n# 使用镜像创建容器\n```shell\ndocker create -it -v <host-dir-path>:</container_dir_path> --name my-container   <image_name>\n# -it   :交互模式\n# -v    :共享目录\n```\n\n\n# 启用容器\n```shell\ndocker start <container_id> bash\n```\n\n# 进入容器\n```shell\ndocker attach <container_id>\n```\n\n# 在x86-64中实现arm平台\n1. docker配置\n```shell\n# 开启experimental 功能配置\n# 查看\ndocker info | grep -i 'experimental'\n# 配置\n在`/etc/docker/`\n在`/etc/docker/daemon.json`中添加 experimental = true\"\n```\n2. 配置 qemu-user-static\n```shell\n注册可支持的架构解析器\ndocker run --rm --privileged multiarch/qemu-user-static:register --reset\n```\n\n","slug":"study-notes/virtual/docker/docker","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nbsy6j000huvjx3bws37xq","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉去镜像</span></span><br><span class=\"line\">docker image pull &lt;image_name:version_no&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用镜像创建容器\"><a href=\"#使用镜像创建容器\" class=\"headerlink\" title=\"使用镜像创建容器\"></a>使用镜像创建容器</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create -it -v &lt;host-dir-path&gt;:&lt;/container_dir_path&gt; --name my-container   &lt;image_name&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-it   :交互模式</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-v    :共享目录</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"启用容器\"><a href=\"#启用容器\" class=\"headerlink\" title=\"启用容器\"></a>启用容器</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start &lt;container_id&gt; bash</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach &lt;container_id&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在x86-64中实现arm平台\"><a href=\"#在x86-64中实现arm平台\" class=\"headerlink\" title=\"在x86-64中实现arm平台\"></a>在x86-64中实现arm平台</h1><ol>\n<li>docker配置</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启experimental 功能配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看</span></span><br><span class=\"line\">docker info | grep -i &#x27;experimental&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置</span></span><br><span class=\"line\">在`/etc/docker/`</span><br><span class=\"line\">在`/etc/docker/daemon.json`中添加 experimental = true&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置 qemu-user-static</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册可支持的架构解析器</span><br><span class=\"line\">docker run --rm --privileged multiarch/qemu-user-static:register --reset</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">拉去镜像</span></span><br><span class=\"line\">docker image pull &lt;image_name:version_no&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用镜像创建容器\"><a href=\"#使用镜像创建容器\" class=\"headerlink\" title=\"使用镜像创建容器\"></a>使用镜像创建容器</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker create -it -v &lt;host-dir-path&gt;:&lt;/container_dir_path&gt; --name my-container   &lt;image_name&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-it   :交互模式</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-v    :共享目录</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"启用容器\"><a href=\"#启用容器\" class=\"headerlink\" title=\"启用容器\"></a>启用容器</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start &lt;container_id&gt; bash</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach &lt;container_id&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"在x86-64中实现arm平台\"><a href=\"#在x86-64中实现arm平台\" class=\"headerlink\" title=\"在x86-64中实现arm平台\"></a>在x86-64中实现arm平台</h1><ol>\n<li>docker配置</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启experimental 功能配置</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看</span></span><br><span class=\"line\">docker info | grep -i &#x27;experimental&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置</span></span><br><span class=\"line\">在`/etc/docker/`</span><br><span class=\"line\">在`/etc/docker/daemon.json`中添加 experimental = true&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置 qemu-user-static</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注册可支持的架构解析器</span><br><span class=\"line\">docker run --rm --privileged multiarch/qemu-user-static:register --reset</span><br></pre></td></tr></table></figure>\n\n"},{"title":"系统仿真","toc":true,"_content":"[toc]\n\n# qemu 命令行的一般形式\n```shell\nqemu-system-x86_64 [machine opts]   \\\n                [cpu opts]          \\\n                [accelerator opts]  \\\n                [device opts]       \\\n                [backend opts]      \\\n                [interface opts]    \\\n                [boot opts]\n```\n大多数选项都有帮助信息，例如：\n```shell\nqemu-system-x86_64 -M help\n```\n# 选项概览\n![选项介绍](./pictures/options-overview.png)\n","source":"_posts/study-notes/virtual/qemu/system-emulation.md","raw":"---\ntitle: 系统仿真\ntoc: true\n---\n[toc]\n\n# qemu 命令行的一般形式\n```shell\nqemu-system-x86_64 [machine opts]   \\\n                [cpu opts]          \\\n                [accelerator opts]  \\\n                [device opts]       \\\n                [backend opts]      \\\n                [interface opts]    \\\n                [boot opts]\n```\n大多数选项都有帮助信息，例如：\n```shell\nqemu-system-x86_64 -M help\n```\n# 选项概览\n![选项介绍](./pictures/options-overview.png)\n","slug":"study-notes/virtual/qemu/system-emulation","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nbsy6l000juvjxbkjabtgy","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"qemu-命令行的一般形式\"><a href=\"#qemu-命令行的一般形式\" class=\"headerlink\" title=\"qemu 命令行的一般形式\"></a>qemu 命令行的一般形式</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 [machine opts]   \\</span><br><span class=\"line\">                [cpu opts]          \\</span><br><span class=\"line\">                [accelerator opts]  \\</span><br><span class=\"line\">                [device opts]       \\</span><br><span class=\"line\">                [backend opts]      \\</span><br><span class=\"line\">                [interface opts]    \\</span><br><span class=\"line\">                [boot opts]</span><br></pre></td></tr></table></figure>\n<p>大多数选项都有帮助信息，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 -M help</span><br></pre></td></tr></table></figure>\n<h1 id=\"选项概览\"><a href=\"#选项概览\" class=\"headerlink\" title=\"选项概览\"></a>选项概览</h1>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"qemu-命令行的一般形式\"><a href=\"#qemu-命令行的一般形式\" class=\"headerlink\" title=\"qemu 命令行的一般形式\"></a>qemu 命令行的一般形式</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 [machine opts]   \\</span><br><span class=\"line\">                [cpu opts]          \\</span><br><span class=\"line\">                [accelerator opts]  \\</span><br><span class=\"line\">                [device opts]       \\</span><br><span class=\"line\">                [backend opts]      \\</span><br><span class=\"line\">                [interface opts]    \\</span><br><span class=\"line\">                [boot opts]</span><br></pre></td></tr></table></figure>\n<p>大多数选项都有帮助信息，例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 -M help</span><br></pre></td></tr></table></figure>\n<h1 id=\"选项概览\"><a href=\"#选项概览\" class=\"headerlink\" title=\"选项概览\"></a>选项概览</h1>\n"},{"title":"make","toc":true,"_content":"[toc]\n\n---\n# 宏  \n* make 允许使用类似变量的宏，格式为：\n    ```make\n    macros_name = value\n    ```\n* 示例\n    ```make\n    MACROS  = -me\n    PSROFF  = groff -Tps\n    DITROFF = groff -Tdvi\n    CFLAGS  = -O -systype bsd43\n    LIBS    = \"-lncurses -lm -lsdl\"\n    MYFACE  = \":*)\"\n    ```\n---\n# 特殊宏\n* `$@`\n    表示规则的目标文件名。如果目标是一个文档文件（Linux中，一般称.a文件为文档文件，也称为静态库文件），那么它代表这个文档的文件名。在多目标模式规则中，它代表的是哪个触发规则被执行的目标文件名。\n* `$%`\n    当规则的目标文件是一个静态库文件时，代表静态库的一个成员名。例如，规则的目标是“foo.a(bar.o)”，那么，“$%”的值就为“bar.o”，“$@”的值为“foo.a”。如果目标不是静态库文件，其值为空\n* `$<`\n    规则的第一个依赖文件名。如果是一个目标文件使用隐含规则来重建，则它代表由隐含规则加入的第一个依赖文件。\n* `$?`\n    所有比目标文件更新的依赖文件列表，空格分割。如果目标是静态库文件名，代表的是库成员（.o文件）。\n* `$^`\n    规则的所有依赖文件列表，使用空格分隔。如果目标是静态库文件，它所代表的只能是所有库成员（.o文件）名。一个文件可重复的出现在目标的依赖中，变量“$^”只记录它的一次引用情况。就是说变量“$^”会去掉重复的依赖文件。\n* `$+`\n    类似“$^”，但是它保留了依赖文件中重复出现的文件。主要用在程序链接时库的交叉引用场合。\n* `$*`\n    在 模式规则和静态模式规则中，代表“茎”。“茎”是目标模式中“%”所代表的部分（当文件名中存在目录时，“茎”也包含目录（斜杠之前）部分）。例如：文件 “dir/a.foo.b”，当目标的模式为“a.%.b”时，“$*”的值为“dir/a.foo”。“茎”对于构造相关文件名非常有用。\n\n---\n# 约定俗成的目标\n    all: 编译所有\n    install: 安装\n    clean: 清理\n    .PHONY: 伪目标\n        .PHONY作用：可以避免目标与文件名的冲突;在执行伪目标时，操作必然执行。\n# 依赖相关\n## 文件名的处理方法\n1. 使用shell获取文件名\n```make\nSOURCE_FILES = $(shell find ./source_dir -type f -name '*.c')\n```\n2. 替换文件后缀\n```make\nOBJECTS = $(SOURCE_FILES:.cpp=.o)\n```\n## 产生依赖的模式规则\n1. 将`.c`文件转换为`.o`文件\n```make\n.c.o:\n    $(AS) -c $< -o $*.o\n```\n","source":"_posts/study-notes/building/build/make.md","raw":"---\ntitle: make\ntoc: true\n---\n[toc]\n\n---\n# 宏  \n* make 允许使用类似变量的宏，格式为：\n    ```make\n    macros_name = value\n    ```\n* 示例\n    ```make\n    MACROS  = -me\n    PSROFF  = groff -Tps\n    DITROFF = groff -Tdvi\n    CFLAGS  = -O -systype bsd43\n    LIBS    = \"-lncurses -lm -lsdl\"\n    MYFACE  = \":*)\"\n    ```\n---\n# 特殊宏\n* `$@`\n    表示规则的目标文件名。如果目标是一个文档文件（Linux中，一般称.a文件为文档文件，也称为静态库文件），那么它代表这个文档的文件名。在多目标模式规则中，它代表的是哪个触发规则被执行的目标文件名。\n* `$%`\n    当规则的目标文件是一个静态库文件时，代表静态库的一个成员名。例如，规则的目标是“foo.a(bar.o)”，那么，“$%”的值就为“bar.o”，“$@”的值为“foo.a”。如果目标不是静态库文件，其值为空\n* `$<`\n    规则的第一个依赖文件名。如果是一个目标文件使用隐含规则来重建，则它代表由隐含规则加入的第一个依赖文件。\n* `$?`\n    所有比目标文件更新的依赖文件列表，空格分割。如果目标是静态库文件名，代表的是库成员（.o文件）。\n* `$^`\n    规则的所有依赖文件列表，使用空格分隔。如果目标是静态库文件，它所代表的只能是所有库成员（.o文件）名。一个文件可重复的出现在目标的依赖中，变量“$^”只记录它的一次引用情况。就是说变量“$^”会去掉重复的依赖文件。\n* `$+`\n    类似“$^”，但是它保留了依赖文件中重复出现的文件。主要用在程序链接时库的交叉引用场合。\n* `$*`\n    在 模式规则和静态模式规则中，代表“茎”。“茎”是目标模式中“%”所代表的部分（当文件名中存在目录时，“茎”也包含目录（斜杠之前）部分）。例如：文件 “dir/a.foo.b”，当目标的模式为“a.%.b”时，“$*”的值为“dir/a.foo”。“茎”对于构造相关文件名非常有用。\n\n---\n# 约定俗成的目标\n    all: 编译所有\n    install: 安装\n    clean: 清理\n    .PHONY: 伪目标\n        .PHONY作用：可以避免目标与文件名的冲突;在执行伪目标时，操作必然执行。\n# 依赖相关\n## 文件名的处理方法\n1. 使用shell获取文件名\n```make\nSOURCE_FILES = $(shell find ./source_dir -type f -name '*.c')\n```\n2. 替换文件后缀\n```make\nOBJECTS = $(SOURCE_FILES:.cpp=.o)\n```\n## 产生依赖的模式规则\n1. 将`.c`文件转换为`.o`文件\n```make\n.c.o:\n    $(AS) -c $< -o $*.o\n```\n","slug":"study-notes/building/build/make","published":1,"date":"2025-02-02T09:13:27.515Z","updated":"2025-02-02T09:13:27.515Z","_id":"cm6nccynj00008ijx3wte13zl","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<hr>\n<h1 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h1><ul>\n<li>make 允许使用类似变量的宏，格式为：  <figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">macros_name = value</span><br></pre></td></tr></table></figure></li>\n<li>示例  <figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MACROS  = -me</span><br><span class=\"line\">PSROFF  = groff -Tps</span><br><span class=\"line\">DITROFF = groff -Tdvi</span><br><span class=\"line\">CFLAGS  = -O -systype bsd43</span><br><span class=\"line\">LIBS    = <span class=\"string\">&quot;-lncurses -lm -lsdl&quot;</span></span><br><span class=\"line\">MYFACE  = <span class=\"string\">&quot;:*)&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"特殊宏\"><a href=\"#特殊宏\" class=\"headerlink\" title=\"特殊宏\"></a>特殊宏</h1><ul>\n<li><code>$@</code><br>  表示规则的目标文件名。如果目标是一个文档文件（Linux中，一般称.a文件为文档文件，也称为静态库文件），那么它代表这个文档的文件名。在多目标模式规则中，它代表的是哪个触发规则被执行的目标文件名。</li>\n<li><code>$%</code><br>  当规则的目标文件是一个静态库文件时，代表静态库的一个成员名。例如，规则的目标是“foo.a(bar.o)”，那么，“$%”的值就为“bar.o”，“$@”的值为“foo.a”。如果目标不是静态库文件，其值为空</li>\n<li><code>$&lt;</code><br>  规则的第一个依赖文件名。如果是一个目标文件使用隐含规则来重建，则它代表由隐含规则加入的第一个依赖文件。</li>\n<li><code>$?</code><br>  所有比目标文件更新的依赖文件列表，空格分割。如果目标是静态库文件名，代表的是库成员（.o文件）。</li>\n<li><code>$^</code><br>  规则的所有依赖文件列表，使用空格分隔。如果目标是静态库文件，它所代表的只能是所有库成员（.o文件）名。一个文件可重复的出现在目标的依赖中，变量“$^”只记录它的一次引用情况。就是说变量“$^”会去掉重复的依赖文件。</li>\n<li><code>$+</code><br>  类似“$^”，但是它保留了依赖文件中重复出现的文件。主要用在程序链接时库的交叉引用场合。</li>\n<li><code>$*</code><br>  在 模式规则和静态模式规则中，代表“茎”。“茎”是目标模式中“%”所代表的部分（当文件名中存在目录时，“茎”也包含目录（斜杠之前）部分）。例如：文件 “dir&#x2F;a.foo.b”，当目标的模式为“a.%.b”时，“$*”的值为“dir&#x2F;a.foo”。“茎”对于构造相关文件名非常有用。</li>\n</ul>\n<hr>\n<h1 id=\"约定俗成的目标\"><a href=\"#约定俗成的目标\" class=\"headerlink\" title=\"约定俗成的目标\"></a>约定俗成的目标</h1><pre><code>all: 编译所有\ninstall: 安装\nclean: 清理\n.PHONY: 伪目标\n    .PHONY作用：可以避免目标与文件名的冲突;在执行伪目标时，操作必然执行。\n</code></pre>\n<h1 id=\"依赖相关\"><a href=\"#依赖相关\" class=\"headerlink\" title=\"依赖相关\"></a>依赖相关</h1><h2 id=\"文件名的处理方法\"><a href=\"#文件名的处理方法\" class=\"headerlink\" title=\"文件名的处理方法\"></a>文件名的处理方法</h2><ol>\n<li>使用shell获取文件名</li>\n</ol>\n<figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SOURCE_FILES = <span class=\"variable\">$(<span class=\"built_in\">shell</span> find ./source_dir -type f -name &#x27;*.c&#x27;)</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>替换文件后缀</li>\n</ol>\n<figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJECTS = $(SOURCE_FILES:.cpp=.o)</span><br></pre></td></tr></table></figure>\n<h2 id=\"产生依赖的模式规则\"><a href=\"#产生依赖的模式规则\" class=\"headerlink\" title=\"产生依赖的模式规则\"></a>产生依赖的模式规则</h2><ol>\n<li>将<code>.c</code>文件转换为<code>.o</code>文件</li>\n</ol>\n<figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">.c.o:</span></span><br><span class=\"line\">    <span class=\"variable\">$(AS)</span> -c <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$*</span>.o</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<hr>\n<h1 id=\"宏\"><a href=\"#宏\" class=\"headerlink\" title=\"宏\"></a>宏</h1><ul>\n<li>make 允许使用类似变量的宏，格式为：  <figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">macros_name = value</span><br></pre></td></tr></table></figure></li>\n<li>示例  <figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MACROS  = -me</span><br><span class=\"line\">PSROFF  = groff -Tps</span><br><span class=\"line\">DITROFF = groff -Tdvi</span><br><span class=\"line\">CFLAGS  = -O -systype bsd43</span><br><span class=\"line\">LIBS    = <span class=\"string\">&quot;-lncurses -lm -lsdl&quot;</span></span><br><span class=\"line\">MYFACE  = <span class=\"string\">&quot;:*)&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"特殊宏\"><a href=\"#特殊宏\" class=\"headerlink\" title=\"特殊宏\"></a>特殊宏</h1><ul>\n<li><code>$@</code><br>  表示规则的目标文件名。如果目标是一个文档文件（Linux中，一般称.a文件为文档文件，也称为静态库文件），那么它代表这个文档的文件名。在多目标模式规则中，它代表的是哪个触发规则被执行的目标文件名。</li>\n<li><code>$%</code><br>  当规则的目标文件是一个静态库文件时，代表静态库的一个成员名。例如，规则的目标是“foo.a(bar.o)”，那么，“$%”的值就为“bar.o”，“$@”的值为“foo.a”。如果目标不是静态库文件，其值为空</li>\n<li><code>$&lt;</code><br>  规则的第一个依赖文件名。如果是一个目标文件使用隐含规则来重建，则它代表由隐含规则加入的第一个依赖文件。</li>\n<li><code>$?</code><br>  所有比目标文件更新的依赖文件列表，空格分割。如果目标是静态库文件名，代表的是库成员（.o文件）。</li>\n<li><code>$^</code><br>  规则的所有依赖文件列表，使用空格分隔。如果目标是静态库文件，它所代表的只能是所有库成员（.o文件）名。一个文件可重复的出现在目标的依赖中，变量“$^”只记录它的一次引用情况。就是说变量“$^”会去掉重复的依赖文件。</li>\n<li><code>$+</code><br>  类似“$^”，但是它保留了依赖文件中重复出现的文件。主要用在程序链接时库的交叉引用场合。</li>\n<li><code>$*</code><br>  在 模式规则和静态模式规则中，代表“茎”。“茎”是目标模式中“%”所代表的部分（当文件名中存在目录时，“茎”也包含目录（斜杠之前）部分）。例如：文件 “dir&#x2F;a.foo.b”，当目标的模式为“a.%.b”时，“$*”的值为“dir&#x2F;a.foo”。“茎”对于构造相关文件名非常有用。</li>\n</ul>\n<hr>\n<h1 id=\"约定俗成的目标\"><a href=\"#约定俗成的目标\" class=\"headerlink\" title=\"约定俗成的目标\"></a>约定俗成的目标</h1><pre><code>all: 编译所有\ninstall: 安装\nclean: 清理\n.PHONY: 伪目标\n    .PHONY作用：可以避免目标与文件名的冲突;在执行伪目标时，操作必然执行。\n</code></pre>\n<h1 id=\"依赖相关\"><a href=\"#依赖相关\" class=\"headerlink\" title=\"依赖相关\"></a>依赖相关</h1><h2 id=\"文件名的处理方法\"><a href=\"#文件名的处理方法\" class=\"headerlink\" title=\"文件名的处理方法\"></a>文件名的处理方法</h2><ol>\n<li>使用shell获取文件名</li>\n</ol>\n<figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SOURCE_FILES = <span class=\"variable\">$(<span class=\"built_in\">shell</span> find ./source_dir -type f -name &#x27;*.c&#x27;)</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>替换文件后缀</li>\n</ol>\n<figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJECTS = $(SOURCE_FILES:.cpp=.o)</span><br></pre></td></tr></table></figure>\n<h2 id=\"产生依赖的模式规则\"><a href=\"#产生依赖的模式规则\" class=\"headerlink\" title=\"产生依赖的模式规则\"></a>产生依赖的模式规则</h2><ol>\n<li>将<code>.c</code>文件转换为<code>.o</code>文件</li>\n</ol>\n<figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">.c.o:</span></span><br><span class=\"line\">    <span class=\"variable\">$(AS)</span> -c <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$*</span>.o</span><br></pre></td></tr></table></figure>\n"},{"title":"客户端","toc":true,"_content":"[toc]\n\n\n# clash verge\n地址：https://www.clashverge.dev/\n","source":"_posts/tools/科学上网/客户端.md","raw":"---\ntitle: 客户端\ntoc: true\n---\n[toc]\n\n\n# clash verge\n地址：https://www.clashverge.dev/\n","slug":"tools/科学上网/客户端","published":1,"date":"2025-02-02T08:47:49.324Z","updated":"2025-02-02T08:47:49.324Z","_id":"cm6nd3le4000eoxjxbi706xzl","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"clash-verge\"><a href=\"#clash-verge\" class=\"headerlink\" title=\"clash verge\"></a>clash verge</h1><p>地址：<a href=\"https://www.clashverge.dev/\">https://www.clashverge.dev/</a></p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"clash-verge\"><a href=\"#clash-verge\" class=\"headerlink\" title=\"clash verge\"></a>clash verge</h1><p>地址：<a href=\"https://www.clashverge.dev/\">https://www.clashverge.dev/</a></p>\n"},{"title":"机场","toc":true,"_content":"[toc]\n\n\n# SSRDOG\n地址：https://c.ssrdog222.com/\n","source":"_posts/tools/科学上网/机场.md","raw":"---\ntitle: 机场\ntoc: true\n---\n[toc]\n\n\n# SSRDOG\n地址：https://c.ssrdog222.com/\n","slug":"tools/科学上网/机场","published":1,"date":"2025-02-02T08:47:49.324Z","updated":"2025-02-02T08:47:49.325Z","_id":"cm6nd3le5000foxjxg9qb7acz","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"SSRDOG\"><a href=\"#SSRDOG\" class=\"headerlink\" title=\"SSRDOG\"></a>SSRDOG</h1><p>地址：<a href=\"https://c.ssrdog222.com/\">https://c.ssrdog222.com/</a></p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"SSRDOG\"><a href=\"#SSRDOG\" class=\"headerlink\" title=\"SSRDOG\"></a>SSRDOG</h1><p>地址：<a href=\"https://c.ssrdog222.com/\">https://c.ssrdog222.com/</a></p>\n"},{"_content":"# 简介\n”工欲善其事，必先利其器“。所以，收集一些好用的工具还是很有必要的。  \n","source":"_posts/tools/README.md","raw":"# 简介\n”工欲善其事，必先利其器“。所以，收集一些好用的工具还是很有必要的。  \n","slug":"tools/README","published":1,"date":"2025-02-02T08:44:51.992Z","updated":"2025-02-02T08:44:51.993Z","_id":"cm6nd3llo0012oxjx8wtph54q","title":"","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>”工欲善其事，必先利其器“。所以，收集一些好用的工具还是很有必要的。  </p>\n","excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>”工欲善其事，必先利其器“。所以，收集一些好用的工具还是很有必要的。  </p>\n"},{"title":"flameshot","_content":"[toc]\n\n\n# Flameshot\n## 简介\n&emsp;[Flameshot](https://flameshot.org/#download)是一个很好的截图工具，支持截图编辑、置顶操作。支持windows/macOS/Linux。\n## 下载\n### ubuntu\n```shell\nsudo apt install flameshot\n```\n## 基础用法\n基础用法参考[基础操作](https://docs.snipaste.com/zh-cn/getting-started)\n## 常用快捷操作\n* 截图  \n在ubuntu系统上设置截图快捷键\n![](./flameshot/ubuntu-shotkey.png)\n![](./flameshot/ubunt-add-shotkey.png)\n* 置顶  \n可在clameshot的配置选项中配置，笔者配置为`<space>`  \n* 置顶后取消  \n**双击** 被置顶的图片\n\n# 避坑\n## ubuntu配置flameshot截图快捷键后无效\n解决办法有两种：\n* [官方给出的办法](https://flameshot.org/docs/guide/wayland-help/)：通过脚本运行`flameshot gui`\n```shell\nscript --command \"QT_QPA_PLATFORM=wayland flameshot gui\" /dev/null\n# or\nbash -c -- \"QT_QPA_PLATFORM=wayland flameshot gui\"\n# or\nsh -c -- \"QT_QPA_PLATFORM=wayland flameshot gui\"\n```\n* 其他办法：\n    * 1. 在登陆账户时，在屏幕左下角有个设置图标,点击图标\n    * 2. 在显示的session中选择 **ubuntu on xorg**\n    * 3. 登陆账户即可\n\n","source":"_posts/tools/flameshot.md","raw":"---\ntitle: flameshot\n---\n[toc]\n\n\n# Flameshot\n## 简介\n&emsp;[Flameshot](https://flameshot.org/#download)是一个很好的截图工具，支持截图编辑、置顶操作。支持windows/macOS/Linux。\n## 下载\n### ubuntu\n```shell\nsudo apt install flameshot\n```\n## 基础用法\n基础用法参考[基础操作](https://docs.snipaste.com/zh-cn/getting-started)\n## 常用快捷操作\n* 截图  \n在ubuntu系统上设置截图快捷键\n![](./flameshot/ubuntu-shotkey.png)\n![](./flameshot/ubunt-add-shotkey.png)\n* 置顶  \n可在clameshot的配置选项中配置，笔者配置为`<space>`  \n* 置顶后取消  \n**双击** 被置顶的图片\n\n# 避坑\n## ubuntu配置flameshot截图快捷键后无效\n解决办法有两种：\n* [官方给出的办法](https://flameshot.org/docs/guide/wayland-help/)：通过脚本运行`flameshot gui`\n```shell\nscript --command \"QT_QPA_PLATFORM=wayland flameshot gui\" /dev/null\n# or\nbash -c -- \"QT_QPA_PLATFORM=wayland flameshot gui\"\n# or\nsh -c -- \"QT_QPA_PLATFORM=wayland flameshot gui\"\n```\n* 其他办法：\n    * 1. 在登陆账户时，在屏幕左下角有个设置图标,点击图标\n    * 2. 在显示的session中选择 **ubuntu on xorg**\n    * 3. 登陆账户即可\n\n","slug":"tools/flameshot","published":1,"date":"2025-02-02T08:44:51.993Z","updated":"2025-02-02T08:44:51.993Z","_id":"cm6ndmahm000080jx65xt1h2s","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"Flameshot\"><a href=\"#Flameshot\" class=\"headerlink\" title=\"Flameshot\"></a>Flameshot</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>&emsp;<a href=\"https://flameshot.org/#download\">Flameshot</a>是一个很好的截图工具，支持截图编辑、置顶操作。支持windows&#x2F;macOS&#x2F;Linux。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><h3 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install flameshot</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h2><p>基础用法参考<a href=\"https://docs.snipaste.com/zh-cn/getting-started\">基础操作</a></p>\n<h2 id=\"常用快捷操作\"><a href=\"#常用快捷操作\" class=\"headerlink\" title=\"常用快捷操作\"></a>常用快捷操作</h2><ul>\n<li>截图<br>在ubuntu系统上设置截图快捷键</li>\n</ul>\n<img src=\"/undefined/tools/flameshot/ubuntu-shotkey.png\" class=\"\">\n<img src=\"/undefined/tools/flameshot/ubunt-add-shotkey.png\" class=\"\">\n<ul>\n<li>置顶<br>可在clameshot的配置选项中配置，笔者配置为<code>&lt;space&gt;</code>  </li>\n<li>置顶后取消<br><strong>双击</strong> 被置顶的图片</li>\n</ul>\n<h1 id=\"避坑\"><a href=\"#避坑\" class=\"headerlink\" title=\"避坑\"></a>避坑</h1><h2 id=\"ubuntu配置flameshot截图快捷键后无效\"><a href=\"#ubuntu配置flameshot截图快捷键后无效\" class=\"headerlink\" title=\"ubuntu配置flameshot截图快捷键后无效\"></a>ubuntu配置flameshot截图快捷键后无效</h2><p>解决办法有两种：</p>\n<ul>\n<li><a href=\"https://flameshot.org/docs/guide/wayland-help/\">官方给出的办法</a>：通过脚本运行<code>flameshot gui</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script --command &quot;QT_QPA_PLATFORM=wayland flameshot gui&quot; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\">bash -c -- &quot;QT_QPA_PLATFORM=wayland flameshot gui&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\">sh -c -- &quot;QT_QPA_PLATFORM=wayland flameshot gui&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其他办法：<ul>\n<li><ol>\n<li>在登陆账户时，在屏幕左下角有个设置图标,点击图标</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在显示的session中选择 <strong>ubuntu on xorg</strong></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>登陆账户即可</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"Flameshot\"><a href=\"#Flameshot\" class=\"headerlink\" title=\"Flameshot\"></a>Flameshot</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>&emsp;<a href=\"https://flameshot.org/#download\">Flameshot</a>是一个很好的截图工具，支持截图编辑、置顶操作。支持windows&#x2F;macOS&#x2F;Linux。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><h3 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install flameshot</span><br></pre></td></tr></table></figure>\n<h2 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h2><p>基础用法参考<a href=\"https://docs.snipaste.com/zh-cn/getting-started\">基础操作</a></p>\n<h2 id=\"常用快捷操作\"><a href=\"#常用快捷操作\" class=\"headerlink\" title=\"常用快捷操作\"></a>常用快捷操作</h2><ul>\n<li>截图<br>在ubuntu系统上设置截图快捷键</li>\n</ul>\n<img src=\"/undefined/tools/flameshot/ubuntu-shotkey.png\" class=\"\">\n<img src=\"/undefined/tools/flameshot/ubunt-add-shotkey.png\" class=\"\">\n<ul>\n<li>置顶<br>可在clameshot的配置选项中配置，笔者配置为<code>&lt;space&gt;</code>  </li>\n<li>置顶后取消<br><strong>双击</strong> 被置顶的图片</li>\n</ul>\n<h1 id=\"避坑\"><a href=\"#避坑\" class=\"headerlink\" title=\"避坑\"></a>避坑</h1><h2 id=\"ubuntu配置flameshot截图快捷键后无效\"><a href=\"#ubuntu配置flameshot截图快捷键后无效\" class=\"headerlink\" title=\"ubuntu配置flameshot截图快捷键后无效\"></a>ubuntu配置flameshot截图快捷键后无效</h2><p>解决办法有两种：</p>\n<ul>\n<li><a href=\"https://flameshot.org/docs/guide/wayland-help/\">官方给出的办法</a>：通过脚本运行<code>flameshot gui</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script --command &quot;QT_QPA_PLATFORM=wayland flameshot gui&quot; /dev/null</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\">bash -c -- &quot;QT_QPA_PLATFORM=wayland flameshot gui&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">or</span></span><br><span class=\"line\">sh -c -- &quot;QT_QPA_PLATFORM=wayland flameshot gui&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其他办法：<ul>\n<li><ol>\n<li>在登陆账户时，在屏幕左下角有个设置图标,点击图标</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在显示的session中选择 <strong>ubuntu on xorg</strong></li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>登陆账户即可</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"浏览器插件","toc":true,"_content":"[toc]\n\n\n# 油猴 or 篡改猴(tampermonkey)\n功能丰富且强大，没啥可说的。  \n* 地址:https://chromewebstore.google.com/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/dhdgffkkebhmkfjojejmpbldmpobfkfo\n# Markdown Viewer]\n* 简介  \nmarkdown 查看器，可在浏览器上查看本地的markdown文件\n* 使用\n    * 安装插件地址：https://chromewebstore.google.com/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=ext_app_menu\n    * 注意事项:需要在插件配置选项中打开'**允许访问文件网址**'选项\n\n# Surfingkeys\n可以像操作**vim**一样操作浏览\n\n# 沉浸式翻译\ngoogle翻译网络不支持？那么可以试试这个翻译插件，挺棒的。  \n网址：https://chromewebstore.google.com/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-pdf%E7%BF%BB%E8%AF%91-%E5%85%8D%E8%B4%B9/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-CN&utm_source=ext_sidebar\n\n# AdGuard 广告拦截器\n网址：https://chromewebstore.google.com/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg  \n&emsp;AdGuard 是一款广告拦截神器，目前笔者也只是浅尝了以下，在 chrome 浏览器中的效果非常好。笔者的体现之一是：无需在浏览器中登陆youtube账户，即可跳过广告看自己喜欢的视频内容(真香，嘻嘻)  \n&emsp;除了插件，还还有支持 Windows/Mac/IOS/Android 平台的应用程序。其中笔者试了下 Android 上的 AdGuard 应用，部分功能需要订阅(花钱)才能体现，整体来讲没有浏览器插件好用(白嫖真香)\n","source":"_posts/tools/浏览器插件.md","raw":"---\ntitle: 浏览器插件\ntoc: true\n---\n[toc]\n\n\n# 油猴 or 篡改猴(tampermonkey)\n功能丰富且强大，没啥可说的。  \n* 地址:https://chromewebstore.google.com/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/dhdgffkkebhmkfjojejmpbldmpobfkfo\n# Markdown Viewer]\n* 简介  \nmarkdown 查看器，可在浏览器上查看本地的markdown文件\n* 使用\n    * 安装插件地址：https://chromewebstore.google.com/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=ext_app_menu\n    * 注意事项:需要在插件配置选项中打开'**允许访问文件网址**'选项\n\n# Surfingkeys\n可以像操作**vim**一样操作浏览\n\n# 沉浸式翻译\ngoogle翻译网络不支持？那么可以试试这个翻译插件，挺棒的。  \n网址：https://chromewebstore.google.com/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-pdf%E7%BF%BB%E8%AF%91-%E5%85%8D%E8%B4%B9/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-CN&utm_source=ext_sidebar\n\n# AdGuard 广告拦截器\n网址：https://chromewebstore.google.com/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg  \n&emsp;AdGuard 是一款广告拦截神器，目前笔者也只是浅尝了以下，在 chrome 浏览器中的效果非常好。笔者的体现之一是：无需在浏览器中登陆youtube账户，即可跳过广告看自己喜欢的视频内容(真香，嘻嘻)  \n&emsp;除了插件，还还有支持 Windows/Mac/IOS/Android 平台的应用程序。其中笔者试了下 Android 上的 AdGuard 应用，部分功能需要订阅(花钱)才能体现，整体来讲没有浏览器插件好用(白嫖真香)\n","slug":"tools/浏览器插件","published":1,"date":"2025-02-02T08:44:51.993Z","updated":"2025-02-02T08:44:51.993Z","_id":"cm6ndmahv000180jx4phf5y4n","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"油猴-or-篡改猴-tampermonkey\"><a href=\"#油猴-or-篡改猴-tampermonkey\" class=\"headerlink\" title=\"油猴 or 篡改猴(tampermonkey)\"></a>油猴 or 篡改猴(tampermonkey)</h1><p>功能丰富且强大，没啥可说的。  </p>\n<ul>\n<li>地址:<a href=\"https://chromewebstore.google.com/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/dhdgffkkebhmkfjojejmpbldmpobfkfo\">https://chromewebstore.google.com/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/dhdgffkkebhmkfjojejmpbldmpobfkfo</a></li>\n</ul>\n<h1 id=\"Markdown-Viewer\"><a href=\"#Markdown-Viewer\" class=\"headerlink\" title=\"Markdown Viewer]\"></a>Markdown Viewer]</h1><ul>\n<li>简介<br>markdown 查看器，可在浏览器上查看本地的markdown文件</li>\n<li>使用<ul>\n<li>安装插件地址：<a href=\"https://chromewebstore.google.com/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=ext_app_menu\">https://chromewebstore.google.com/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=ext_app_menu</a></li>\n<li>注意事项:需要在插件配置选项中打开’<strong>允许访问文件网址</strong>‘选项</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Surfingkeys\"><a href=\"#Surfingkeys\" class=\"headerlink\" title=\"Surfingkeys\"></a>Surfingkeys</h1><p>可以像操作<strong>vim</strong>一样操作浏览</p>\n<h1 id=\"沉浸式翻译\"><a href=\"#沉浸式翻译\" class=\"headerlink\" title=\"沉浸式翻译\"></a>沉浸式翻译</h1><p>google翻译网络不支持？那么可以试试这个翻译插件，挺棒的。<br>网址：<a href=\"https://chromewebstore.google.com/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-pdf%E7%BF%BB%E8%AF%91-%E5%85%8D%E8%B4%B9/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-CN&utm_source=ext_sidebar\">https://chromewebstore.google.com/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-pdf%E7%BF%BB%E8%AF%91-%E5%85%8D%E8%B4%B9/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-CN&amp;utm_source=ext_sidebar</a></p>\n<h1 id=\"AdGuard-广告拦截器\"><a href=\"#AdGuard-广告拦截器\" class=\"headerlink\" title=\"AdGuard 广告拦截器\"></a>AdGuard 广告拦截器</h1><p>网址：<a href=\"https://chromewebstore.google.com/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg\">https://chromewebstore.google.com/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg</a><br>&emsp;AdGuard 是一款广告拦截神器，目前笔者也只是浅尝了以下，在 chrome 浏览器中的效果非常好。笔者的体现之一是：无需在浏览器中登陆youtube账户，即可跳过广告看自己喜欢的视频内容(真香，嘻嘻)<br>&emsp;除了插件，还还有支持 Windows&#x2F;Mac&#x2F;IOS&#x2F;Android 平台的应用程序。其中笔者试了下 Android 上的 AdGuard 应用，部分功能需要订阅(花钱)才能体现，整体来讲没有浏览器插件好用(白嫖真香)</p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"油猴-or-篡改猴-tampermonkey\"><a href=\"#油猴-or-篡改猴-tampermonkey\" class=\"headerlink\" title=\"油猴 or 篡改猴(tampermonkey)\"></a>油猴 or 篡改猴(tampermonkey)</h1><p>功能丰富且强大，没啥可说的。  </p>\n<ul>\n<li>地址:<a href=\"https://chromewebstore.google.com/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/dhdgffkkebhmkfjojejmpbldmpobfkfo\">https://chromewebstore.google.com/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/dhdgffkkebhmkfjojejmpbldmpobfkfo</a></li>\n</ul>\n<h1 id=\"Markdown-Viewer\"><a href=\"#Markdown-Viewer\" class=\"headerlink\" title=\"Markdown Viewer]\"></a>Markdown Viewer]</h1><ul>\n<li>简介<br>markdown 查看器，可在浏览器上查看本地的markdown文件</li>\n<li>使用<ul>\n<li>安装插件地址：<a href=\"https://chromewebstore.google.com/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=ext_app_menu\">https://chromewebstore.google.com/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=ext_app_menu</a></li>\n<li>注意事项:需要在插件配置选项中打开’<strong>允许访问文件网址</strong>‘选项</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Surfingkeys\"><a href=\"#Surfingkeys\" class=\"headerlink\" title=\"Surfingkeys\"></a>Surfingkeys</h1><p>可以像操作<strong>vim</strong>一样操作浏览</p>\n<h1 id=\"沉浸式翻译\"><a href=\"#沉浸式翻译\" class=\"headerlink\" title=\"沉浸式翻译\"></a>沉浸式翻译</h1><p>google翻译网络不支持？那么可以试试这个翻译插件，挺棒的。<br>网址：<a href=\"https://chromewebstore.google.com/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-pdf%E7%BF%BB%E8%AF%91-%E5%85%8D%E8%B4%B9/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-CN&utm_source=ext_sidebar\">https://chromewebstore.google.com/detail/%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AF%91-%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6-pdf%E7%BF%BB%E8%AF%91-%E5%85%8D%E8%B4%B9/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-CN&amp;utm_source=ext_sidebar</a></p>\n<h1 id=\"AdGuard-广告拦截器\"><a href=\"#AdGuard-广告拦截器\" class=\"headerlink\" title=\"AdGuard 广告拦截器\"></a>AdGuard 广告拦截器</h1><p>网址：<a href=\"https://chromewebstore.google.com/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg\">https://chromewebstore.google.com/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg</a><br>&emsp;AdGuard 是一款广告拦截神器，目前笔者也只是浅尝了以下，在 chrome 浏览器中的效果非常好。笔者的体现之一是：无需在浏览器中登陆youtube账户，即可跳过广告看自己喜欢的视频内容(真香，嘻嘻)<br>&emsp;除了插件，还还有支持 Windows&#x2F;Mac&#x2F;IOS&#x2F;Android 平台的应用程序。其中笔者试了下 Android 上的 AdGuard 应用，部分功能需要订阅(花钱)才能体现，整体来讲没有浏览器插件好用(白嫖真香)</p>\n"},{"title":"阅读","toc":true,"_content":"[toc]\n\n# 阅读\n## 怎么会找到她？\n&emsp;就这2024年12月，我的**微信读书**app的会员到期了，但不想再续费会员了，就想着有没有可以平替的app。答案肯定是当然的啦——**阅读**\n## 下载\n* 较旧的版本可以在**github**上下载, 网址：https://github.com/gedoor/MyBookshelf\n* 新版本可以在官网下载:https://gedoor.github.io/\n## 使用\n刚下载完之后就像个空盒子，是无法食用的，需要导入**书源**才可以。导入方式按官方文档来就可以了。至于**书源**可以自己找。下面网站是我无意中发现的，收集了好多书源链接，反正我是够用啦，哈哈哈 :) :  \n源仓库：https://www.yckceo.com/yuedu/index/index.html\n","source":"_posts/tools/阅读.md","raw":"---\ntitle: 阅读\ntoc: true\n---\n[toc]\n\n# 阅读\n## 怎么会找到她？\n&emsp;就这2024年12月，我的**微信读书**app的会员到期了，但不想再续费会员了，就想着有没有可以平替的app。答案肯定是当然的啦——**阅读**\n## 下载\n* 较旧的版本可以在**github**上下载, 网址：https://github.com/gedoor/MyBookshelf\n* 新版本可以在官网下载:https://gedoor.github.io/\n## 使用\n刚下载完之后就像个空盒子，是无法食用的，需要导入**书源**才可以。导入方式按官方文档来就可以了。至于**书源**可以自己找。下面网站是我无意中发现的，收集了好多书源链接，反正我是够用啦，哈哈哈 :) :  \n源仓库：https://www.yckceo.com/yuedu/index/index.html\n","slug":"tools/阅读","published":1,"date":"2025-02-02T08:44:51.993Z","updated":"2025-02-02T08:44:51.993Z","_id":"cm6ndmahx000280jx4bh424nq","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"阅读\"><a href=\"#阅读\" class=\"headerlink\" title=\"阅读\"></a>阅读</h1><h2 id=\"怎么会找到她？\"><a href=\"#怎么会找到她？\" class=\"headerlink\" title=\"怎么会找到她？\"></a>怎么会找到她？</h2><p>&emsp;就这2024年12月，我的<strong>微信读书</strong>app的会员到期了，但不想再续费会员了，就想着有没有可以平替的app。答案肯定是当然的啦——<strong>阅读</strong></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><ul>\n<li>较旧的版本可以在<strong>github</strong>上下载, 网址：<a href=\"https://github.com/gedoor/MyBookshelf\">https://github.com/gedoor/MyBookshelf</a></li>\n<li>新版本可以在官网下载:<a href=\"https://gedoor.github.io/\">https://gedoor.github.io/</a></li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>刚下载完之后就像个空盒子，是无法食用的，需要导入<strong>书源</strong>才可以。导入方式按官方文档来就可以了。至于<strong>书源</strong>可以自己找。下面网站是我无意中发现的，收集了好多书源链接，反正我是够用啦，哈哈哈 :) :<br>源仓库：<a href=\"https://www.yckceo.com/yuedu/index/index.html\">https://www.yckceo.com/yuedu/index/index.html</a></p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"阅读\"><a href=\"#阅读\" class=\"headerlink\" title=\"阅读\"></a>阅读</h1><h2 id=\"怎么会找到她？\"><a href=\"#怎么会找到她？\" class=\"headerlink\" title=\"怎么会找到她？\"></a>怎么会找到她？</h2><p>&emsp;就这2024年12月，我的<strong>微信读书</strong>app的会员到期了，但不想再续费会员了，就想着有没有可以平替的app。答案肯定是当然的啦——<strong>阅读</strong></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><ul>\n<li>较旧的版本可以在<strong>github</strong>上下载, 网址：<a href=\"https://github.com/gedoor/MyBookshelf\">https://github.com/gedoor/MyBookshelf</a></li>\n<li>新版本可以在官网下载:<a href=\"https://gedoor.github.io/\">https://gedoor.github.io/</a></li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>刚下载完之后就像个空盒子，是无法食用的，需要导入<strong>书源</strong>才可以。导入方式按官方文档来就可以了。至于<strong>书源</strong>可以自己找。下面网站是我无意中发现的，收集了好多书源链接，反正我是够用啦，哈哈哈 :) :<br>源仓库：<a href=\"https://www.yckceo.com/yuedu/index/index.html\">https://www.yckceo.com/yuedu/index/index.html</a></p>\n"},{"title":"outlook","toc":true,"_content":"# 简介\n&emsp;outlook 安卓版是一个功能强大的邮件管理软件，可在上面登陆多个邮箱账户。如果用户多个邮箱的话，查看起来非常方便。\n# 我选择 outlook 的原因\n* 笔者拥有多个邮箱，既然都是邮箱，就想着放在一起，这样既方便查看，也没那么乱糟糟的感觉(精神洁癖了属于是)。\n* 无需**翻墙**，就能接受 google email 的邮件(最心动的一点，毕竟一般也不会在手机端一直开启翻墙软件的)\n# 下载\n笔者使用的红米手机，在应用商店可以直接安装，真好～ :)\n","source":"_posts/tools/邮箱管理/outlook.md","raw":"---\ntitle: outlook\ntoc: true\n---\n# 简介\n&emsp;outlook 安卓版是一个功能强大的邮件管理软件，可在上面登陆多个邮箱账户。如果用户多个邮箱的话，查看起来非常方便。\n# 我选择 outlook 的原因\n* 笔者拥有多个邮箱，既然都是邮箱，就想着放在一起，这样既方便查看，也没那么乱糟糟的感觉(精神洁癖了属于是)。\n* 无需**翻墙**，就能接受 google email 的邮件(最心动的一点，毕竟一般也不会在手机端一直开启翻墙软件的)\n# 下载\n笔者使用的红米手机，在应用商店可以直接安装，真好～ :)\n","slug":"tools/邮箱管理/outlook","published":1,"date":"2025-02-02T08:44:51.993Z","updated":"2025-02-02T08:44:51.993Z","_id":"cm6ndmahz000380jxgbt69hqy","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>&emsp;outlook 安卓版是一个功能强大的邮件管理软件，可在上面登陆多个邮箱账户。如果用户多个邮箱的话，查看起来非常方便。</p>\n<h1 id=\"我选择-outlook-的原因\"><a href=\"#我选择-outlook-的原因\" class=\"headerlink\" title=\"我选择 outlook 的原因\"></a>我选择 outlook 的原因</h1><ul>\n<li>笔者拥有多个邮箱，既然都是邮箱，就想着放在一起，这样既方便查看，也没那么乱糟糟的感觉(精神洁癖了属于是)。</li>\n<li>无需<strong>翻墙</strong>，就能接受 google email 的邮件(最心动的一点，毕竟一般也不会在手机端一直开启翻墙软件的)</li>\n</ul>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>笔者使用的红米手机，在应用商店可以直接安装，真好～ :)</p>\n","excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>&emsp;outlook 安卓版是一个功能强大的邮件管理软件，可在上面登陆多个邮箱账户。如果用户多个邮箱的话，查看起来非常方便。</p>\n<h1 id=\"我选择-outlook-的原因\"><a href=\"#我选择-outlook-的原因\" class=\"headerlink\" title=\"我选择 outlook 的原因\"></a>我选择 outlook 的原因</h1><ul>\n<li>笔者拥有多个邮箱，既然都是邮箱，就想着放在一起，这样既方便查看，也没那么乱糟糟的感觉(精神洁癖了属于是)。</li>\n<li>无需<strong>翻墙</strong>，就能接受 google email 的邮件(最心动的一点，毕竟一般也不会在手机端一直开启翻墙软件的)</li>\n</ul>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>笔者使用的红米手机，在应用商店可以直接安装，真好～ :)</p>\n"},{"title":"正则表达","toc":true,"_content":"[toc]\n\n# 正则表达分类\n正则表达式可以使用 **正则表达式引擎** 实现。  \n><u>正则表达式引擎</u>是解释正则表达式模式并使用这些模式匹配文本的基础软件。\n\n在Linux中，常用的正则表达式有：\n* POSIX 基本正则表达式（BRE）引擎  \n* POSIX 扩展正则表达式（BRE）引擎\n\n---\n# 基本正则表达式\n## 匹配字符\n\n`.`          匹配任意单个字符，不能匹配空行                 \n`[]`         匹配指定范围内的任意单个字符                   \n`[^]`        取反                                           \n`[:alnum:]`  或 [0-9a-zA-Z]                                 \n`[:alpha:]`  或 [a-zA-Z]                                    \n`[:upper:]`  或 [A-Z]                                       \n`[:lower:]`  或 [a-z]                                       \n`[:blank:]`  空白字符（空格和制表符）                       \n`[:space:]`  水平和垂直的空白字符（比[:blank:]包含的范围广）\n`[:cntrl:]`  不可打印的控制字符（退格、删除、警铃...）      \n`[:digit:]`  十进制数字 或[0-9]                             \n`[:xdigit:]` 十六进制数字                                   \n`[:graph:]`  可打印的非空白字符                             \n`[:print:]`  可打印字符                                     \n`[:punct:]`  标点符号                                       \n\n## 匹配次数\n`*`  匹配前面的字符任意次，包括0次，贪婪模式：尽可能长的匹配  \n`.*`  任意长度的任意字符，不包括0次  \n`\\?`  匹配其前面的字符0 或 1次  \n`\\+` 匹配其前面的字符至少1次  \n`\\{n\\}`  匹配前面的字符n次  \n`\\{m,n\\}`  匹配前面的字符至少m 次，至多n次  \n`\\{,n\\}`  匹配前面的字符至多n次  \n`\\{n,\\}`  匹配前面的字符至少n次  \n\n## 位置锚点，定位出现的位置\n`^`                 行首锚定，用于模式的最左侧  \n`$`                 行尾锚定，用于模式的最右侧  \n`^PATTERN$`         用于模式匹配整行  \n`^$`                空行  \n`^[[:space:]].*$`   空白行  \n`\\< 或 \\b`          词首锚定，用于单词模式的左侧  \n`\\> 或 \\b`          词尾锚定；用于单词模式的右侧  \n`\\<PATTERN\\>`\n\n# 扩展正则表达式\n\n`*`     字符匹配：  \n`.`  任意单个字符  \n`[]`  指定范围的字符  \n`[^]` 不在指定范围的字符  \n* 次数匹配：  \n`*.` ：匹配前面字符任意次  \n`?`  : 0 或1次  \n`+` ：1 次或多次  \n`{m}` ：匹配m次 次  \n`{m,n}` ：至少m ，至多n次  \n\n* 位置锚定：  \n`^` : 行首  \n`$` : 行尾  \n`\\<, \\b` : 语首  \n`\\>, \\b` : 语尾  \n分组：()  \n后向引用：\\1, \\2, ...  \n\n* 总结\n　　除了\\<, \\b : 语首、\\>, \\b : 语尾；使用其他正则都可以去掉\\\n","source":"_posts/study-notes/regular_expression.md","raw":"---\ntitle: 正则表达\ntoc: true\n---\n[toc]\n\n# 正则表达分类\n正则表达式可以使用 **正则表达式引擎** 实现。  \n><u>正则表达式引擎</u>是解释正则表达式模式并使用这些模式匹配文本的基础软件。\n\n在Linux中，常用的正则表达式有：\n* POSIX 基本正则表达式（BRE）引擎  \n* POSIX 扩展正则表达式（BRE）引擎\n\n---\n# 基本正则表达式\n## 匹配字符\n\n`.`          匹配任意单个字符，不能匹配空行                 \n`[]`         匹配指定范围内的任意单个字符                   \n`[^]`        取反                                           \n`[:alnum:]`  或 [0-9a-zA-Z]                                 \n`[:alpha:]`  或 [a-zA-Z]                                    \n`[:upper:]`  或 [A-Z]                                       \n`[:lower:]`  或 [a-z]                                       \n`[:blank:]`  空白字符（空格和制表符）                       \n`[:space:]`  水平和垂直的空白字符（比[:blank:]包含的范围广）\n`[:cntrl:]`  不可打印的控制字符（退格、删除、警铃...）      \n`[:digit:]`  十进制数字 或[0-9]                             \n`[:xdigit:]` 十六进制数字                                   \n`[:graph:]`  可打印的非空白字符                             \n`[:print:]`  可打印字符                                     \n`[:punct:]`  标点符号                                       \n\n## 匹配次数\n`*`  匹配前面的字符任意次，包括0次，贪婪模式：尽可能长的匹配  \n`.*`  任意长度的任意字符，不包括0次  \n`\\?`  匹配其前面的字符0 或 1次  \n`\\+` 匹配其前面的字符至少1次  \n`\\{n\\}`  匹配前面的字符n次  \n`\\{m,n\\}`  匹配前面的字符至少m 次，至多n次  \n`\\{,n\\}`  匹配前面的字符至多n次  \n`\\{n,\\}`  匹配前面的字符至少n次  \n\n## 位置锚点，定位出现的位置\n`^`                 行首锚定，用于模式的最左侧  \n`$`                 行尾锚定，用于模式的最右侧  \n`^PATTERN$`         用于模式匹配整行  \n`^$`                空行  \n`^[[:space:]].*$`   空白行  \n`\\< 或 \\b`          词首锚定，用于单词模式的左侧  \n`\\> 或 \\b`          词尾锚定；用于单词模式的右侧  \n`\\<PATTERN\\>`\n\n# 扩展正则表达式\n\n`*`     字符匹配：  \n`.`  任意单个字符  \n`[]`  指定范围的字符  \n`[^]` 不在指定范围的字符  \n* 次数匹配：  \n`*.` ：匹配前面字符任意次  \n`?`  : 0 或1次  \n`+` ：1 次或多次  \n`{m}` ：匹配m次 次  \n`{m,n}` ：至少m ，至多n次  \n\n* 位置锚定：  \n`^` : 行首  \n`$` : 行尾  \n`\\<, \\b` : 语首  \n`\\>, \\b` : 语尾  \n分组：()  \n后向引用：\\1, \\2, ...  \n\n* 总结\n　　除了\\<, \\b : 语首、\\>, \\b : 语尾；使用其他正则都可以去掉\\\n","slug":"study-notes/regular_expression","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nen6i30000e3jx0tkh7aax","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"正则表达分类\"><a href=\"#正则表达分类\" class=\"headerlink\" title=\"正则表达分类\"></a>正则表达分类</h1><p>正则表达式可以使用 <strong>正则表达式引擎</strong> 实现。  </p>\n<blockquote>\n<p><u>正则表达式引擎</u>是解释正则表达式模式并使用这些模式匹配文本的基础软件。</p>\n</blockquote>\n<p>在Linux中，常用的正则表达式有：</p>\n<ul>\n<li>POSIX 基本正则表达式（BRE）引擎  </li>\n<li>POSIX 扩展正则表达式（BRE）引擎</li>\n</ul>\n<hr>\n<h1 id=\"基本正则表达式\"><a href=\"#基本正则表达式\" class=\"headerlink\" title=\"基本正则表达式\"></a>基本正则表达式</h1><h2 id=\"匹配字符\"><a href=\"#匹配字符\" class=\"headerlink\" title=\"匹配字符\"></a>匹配字符</h2><p><code>.</code>          匹配任意单个字符，不能匹配空行<br><code>[]</code>         匹配指定范围内的任意单个字符<br><code>[^]</code>        取反<br><code>[:alnum:]</code>  或 [0-9a-zA-Z]<br><code>[:alpha:]</code>  或 [a-zA-Z]<br><code>[:upper:]</code>  或 [A-Z]<br><code>[:lower:]</code>  或 [a-z]<br><code>[:blank:]</code>  空白字符（空格和制表符）<br><code>[:space:]</code>  水平和垂直的空白字符（比[:blank:]包含的范围广）<br><code>[:cntrl:]</code>  不可打印的控制字符（退格、删除、警铃…）<br><code>[:digit:]</code>  十进制数字 或[0-9]<br><code>[:xdigit:]</code> 十六进制数字<br><code>[:graph:]</code>  可打印的非空白字符<br><code>[:print:]</code>  可打印字符<br><code>[:punct:]</code>  标点符号                                       </p>\n<h2 id=\"匹配次数\"><a href=\"#匹配次数\" class=\"headerlink\" title=\"匹配次数\"></a>匹配次数</h2><p><code>*</code>  匹配前面的字符任意次，包括0次，贪婪模式：尽可能长的匹配<br><code>.*</code>  任意长度的任意字符，不包括0次<br><code>\\?</code>  匹配其前面的字符0 或 1次<br><code>\\+</code> 匹配其前面的字符至少1次<br><code>\\&#123;n\\&#125;</code>  匹配前面的字符n次<br><code>\\&#123;m,n\\&#125;</code>  匹配前面的字符至少m 次，至多n次<br><code>\\&#123;,n\\&#125;</code>  匹配前面的字符至多n次<br><code>\\&#123;n,\\&#125;</code>  匹配前面的字符至少n次  </p>\n<h2 id=\"位置锚点，定位出现的位置\"><a href=\"#位置锚点，定位出现的位置\" class=\"headerlink\" title=\"位置锚点，定位出现的位置\"></a>位置锚点，定位出现的位置</h2><p><code>^</code>                 行首锚定，用于模式的最左侧<br><code>$</code>                 行尾锚定，用于模式的最右侧<br><code>^PATTERN$</code>         用于模式匹配整行<br><code>^$</code>                空行<br><code>^[[:space:]].*$</code>   空白行<br><code>\\&lt; 或 \\b</code>          词首锚定，用于单词模式的左侧<br><code>\\&gt; 或 \\b</code>          词尾锚定；用于单词模式的右侧<br><code>\\&lt;PATTERN\\&gt;</code></p>\n<h1 id=\"扩展正则表达式\"><a href=\"#扩展正则表达式\" class=\"headerlink\" title=\"扩展正则表达式\"></a>扩展正则表达式</h1><p><code>*</code>     字符匹配：<br><code>.</code>  任意单个字符<br><code>[]</code>  指定范围的字符<br><code>[^]</code> 不在指定范围的字符  </p>\n<ul>\n<li><p>次数匹配：<br><code>*.</code> ：匹配前面字符任意次<br><code>?</code>  : 0 或1次<br><code>+</code> ：1 次或多次<br><code>&#123;m&#125;</code> ：匹配m次 次<br><code>&#123;m,n&#125;</code> ：至少m ，至多n次  </p>\n</li>\n<li><p>位置锚定：<br><code>^</code> : 行首<br><code>$</code> : 行尾<br><code>\\&lt;, \\b</code> : 语首<br><code>\\&gt;, \\b</code> : 语尾<br>分组：()<br>后向引用：\\1, \\2, …  </p>\n</li>\n<li><p>总结<br>　　除了&lt;, \\b : 语首、&gt;, \\b : 语尾；使用其他正则都可以去掉\\</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"正则表达分类\"><a href=\"#正则表达分类\" class=\"headerlink\" title=\"正则表达分类\"></a>正则表达分类</h1><p>正则表达式可以使用 <strong>正则表达式引擎</strong> 实现。  </p>\n<blockquote>\n<p><u>正则表达式引擎</u>是解释正则表达式模式并使用这些模式匹配文本的基础软件。</p>\n</blockquote>\n<p>在Linux中，常用的正则表达式有：</p>\n<ul>\n<li>POSIX 基本正则表达式（BRE）引擎  </li>\n<li>POSIX 扩展正则表达式（BRE）引擎</li>\n</ul>\n<hr>\n<h1 id=\"基本正则表达式\"><a href=\"#基本正则表达式\" class=\"headerlink\" title=\"基本正则表达式\"></a>基本正则表达式</h1><h2 id=\"匹配字符\"><a href=\"#匹配字符\" class=\"headerlink\" title=\"匹配字符\"></a>匹配字符</h2><p><code>.</code>          匹配任意单个字符，不能匹配空行<br><code>[]</code>         匹配指定范围内的任意单个字符<br><code>[^]</code>        取反<br><code>[:alnum:]</code>  或 [0-9a-zA-Z]<br><code>[:alpha:]</code>  或 [a-zA-Z]<br><code>[:upper:]</code>  或 [A-Z]<br><code>[:lower:]</code>  或 [a-z]<br><code>[:blank:]</code>  空白字符（空格和制表符）<br><code>[:space:]</code>  水平和垂直的空白字符（比[:blank:]包含的范围广）<br><code>[:cntrl:]</code>  不可打印的控制字符（退格、删除、警铃…）<br><code>[:digit:]</code>  十进制数字 或[0-9]<br><code>[:xdigit:]</code> 十六进制数字<br><code>[:graph:]</code>  可打印的非空白字符<br><code>[:print:]</code>  可打印字符<br><code>[:punct:]</code>  标点符号                                       </p>\n<h2 id=\"匹配次数\"><a href=\"#匹配次数\" class=\"headerlink\" title=\"匹配次数\"></a>匹配次数</h2><p><code>*</code>  匹配前面的字符任意次，包括0次，贪婪模式：尽可能长的匹配<br><code>.*</code>  任意长度的任意字符，不包括0次<br><code>\\?</code>  匹配其前面的字符0 或 1次<br><code>\\+</code> 匹配其前面的字符至少1次<br><code>\\&#123;n\\&#125;</code>  匹配前面的字符n次<br><code>\\&#123;m,n\\&#125;</code>  匹配前面的字符至少m 次，至多n次<br><code>\\&#123;,n\\&#125;</code>  匹配前面的字符至多n次<br><code>\\&#123;n,\\&#125;</code>  匹配前面的字符至少n次  </p>\n<h2 id=\"位置锚点，定位出现的位置\"><a href=\"#位置锚点，定位出现的位置\" class=\"headerlink\" title=\"位置锚点，定位出现的位置\"></a>位置锚点，定位出现的位置</h2><p><code>^</code>                 行首锚定，用于模式的最左侧<br><code>$</code>                 行尾锚定，用于模式的最右侧<br><code>^PATTERN$</code>         用于模式匹配整行<br><code>^$</code>                空行<br><code>^[[:space:]].*$</code>   空白行<br><code>\\&lt; 或 \\b</code>          词首锚定，用于单词模式的左侧<br><code>\\&gt; 或 \\b</code>          词尾锚定；用于单词模式的右侧<br><code>\\&lt;PATTERN\\&gt;</code></p>\n<h1 id=\"扩展正则表达式\"><a href=\"#扩展正则表达式\" class=\"headerlink\" title=\"扩展正则表达式\"></a>扩展正则表达式</h1><p><code>*</code>     字符匹配：<br><code>.</code>  任意单个字符<br><code>[]</code>  指定范围的字符<br><code>[^]</code> 不在指定范围的字符  </p>\n<ul>\n<li><p>次数匹配：<br><code>*.</code> ：匹配前面字符任意次<br><code>?</code>  : 0 或1次<br><code>+</code> ：1 次或多次<br><code>&#123;m&#125;</code> ：匹配m次 次<br><code>&#123;m,n&#125;</code> ：至少m ，至多n次  </p>\n</li>\n<li><p>位置锚定：<br><code>^</code> : 行首<br><code>$</code> : 行尾<br><code>\\&lt;, \\b</code> : 语首<br><code>\\&gt;, \\b</code> : 语尾<br>分组：()<br>后向引用：\\1, \\2, …  </p>\n</li>\n<li><p>总结<br>　　除了&lt;, \\b : 语首、&gt;, \\b : 语尾；使用其他正则都可以去掉\\</p>\n</li>\n</ul>\n"},{"title":"gdb","toc":null,"_content":"[toc]\n---\n# 指定tty作为被调试程序的stdin,stdo\n```shell\n# tty_path:被指定的tty的全路径\n# debug-app:被调试的程序\n# 用法\ngdb --tty=<tty_path> <debug-app>\n```\n# 调试进程\n## 开始调试进程\n\n* 方案一：在启动gdb时就指定进程：\n```shell\nsudo gdb -p <pid>\n```\n\n* 方案二：启动gdb后再指定进程：\n```shell\n(gdb) attach <pid>\n```\n## 调试结束\n```shell\n# 和被调试的进程分离，使其继续运行\n(gdb) detach\n```\n\n# 修改变量\n\n```shell\nset var_name=value\n```\n修改变量时有时会提示:  \n`Ambiguous set command \"...\": .`,  \n则需加上`var`，即`set var var_name=value`\n\n# 显示变量\n## 常规变量显示\n* 临时显示:\n```shell\np var_name\n```\n* 每次暂停都显示:\n```shell\n#确定要显示的变量\ndisplay var_name\n#取消显示的变量\nundisplay var_name\n```\n* 按照指定格式显示变量\n```shell\np/<format> <var_name>\n```\nformat| 说明|\n|-    |-    |\n|x    |十六进制|\n|d    |十进制|\n|u    |十进制，无符号|\n|o    |八进制|\n|t    |二进制|\n|a    |打印为地址|\n|c    |将值转换为整数|\n|f    |浮点数\n|s    |字符串|\n|z    |该值被视为整数并以十六进制打印|\n\n## 显示数组  \n```shell\np *<arr_name>@<len>\n```\n## 指针变量显示\n* 显示指针变量地址:`p &var_ptr_name`\n* 显示指针变量内容:\n    * 默认格式: `p <var_ptr>`\n    * 指定格式:`x/<format> <var_ptr> `\n        ><format> 指定查看数据的方式，比如：\n        >>x 十六进制  \n        >>d 十进制  \n        >>u 无符号十进制  \n        >>o 八进制  \n        >>t 二进制  \n        >>a 地址（十六进制）  \n        >>c 字符  \n        >>f 浮点数  \n        >>s 字符串  \n        >示例：`x/x var_1`\n# 显示调用栈\n```shell\nbacktrace # or 'bt'\n```\n# 分割窗口\n    * layout：用于分割窗口，可以一边查看代码，一边测试：\n    * layout src：显示源代码窗口\n    * layout asm：显示反汇编窗口\n    * layout regs：显示源代码/反汇编和CPU寄存器窗口\n    * layout split：显示源代码和反汇编窗口\n    * focus [src|asm|regs]:聚焦到指定窗口\n    * Ctrl + L：刷新窗口\n    * Ctrl + x，再按1：单窗口模式，显示一个窗口\n    * Ctrl + x，再按2：双窗口模式，显示两个窗口\n    * Ctrl + x，再按a：即退出layout，回到执行layout之前的调试窗口。\n","source":"_posts/study-notes/debuge/gdb.md","raw":"---\ntitle: gdb\ntoc: \n---\n[toc]\n---\n# 指定tty作为被调试程序的stdin,stdo\n```shell\n# tty_path:被指定的tty的全路径\n# debug-app:被调试的程序\n# 用法\ngdb --tty=<tty_path> <debug-app>\n```\n# 调试进程\n## 开始调试进程\n\n* 方案一：在启动gdb时就指定进程：\n```shell\nsudo gdb -p <pid>\n```\n\n* 方案二：启动gdb后再指定进程：\n```shell\n(gdb) attach <pid>\n```\n## 调试结束\n```shell\n# 和被调试的进程分离，使其继续运行\n(gdb) detach\n```\n\n# 修改变量\n\n```shell\nset var_name=value\n```\n修改变量时有时会提示:  \n`Ambiguous set command \"...\": .`,  \n则需加上`var`，即`set var var_name=value`\n\n# 显示变量\n## 常规变量显示\n* 临时显示:\n```shell\np var_name\n```\n* 每次暂停都显示:\n```shell\n#确定要显示的变量\ndisplay var_name\n#取消显示的变量\nundisplay var_name\n```\n* 按照指定格式显示变量\n```shell\np/<format> <var_name>\n```\nformat| 说明|\n|-    |-    |\n|x    |十六进制|\n|d    |十进制|\n|u    |十进制，无符号|\n|o    |八进制|\n|t    |二进制|\n|a    |打印为地址|\n|c    |将值转换为整数|\n|f    |浮点数\n|s    |字符串|\n|z    |该值被视为整数并以十六进制打印|\n\n## 显示数组  \n```shell\np *<arr_name>@<len>\n```\n## 指针变量显示\n* 显示指针变量地址:`p &var_ptr_name`\n* 显示指针变量内容:\n    * 默认格式: `p <var_ptr>`\n    * 指定格式:`x/<format> <var_ptr> `\n        ><format> 指定查看数据的方式，比如：\n        >>x 十六进制  \n        >>d 十进制  \n        >>u 无符号十进制  \n        >>o 八进制  \n        >>t 二进制  \n        >>a 地址（十六进制）  \n        >>c 字符  \n        >>f 浮点数  \n        >>s 字符串  \n        >示例：`x/x var_1`\n# 显示调用栈\n```shell\nbacktrace # or 'bt'\n```\n# 分割窗口\n    * layout：用于分割窗口，可以一边查看代码，一边测试：\n    * layout src：显示源代码窗口\n    * layout asm：显示反汇编窗口\n    * layout regs：显示源代码/反汇编和CPU寄存器窗口\n    * layout split：显示源代码和反汇编窗口\n    * focus [src|asm|regs]:聚焦到指定窗口\n    * Ctrl + L：刷新窗口\n    * Ctrl + x，再按1：单窗口模式，显示一个窗口\n    * Ctrl + x，再按2：双窗口模式，显示两个窗口\n    * Ctrl + x，再按a：即退出layout，回到执行layout之前的调试窗口。\n","slug":"study-notes/debuge/gdb","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nen6i50001e3jxgh8mc9z6","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"[toc]\"></a>[toc]</h2><h1 id=\"指定tty作为被调试程序的stdin-stdo\"><a href=\"#指定tty作为被调试程序的stdin-stdo\" class=\"headerlink\" title=\"指定tty作为被调试程序的stdin,stdo\"></a>指定tty作为被调试程序的stdin,stdo</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tty_path:被指定的<span class=\"built_in\">tty</span>的全路径</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">debug-app:被调试的程序</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用法</span></span><br><span class=\"line\">gdb --tty=&lt;tty_path&gt; &lt;debug-app&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"调试进程\"><a href=\"#调试进程\" class=\"headerlink\" title=\"调试进程\"></a>调试进程</h1><h2 id=\"开始调试进程\"><a href=\"#开始调试进程\" class=\"headerlink\" title=\"开始调试进程\"></a>开始调试进程</h2><ul>\n<li>方案一：在启动gdb时就指定进程：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gdb -p &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方案二：启动gdb后再指定进程：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) attach &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"调试结束\"><a href=\"#调试结束\" class=\"headerlink\" title=\"调试结束\"></a>调试结束</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">和被调试的进程分离，使其继续运行</span></span><br><span class=\"line\">(gdb) detach</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改变量\"><a href=\"#修改变量\" class=\"headerlink\" title=\"修改变量\"></a>修改变量</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set var_name=value</span><br></pre></td></tr></table></figure>\n<p>修改变量时有时会提示:<br><code>Ambiguous set command &quot;...&quot;: .</code>,<br>则需加上<code>var</code>，即<code>set var var_name=value</code></p>\n<h1 id=\"显示变量\"><a href=\"#显示变量\" class=\"headerlink\" title=\"显示变量\"></a>显示变量</h1><h2 id=\"常规变量显示\"><a href=\"#常规变量显示\" class=\"headerlink\" title=\"常规变量显示\"></a>常规变量显示</h2><ul>\n<li>临时显示:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p var_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>每次暂停都显示:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">确定要显示的变量</span></span><br><span class=\"line\">display var_name</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">取消显示的变量</span></span><br><span class=\"line\">undisplay var_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按照指定格式显示变量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p/&lt;format&gt; &lt;var_name&gt;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>format</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x</td>\n<td>十六进制</td>\n</tr>\n<tr>\n<td>d</td>\n<td>十进制</td>\n</tr>\n<tr>\n<td>u</td>\n<td>十进制，无符号</td>\n</tr>\n<tr>\n<td>o</td>\n<td>八进制</td>\n</tr>\n<tr>\n<td>t</td>\n<td>二进制</td>\n</tr>\n<tr>\n<td>a</td>\n<td>打印为地址</td>\n</tr>\n<tr>\n<td>c</td>\n<td>将值转换为整数</td>\n</tr>\n<tr>\n<td>f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>z</td>\n<td>该值被视为整数并以十六进制打印</td>\n</tr>\n</tbody></table>\n<h2 id=\"显示数组\"><a href=\"#显示数组\" class=\"headerlink\" title=\"显示数组\"></a>显示数组</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p *&lt;arr_name&gt;@&lt;len&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"指针变量显示\"><a href=\"#指针变量显示\" class=\"headerlink\" title=\"指针变量显示\"></a>指针变量显示</h2><ul>\n<li>显示指针变量地址:<code>p &amp;var_ptr_name</code></li>\n<li>显示指针变量内容:<ul>\n<li>默认格式: <code>p &lt;var_ptr&gt;</code></li>\n<li>指定格式:<code>x/&lt;format&gt; &lt;var_ptr&gt; </code><blockquote>\n<p><format> 指定查看数据的方式，比如：</p>\n<blockquote>\n<p>x 十六进制<br>d 十进制<br>u 无符号十进制<br>o 八进制<br>t 二进制<br>a 地址（十六进制）<br>c 字符<br>f 浮点数<br>s 字符串<br>示例：<code>x/x var_1</code></p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"显示调用栈\"><a href=\"#显示调用栈\" class=\"headerlink\" title=\"显示调用栈\"></a>显示调用栈</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backtrace # or &#x27;bt&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"分割窗口\"><a href=\"#分割窗口\" class=\"headerlink\" title=\"分割窗口\"></a>分割窗口</h1><pre><code>* layout：用于分割窗口，可以一边查看代码，一边测试：\n* layout src：显示源代码窗口\n* layout asm：显示反汇编窗口\n* layout regs：显示源代码/反汇编和CPU寄存器窗口\n* layout split：显示源代码和反汇编窗口\n* focus [src|asm|regs]:聚焦到指定窗口\n* Ctrl + L：刷新窗口\n* Ctrl + x，再按1：单窗口模式，显示一个窗口\n* Ctrl + x，再按2：双窗口模式，显示两个窗口\n* Ctrl + x，再按a：即退出layout，回到执行layout之前的调试窗口。\n</code></pre>\n","excerpt":"","more":"<h2 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"[toc]\"></a>[toc]</h2><h1 id=\"指定tty作为被调试程序的stdin-stdo\"><a href=\"#指定tty作为被调试程序的stdin-stdo\" class=\"headerlink\" title=\"指定tty作为被调试程序的stdin,stdo\"></a>指定tty作为被调试程序的stdin,stdo</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tty_path:被指定的<span class=\"built_in\">tty</span>的全路径</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">debug-app:被调试的程序</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用法</span></span><br><span class=\"line\">gdb --tty=&lt;tty_path&gt; &lt;debug-app&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"调试进程\"><a href=\"#调试进程\" class=\"headerlink\" title=\"调试进程\"></a>调试进程</h1><h2 id=\"开始调试进程\"><a href=\"#开始调试进程\" class=\"headerlink\" title=\"开始调试进程\"></a>开始调试进程</h2><ul>\n<li>方案一：在启动gdb时就指定进程：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gdb -p &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方案二：启动gdb后再指定进程：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) attach &lt;pid&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"调试结束\"><a href=\"#调试结束\" class=\"headerlink\" title=\"调试结束\"></a>调试结束</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">和被调试的进程分离，使其继续运行</span></span><br><span class=\"line\">(gdb) detach</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改变量\"><a href=\"#修改变量\" class=\"headerlink\" title=\"修改变量\"></a>修改变量</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set var_name=value</span><br></pre></td></tr></table></figure>\n<p>修改变量时有时会提示:<br><code>Ambiguous set command &quot;...&quot;: .</code>,<br>则需加上<code>var</code>，即<code>set var var_name=value</code></p>\n<h1 id=\"显示变量\"><a href=\"#显示变量\" class=\"headerlink\" title=\"显示变量\"></a>显示变量</h1><h2 id=\"常规变量显示\"><a href=\"#常规变量显示\" class=\"headerlink\" title=\"常规变量显示\"></a>常规变量显示</h2><ul>\n<li>临时显示:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p var_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>每次暂停都显示:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">确定要显示的变量</span></span><br><span class=\"line\">display var_name</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">取消显示的变量</span></span><br><span class=\"line\">undisplay var_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按照指定格式显示变量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p/&lt;format&gt; &lt;var_name&gt;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>format</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x</td>\n<td>十六进制</td>\n</tr>\n<tr>\n<td>d</td>\n<td>十进制</td>\n</tr>\n<tr>\n<td>u</td>\n<td>十进制，无符号</td>\n</tr>\n<tr>\n<td>o</td>\n<td>八进制</td>\n</tr>\n<tr>\n<td>t</td>\n<td>二进制</td>\n</tr>\n<tr>\n<td>a</td>\n<td>打印为地址</td>\n</tr>\n<tr>\n<td>c</td>\n<td>将值转换为整数</td>\n</tr>\n<tr>\n<td>f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>z</td>\n<td>该值被视为整数并以十六进制打印</td>\n</tr>\n</tbody></table>\n<h2 id=\"显示数组\"><a href=\"#显示数组\" class=\"headerlink\" title=\"显示数组\"></a>显示数组</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p *&lt;arr_name&gt;@&lt;len&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"指针变量显示\"><a href=\"#指针变量显示\" class=\"headerlink\" title=\"指针变量显示\"></a>指针变量显示</h2><ul>\n<li>显示指针变量地址:<code>p &amp;var_ptr_name</code></li>\n<li>显示指针变量内容:<ul>\n<li>默认格式: <code>p &lt;var_ptr&gt;</code></li>\n<li>指定格式:<code>x/&lt;format&gt; &lt;var_ptr&gt; </code><blockquote>\n<p><format> 指定查看数据的方式，比如：</p>\n<blockquote>\n<p>x 十六进制<br>d 十进制<br>u 无符号十进制<br>o 八进制<br>t 二进制<br>a 地址（十六进制）<br>c 字符<br>f 浮点数<br>s 字符串<br>示例：<code>x/x var_1</code></p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"显示调用栈\"><a href=\"#显示调用栈\" class=\"headerlink\" title=\"显示调用栈\"></a>显示调用栈</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">backtrace # or &#x27;bt&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"分割窗口\"><a href=\"#分割窗口\" class=\"headerlink\" title=\"分割窗口\"></a>分割窗口</h1><pre><code>* layout：用于分割窗口，可以一边查看代码，一边测试：\n* layout src：显示源代码窗口\n* layout asm：显示反汇编窗口\n* layout regs：显示源代码/反汇编和CPU寄存器窗口\n* layout split：显示源代码和反汇编窗口\n* focus [src|asm|regs]:聚焦到指定窗口\n* Ctrl + L：刷新窗口\n* Ctrl + x，再按1：单窗口模式，显示一个窗口\n* Ctrl + x，再按2：双窗口模式，显示两个窗口\n* Ctrl + x，再按a：即退出layout，回到执行layout之前的调试窗口。\n</code></pre>\n"},{"title":"awk","toc":true,"_content":"[toc]\n\n---\n# 简介\n    1. awk是一种编程语言，用于在linux/unix下对文本和数据进行处理;\n    2. 数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出;\n    3. 它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具;\n    4. 它在命令行中使用，但更多是作为脚本来使用;\n    5. awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\n\n---\n# 语法\n```shell\nawk options 'pattern {action}' file\n```\n\n* 选项参数说明：\n    * options：是一些选项，用于控制 awk 的行为。\n    * pattern：是用于匹配输入数据的模式。如果省略，则 awk 将对所有行进行操作。\n    * {action}：是在匹配到模式的行上执行的动作。如果省略，则默认动作是打印整行。\n\n* options 参数说明：\n    * -F <分隔符> 或 --field-separator=<分隔符>： 指定输入字段的分隔符，默认是空格。使用这个选项可以指定不同于默认分隔符的字段分隔符。\n    * -v <变量名>=<值>： 设置 awk 内部的变量值。可以使用该选项将外部值传递给 awk 脚本中的变量。\n    * -f <脚本文件>： 指定一个包含 awk 脚本的文件。这样可以在文件中编写较大的 awk 脚本，然后通过 -f 选项将其加载。\n    * -V 或 --version： 显示 awk 的版本信息。\n    * -h 或 --help： 显示 awk 的帮助信息，包括选项和用法示例。\n\n# 内置变量\n    * FS ：输入字段分隔符，默认为空白字符\n    * OFS ：输出字段分隔符，默认为空白字符\n    * RS ：输入记录分隔符，指定输入时的换行符，原换行符仍有效\n    * ORS ：输出记录分隔符，输出时用指定符号代替换行符\n    * NF ：字段数量，共有多少字段， $NF引用最后一列，$(NF-1)引用倒数第2列\n    * NR ：行号，后可跟多个文件，第二个文件行号继续从第一个文件最后行号开始\n    * FNR ：各文件分别计数, 行号，后跟一个文件和NR一样，跟多个文件，第二个文件行号从1开始\n    * FILENAME ：当前文件名\n    * ARGC ：命令行参数的个数\n    * ARGV ：数组，保存的是命令行所给定的各参数，查看参数\n","source":"_posts/study-notes/file_operations/awk.md","raw":"---\ntitle: awk\ntoc: true\n---\n[toc]\n\n---\n# 简介\n    1. awk是一种编程语言，用于在linux/unix下对文本和数据进行处理;\n    2. 数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出;\n    3. 它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具;\n    4. 它在命令行中使用，但更多是作为脚本来使用;\n    5. awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\n\n---\n# 语法\n```shell\nawk options 'pattern {action}' file\n```\n\n* 选项参数说明：\n    * options：是一些选项，用于控制 awk 的行为。\n    * pattern：是用于匹配输入数据的模式。如果省略，则 awk 将对所有行进行操作。\n    * {action}：是在匹配到模式的行上执行的动作。如果省略，则默认动作是打印整行。\n\n* options 参数说明：\n    * -F <分隔符> 或 --field-separator=<分隔符>： 指定输入字段的分隔符，默认是空格。使用这个选项可以指定不同于默认分隔符的字段分隔符。\n    * -v <变量名>=<值>： 设置 awk 内部的变量值。可以使用该选项将外部值传递给 awk 脚本中的变量。\n    * -f <脚本文件>： 指定一个包含 awk 脚本的文件。这样可以在文件中编写较大的 awk 脚本，然后通过 -f 选项将其加载。\n    * -V 或 --version： 显示 awk 的版本信息。\n    * -h 或 --help： 显示 awk 的帮助信息，包括选项和用法示例。\n\n# 内置变量\n    * FS ：输入字段分隔符，默认为空白字符\n    * OFS ：输出字段分隔符，默认为空白字符\n    * RS ：输入记录分隔符，指定输入时的换行符，原换行符仍有效\n    * ORS ：输出记录分隔符，输出时用指定符号代替换行符\n    * NF ：字段数量，共有多少字段， $NF引用最后一列，$(NF-1)引用倒数第2列\n    * NR ：行号，后可跟多个文件，第二个文件行号继续从第一个文件最后行号开始\n    * FNR ：各文件分别计数, 行号，后跟一个文件和NR一样，跟多个文件，第二个文件行号从1开始\n    * FILENAME ：当前文件名\n    * ARGC ：命令行参数的个数\n    * ARGV ：数组，保存的是命令行所给定的各参数，查看参数\n","slug":"study-notes/file_operations/awk","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nen6i70002e3jx8oy18dtr","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<hr>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><pre><code>1. awk是一种编程语言，用于在linux/unix下对文本和数据进行处理;\n2. 数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出;\n3. 它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具;\n4. 它在命令行中使用，但更多是作为脚本来使用;\n5. awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\n</code></pre>\n<hr>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk options &#x27;pattern &#123;action&#125;&#x27; file</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>选项参数说明：</p>\n<ul>\n<li>options：是一些选项，用于控制 awk 的行为。</li>\n<li>pattern：是用于匹配输入数据的模式。如果省略，则 awk 将对所有行进行操作。</li>\n<li>{action}：是在匹配到模式的行上执行的动作。如果省略，则默认动作是打印整行。</li>\n</ul>\n</li>\n<li><p>options 参数说明：</p>\n<ul>\n<li>-F &lt;分隔符&gt; 或 –field-separator&#x3D;&lt;分隔符&gt;： 指定输入字段的分隔符，默认是空格。使用这个选项可以指定不同于默认分隔符的字段分隔符。</li>\n<li>-v &lt;变量名&gt;&#x3D;&lt;值&gt;： 设置 awk 内部的变量值。可以使用该选项将外部值传递给 awk 脚本中的变量。</li>\n<li>-f &lt;脚本文件&gt;： 指定一个包含 awk 脚本的文件。这样可以在文件中编写较大的 awk 脚本，然后通过 -f 选项将其加载。</li>\n<li>-V 或 –version： 显示 awk 的版本信息。</li>\n<li>-h 或 –help： 显示 awk 的帮助信息，包括选项和用法示例。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h1><pre><code>* FS ：输入字段分隔符，默认为空白字符\n* OFS ：输出字段分隔符，默认为空白字符\n* RS ：输入记录分隔符，指定输入时的换行符，原换行符仍有效\n* ORS ：输出记录分隔符，输出时用指定符号代替换行符\n* NF ：字段数量，共有多少字段， $NF引用最后一列，$(NF-1)引用倒数第2列\n* NR ：行号，后可跟多个文件，第二个文件行号继续从第一个文件最后行号开始\n* FNR ：各文件分别计数, 行号，后跟一个文件和NR一样，跟多个文件，第二个文件行号从1开始\n* FILENAME ：当前文件名\n* ARGC ：命令行参数的个数\n* ARGV ：数组，保存的是命令行所给定的各参数，查看参数\n</code></pre>\n","excerpt":"","more":"<p>[toc]</p>\n<hr>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><pre><code>1. awk是一种编程语言，用于在linux/unix下对文本和数据进行处理;\n2. 数据可以来自标准输入(stdin)、一个或多个文件，或其它命令的输出;\n3. 它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具;\n4. 它在命令行中使用，但更多是作为脚本来使用;\n5. awk有很多内建的功能，比如数组、函数等，这是它和C语言的相同之处，灵活性是awk最大的优势。\n</code></pre>\n<hr>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk options &#x27;pattern &#123;action&#125;&#x27; file</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>选项参数说明：</p>\n<ul>\n<li>options：是一些选项，用于控制 awk 的行为。</li>\n<li>pattern：是用于匹配输入数据的模式。如果省略，则 awk 将对所有行进行操作。</li>\n<li>{action}：是在匹配到模式的行上执行的动作。如果省略，则默认动作是打印整行。</li>\n</ul>\n</li>\n<li><p>options 参数说明：</p>\n<ul>\n<li>-F &lt;分隔符&gt; 或 –field-separator&#x3D;&lt;分隔符&gt;： 指定输入字段的分隔符，默认是空格。使用这个选项可以指定不同于默认分隔符的字段分隔符。</li>\n<li>-v &lt;变量名&gt;&#x3D;&lt;值&gt;： 设置 awk 内部的变量值。可以使用该选项将外部值传递给 awk 脚本中的变量。</li>\n<li>-f &lt;脚本文件&gt;： 指定一个包含 awk 脚本的文件。这样可以在文件中编写较大的 awk 脚本，然后通过 -f 选项将其加载。</li>\n<li>-V 或 –version： 显示 awk 的版本信息。</li>\n<li>-h 或 –help： 显示 awk 的帮助信息，包括选项和用法示例。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h1><pre><code>* FS ：输入字段分隔符，默认为空白字符\n* OFS ：输出字段分隔符，默认为空白字符\n* RS ：输入记录分隔符，指定输入时的换行符，原换行符仍有效\n* ORS ：输出记录分隔符，输出时用指定符号代替换行符\n* NF ：字段数量，共有多少字段， $NF引用最后一列，$(NF-1)引用倒数第2列\n* NR ：行号，后可跟多个文件，第二个文件行号继续从第一个文件最后行号开始\n* FNR ：各文件分别计数, 行号，后跟一个文件和NR一样，跟多个文件，第二个文件行号从1开始\n* FILENAME ：当前文件名\n* ARGC ：命令行参数的个数\n* ARGV ：数组，保存的是命令行所给定的各参数，查看参数\n</code></pre>\n"},{"title":"grep","toc":true,"_content":"[toc]\n\n# 简介  \n    1. grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来（匹配到的标红);\n    2. grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户;\n　　3. 工作方式:它在一个或多个文件中搜索字符串模板。若模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。\n　　4. grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，若模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。\n\n　　egrep = grep -E：扩展的正则表达式 （除了\\< , \\> , \\b 使用其他正则都可以去掉\\）\n\n---\n# 一般格式：\n```shell\ngrep [选项...] [模式] [文件...]\n```\n---\n# 常见选项：\n|选项 |说明                          |\n|----|------------------------------|\n|-i  |匹配是忽略大小写|\n|-v  |反向查找，即只打印不匹配的行|\n|-n  |显示匹配行的行号|\n|-r  |递归查找子目录的文件|\n|-l  |只打印匹配的文件名|\n|-c  |只打印匹配的行数|\n\n---\n# 更多参数：\n>-a 或 --text : 不要忽略二进制的数据。\n>-A<显示行数>或--after-context=<显示行数> : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。\n>-b 或 --byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。\n>-B<显示行数> 或 --before-context=<显示行数> : 除了显示符合样式的那一行之外，并显示该行之前的内容。\n>-C<显示行数> 或 --context=<显示行数>或-<显示行数> : 除了显示符合样式的那一行之外，并显示该行之前后的内容。\n>-d <动作> 或 --directories=<动作> : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。\n>-e<范本样式> 或 --regexp=<范本样式> : 实现多个选项之间的逻辑或关系。\n>-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。\n>-f<规则文件> 或 --file=<规则文件> : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。\n>-F 或 --fixed-regexp : 将样式视为固定字符串的列表。\n>-G 或 --basic-regexp : 将样式视为普通的表示法来使用。\n>-h 或 --no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。\n>-H 或 --with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。\n>-i 或 --ignore-case : 忽略字符大小写的差别。\n>-l 或 --file-with-matches : 列出文件内容符合指定的样式的文件名称。\n>-L 或 --files-without-match : 列出文件内容不符合指定的样式的文件名称。\n>-n 或 --line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。\n>-o 或 --only-matching : 只显示匹配PATTERN 部分。\n>-q 或 --quiet或--silent : 不显示任何信息。\n>-r 或 --recursive : 此参数的效果和指定\"-d recurse\"参数相同。\n>-s 或 --no-messages : 不显示错误信息。\n>-v 或 --invert-match : 显示不包含匹配文本的所有行。\n>-V 或 --version : 显示版本信息。\n>-w 或 --word-regexp : 只显示全字符合的列。\n>-x --line-regexp : 只显示全列符合的列。\n>-y : 此参数的效果和指定\"-i\"参数相同。\n\n---\n# grep中的逻辑关系(and, or, not)\n* 逻辑与  \n1. 使用 `\\|`\n```shell\ngrep 'pattern1\\|pattern2' filename\n```\n2. 使用 `-E`\n```shell\ngrep -E 'pattern1|pattern2' filename\n```\n3. 使用 `-e`\n```shell\ngrep -e 'pattern1' -e 'pattern2' filename\n```\n* 逻辑或  \n1. 使用管道\n```shell\ngrep -E 'pattern1' filename | grep -E 'pattern2'\n```\n2. 使用 `.*`和`|`\n```shell\ngrep -E 'pattern1.*pattern2|pattern2.*pattern1' filename\n```\n* 逻辑非\n1. 使用 `-V`\n```shell\ngrep -V 'pattern' filename\n```\n","source":"_posts/study-notes/file_operations/grep.md","raw":"---\ntitle: grep\ntoc: true\n---\n[toc]\n\n# 简介  \n    1. grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来（匹配到的标红);\n    2. grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户;\n　　3. 工作方式:它在一个或多个文件中搜索字符串模板。若模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。\n　　4. grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，若模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。\n\n　　egrep = grep -E：扩展的正则表达式 （除了\\< , \\> , \\b 使用其他正则都可以去掉\\）\n\n---\n# 一般格式：\n```shell\ngrep [选项...] [模式] [文件...]\n```\n---\n# 常见选项：\n|选项 |说明                          |\n|----|------------------------------|\n|-i  |匹配是忽略大小写|\n|-v  |反向查找，即只打印不匹配的行|\n|-n  |显示匹配行的行号|\n|-r  |递归查找子目录的文件|\n|-l  |只打印匹配的文件名|\n|-c  |只打印匹配的行数|\n\n---\n# 更多参数：\n>-a 或 --text : 不要忽略二进制的数据。\n>-A<显示行数>或--after-context=<显示行数> : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。\n>-b 或 --byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。\n>-B<显示行数> 或 --before-context=<显示行数> : 除了显示符合样式的那一行之外，并显示该行之前的内容。\n>-C<显示行数> 或 --context=<显示行数>或-<显示行数> : 除了显示符合样式的那一行之外，并显示该行之前后的内容。\n>-d <动作> 或 --directories=<动作> : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。\n>-e<范本样式> 或 --regexp=<范本样式> : 实现多个选项之间的逻辑或关系。\n>-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。\n>-f<规则文件> 或 --file=<规则文件> : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。\n>-F 或 --fixed-regexp : 将样式视为固定字符串的列表。\n>-G 或 --basic-regexp : 将样式视为普通的表示法来使用。\n>-h 或 --no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。\n>-H 或 --with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。\n>-i 或 --ignore-case : 忽略字符大小写的差别。\n>-l 或 --file-with-matches : 列出文件内容符合指定的样式的文件名称。\n>-L 或 --files-without-match : 列出文件内容不符合指定的样式的文件名称。\n>-n 或 --line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。\n>-o 或 --only-matching : 只显示匹配PATTERN 部分。\n>-q 或 --quiet或--silent : 不显示任何信息。\n>-r 或 --recursive : 此参数的效果和指定\"-d recurse\"参数相同。\n>-s 或 --no-messages : 不显示错误信息。\n>-v 或 --invert-match : 显示不包含匹配文本的所有行。\n>-V 或 --version : 显示版本信息。\n>-w 或 --word-regexp : 只显示全字符合的列。\n>-x --line-regexp : 只显示全列符合的列。\n>-y : 此参数的效果和指定\"-i\"参数相同。\n\n---\n# grep中的逻辑关系(and, or, not)\n* 逻辑与  \n1. 使用 `\\|`\n```shell\ngrep 'pattern1\\|pattern2' filename\n```\n2. 使用 `-E`\n```shell\ngrep -E 'pattern1|pattern2' filename\n```\n3. 使用 `-e`\n```shell\ngrep -e 'pattern1' -e 'pattern2' filename\n```\n* 逻辑或  \n1. 使用管道\n```shell\ngrep -E 'pattern1' filename | grep -E 'pattern2'\n```\n2. 使用 `.*`和`|`\n```shell\ngrep -E 'pattern1.*pattern2|pattern2.*pattern1' filename\n```\n* 逻辑非\n1. 使用 `-V`\n```shell\ngrep -V 'pattern' filename\n```\n","slug":"study-notes/file_operations/grep","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nen6i80003e3jx6l9ney8h","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><pre><code>1. grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来（匹配到的标红);\n2. grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户;\n</code></pre>\n<p>　　3. 工作方式:它在一个或多个文件中搜索字符串模板。若模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。<br>　　4. grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，若模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p>\n<p>　　egrep &#x3D; grep -E：扩展的正则表达式 （除了&lt; , &gt; , \\b 使用其他正则都可以去掉\\）</p>\n<hr>\n<h1 id=\"一般格式：\"><a href=\"#一般格式：\" class=\"headerlink\" title=\"一般格式：\"></a>一般格式：</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [选项...] [模式] [文件...]</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"常见选项：\"><a href=\"#常见选项：\" class=\"headerlink\" title=\"常见选项：\"></a>常见选项：</h1><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>匹配是忽略大小写</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>反向查找，即只打印不匹配的行</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>显示匹配行的行号</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归查找子目录的文件</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>只打印匹配的文件名</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>只打印匹配的行数</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"更多参数：\"><a href=\"#更多参数：\" class=\"headerlink\" title=\"更多参数：\"></a>更多参数：</h1><blockquote>\n<p>-a 或 –text : 不要忽略二进制的数据。<br>-A&lt;显示行数&gt;或–after-context&#x3D;&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。<br>-b 或 –byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。<br>-B&lt;显示行数&gt; 或 –before-context&#x3D;&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。<br>-C&lt;显示行数&gt; 或 –context&#x3D;&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。<br>-d &lt;动作&gt; 或 –directories&#x3D;&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。<br>-e&lt;范本样式&gt; 或 –regexp&#x3D;&lt;范本样式&gt; : 实现多个选项之间的逻辑或关系。<br>-E 或 –extended-regexp : 将样式为延伸的正则表达式来使用。<br>-f&lt;规则文件&gt; 或 –file&#x3D;&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。<br>-F 或 –fixed-regexp : 将样式视为固定字符串的列表。<br>-G 或 –basic-regexp : 将样式视为普通的表示法来使用。<br>-h 或 –no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。<br>-H 或 –with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。<br>-i 或 –ignore-case : 忽略字符大小写的差别。<br>-l 或 –file-with-matches : 列出文件内容符合指定的样式的文件名称。<br>-L 或 –files-without-match : 列出文件内容不符合指定的样式的文件名称。<br>-n 或 –line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。<br>-o 或 –only-matching : 只显示匹配PATTERN 部分。<br>-q 或 –quiet或–silent : 不显示任何信息。<br>-r 或 –recursive : 此参数的效果和指定”-d recurse”参数相同。<br>-s 或 –no-messages : 不显示错误信息。<br>-v 或 –invert-match : 显示不包含匹配文本的所有行。<br>-V 或 –version : 显示版本信息。<br>-w 或 –word-regexp : 只显示全字符合的列。<br>-x –line-regexp : 只显示全列符合的列。<br>-y : 此参数的效果和指定”-i”参数相同。</p>\n</blockquote>\n<hr>\n<h1 id=\"grep中的逻辑关系-and-or-not\"><a href=\"#grep中的逻辑关系-and-or-not\" class=\"headerlink\" title=\"grep中的逻辑关系(and, or, not)\"></a>grep中的逻辑关系(and, or, not)</h1><ul>\n<li>逻辑与</li>\n</ul>\n<ol>\n<li>使用 <code>\\|</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;pattern1\\|pattern2&#x27; filename</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 <code>-E</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E &#x27;pattern1|pattern2&#x27; filename</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用 <code>-e</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -e &#x27;pattern1&#x27; -e &#x27;pattern2&#x27; filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>逻辑或</li>\n</ul>\n<ol>\n<li>使用管道</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E &#x27;pattern1&#x27; filename | grep -E &#x27;pattern2&#x27;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 <code>.*</code>和<code>|</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E &#x27;pattern1.*pattern2|pattern2.*pattern1&#x27; filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>逻辑非</li>\n</ul>\n<ol>\n<li>使用 <code>-V</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -V &#x27;pattern&#x27; filename</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><pre><code>1. grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来（匹配到的标红);\n2. grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户;\n</code></pre>\n<p>　　3. 工作方式:它在一个或多个文件中搜索字符串模板。若模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。<br>　　4. grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，若模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p>\n<p>　　egrep &#x3D; grep -E：扩展的正则表达式 （除了&lt; , &gt; , \\b 使用其他正则都可以去掉\\）</p>\n<hr>\n<h1 id=\"一般格式：\"><a href=\"#一般格式：\" class=\"headerlink\" title=\"一般格式：\"></a>一般格式：</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [选项...] [模式] [文件...]</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"常见选项：\"><a href=\"#常见选项：\" class=\"headerlink\" title=\"常见选项：\"></a>常见选项：</h1><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>匹配是忽略大小写</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>反向查找，即只打印不匹配的行</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>显示匹配行的行号</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归查找子目录的文件</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>只打印匹配的文件名</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>只打印匹配的行数</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"更多参数：\"><a href=\"#更多参数：\" class=\"headerlink\" title=\"更多参数：\"></a>更多参数：</h1><blockquote>\n<p>-a 或 –text : 不要忽略二进制的数据。<br>-A&lt;显示行数&gt;或–after-context&#x3D;&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。<br>-b 或 –byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。<br>-B&lt;显示行数&gt; 或 –before-context&#x3D;&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。<br>-C&lt;显示行数&gt; 或 –context&#x3D;&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。<br>-d &lt;动作&gt; 或 –directories&#x3D;&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。<br>-e&lt;范本样式&gt; 或 –regexp&#x3D;&lt;范本样式&gt; : 实现多个选项之间的逻辑或关系。<br>-E 或 –extended-regexp : 将样式为延伸的正则表达式来使用。<br>-f&lt;规则文件&gt; 或 –file&#x3D;&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。<br>-F 或 –fixed-regexp : 将样式视为固定字符串的列表。<br>-G 或 –basic-regexp : 将样式视为普通的表示法来使用。<br>-h 或 –no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。<br>-H 或 –with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。<br>-i 或 –ignore-case : 忽略字符大小写的差别。<br>-l 或 –file-with-matches : 列出文件内容符合指定的样式的文件名称。<br>-L 或 –files-without-match : 列出文件内容不符合指定的样式的文件名称。<br>-n 或 –line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。<br>-o 或 –only-matching : 只显示匹配PATTERN 部分。<br>-q 或 –quiet或–silent : 不显示任何信息。<br>-r 或 –recursive : 此参数的效果和指定”-d recurse”参数相同。<br>-s 或 –no-messages : 不显示错误信息。<br>-v 或 –invert-match : 显示不包含匹配文本的所有行。<br>-V 或 –version : 显示版本信息。<br>-w 或 –word-regexp : 只显示全字符合的列。<br>-x –line-regexp : 只显示全列符合的列。<br>-y : 此参数的效果和指定”-i”参数相同。</p>\n</blockquote>\n<hr>\n<h1 id=\"grep中的逻辑关系-and-or-not\"><a href=\"#grep中的逻辑关系-and-or-not\" class=\"headerlink\" title=\"grep中的逻辑关系(and, or, not)\"></a>grep中的逻辑关系(and, or, not)</h1><ul>\n<li>逻辑与</li>\n</ul>\n<ol>\n<li>使用 <code>\\|</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;pattern1\\|pattern2&#x27; filename</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 <code>-E</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E &#x27;pattern1|pattern2&#x27; filename</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用 <code>-e</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -e &#x27;pattern1&#x27; -e &#x27;pattern2&#x27; filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>逻辑或</li>\n</ul>\n<ol>\n<li>使用管道</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E &#x27;pattern1&#x27; filename | grep -E &#x27;pattern2&#x27;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用 <code>.*</code>和<code>|</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -E &#x27;pattern1.*pattern2|pattern2.*pattern1&#x27; filename</span><br></pre></td></tr></table></figure>\n<ul>\n<li>逻辑非</li>\n</ul>\n<ol>\n<li>使用 <code>-V</code></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -V &#x27;pattern&#x27; filename</span><br></pre></td></tr></table></figure>\n"},{"title":"linux","toc":true,"_content":"[toc]\n-----------------------------------------\n# 完整的linux系统\n完整的 linux 系统包括：\n* bootloader\n* kernel\n* rootfs\n* dt\n# linux系统目录结构说明  \n    /bin\n        bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。\n    /boot\n        这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。\n    /dev\n        dev是Device(设备) 的缩写,该目录下存放的是Linux 的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的\n    /etc\n        etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n    /home\n        用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。\n    /lib\n        lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。\n    /lost+found\n         这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n    /media\n        linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。\n    /mnt\n        系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。\n    /opt\n        opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n    /proc\n        proc 是 Processes(进程) 的缩写;\n        /proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件;\n        这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息;\n        这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：\n          `echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all`\n    /root\n        该目录为系统管理员，也称作超级权限者的用户主目录。\n    /sbin\n        s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。\n    /selinux\n        这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。\n    /srv\n        该目录存放一些服务启动之后需要提取的数据。\n    /sys\n        这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。\n    /tmp\n        tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。\n    /usr\n        usr 是 unix system resources(unix 系统资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。\n    /usr/bin\n        系统用户使用的应用程序。\n    /usr/sbin\n        超级用户使用的比较高级的管理程序和系统守护程序。\n    /usr/src\n        内核源代码默认的放置目录。\n    /var\n        var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n    /run\n        是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。\n","source":"_posts/study-notes/system/linux.md","raw":"---\ntitle: linux\ntoc: true\n---\n[toc]\n-----------------------------------------\n# 完整的linux系统\n完整的 linux 系统包括：\n* bootloader\n* kernel\n* rootfs\n* dt\n# linux系统目录结构说明  \n    /bin\n        bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。\n    /boot\n        这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。\n    /dev\n        dev是Device(设备) 的缩写,该目录下存放的是Linux 的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的\n    /etc\n        etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n    /home\n        用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。\n    /lib\n        lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。\n    /lost+found\n         这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n    /media\n        linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。\n    /mnt\n        系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。\n    /opt\n        opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n    /proc\n        proc 是 Processes(进程) 的缩写;\n        /proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件;\n        这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息;\n        这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：\n          `echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all`\n    /root\n        该目录为系统管理员，也称作超级权限者的用户主目录。\n    /sbin\n        s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。\n    /selinux\n        这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。\n    /srv\n        该目录存放一些服务启动之后需要提取的数据。\n    /sys\n        这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。\n    /tmp\n        tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。\n    /usr\n        usr 是 unix system resources(unix 系统资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。\n    /usr/bin\n        系统用户使用的应用程序。\n    /usr/sbin\n        超级用户使用的比较高级的管理程序和系统守护程序。\n    /usr/src\n        内核源代码默认的放置目录。\n    /var\n        var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n    /run\n        是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。\n","slug":"study-notes/system/linux","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nen6ib0004e3jxe43kdmb0","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"[toc]\"></a>[toc]</h2><h1 id=\"完整的linux系统\"><a href=\"#完整的linux系统\" class=\"headerlink\" title=\"完整的linux系统\"></a>完整的linux系统</h1><p>完整的 linux 系统包括：</p>\n<ul>\n<li>bootloader</li>\n<li>kernel</li>\n<li>rootfs</li>\n<li>dt</li>\n</ul>\n<h1 id=\"linux系统目录结构说明\"><a href=\"#linux系统目录结构说明\" class=\"headerlink\" title=\"linux系统目录结构说明\"></a>linux系统目录结构说明</h1><pre><code>/bin\n    bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。\n/boot\n    这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。\n/dev\n    dev是Device(设备) 的缩写,该目录下存放的是Linux 的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的\n/etc\n    etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n/home\n    用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。\n/lib\n    lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。\n/lost+found\n     这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n/media\n    linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。\n/mnt\n    系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。\n/opt\n    opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n/proc\n    proc 是 Processes(进程) 的缩写;\n    /proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件;\n    这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息;\n    这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：\n      `echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all`\n/root\n    该目录为系统管理员，也称作超级权限者的用户主目录。\n/sbin\n    s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。\n/selinux\n    这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。\n/srv\n    该目录存放一些服务启动之后需要提取的数据。\n/sys\n    这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。\n/tmp\n    tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。\n/usr\n    usr 是 unix system resources(unix 系统资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。\n/usr/bin\n    系统用户使用的应用程序。\n/usr/sbin\n    超级用户使用的比较高级的管理程序和系统守护程序。\n/usr/src\n    内核源代码默认的放置目录。\n/var\n    var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n/run\n    是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。\n</code></pre>\n","excerpt":"","more":"<h2 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"[toc]\"></a>[toc]</h2><h1 id=\"完整的linux系统\"><a href=\"#完整的linux系统\" class=\"headerlink\" title=\"完整的linux系统\"></a>完整的linux系统</h1><p>完整的 linux 系统包括：</p>\n<ul>\n<li>bootloader</li>\n<li>kernel</li>\n<li>rootfs</li>\n<li>dt</li>\n</ul>\n<h1 id=\"linux系统目录结构说明\"><a href=\"#linux系统目录结构说明\" class=\"headerlink\" title=\"linux系统目录结构说明\"></a>linux系统目录结构说明</h1><pre><code>/bin\n    bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。\n/boot\n    这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。\n/dev\n    dev是Device(设备) 的缩写,该目录下存放的是Linux 的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的\n/etc\n    etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n/home\n    用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。\n/lib\n    lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。\n/lost+found\n     这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n/media\n    linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。\n/mnt\n    系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。\n/opt\n    opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n/proc\n    proc 是 Processes(进程) 的缩写;\n    /proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件;\n    这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息;\n    这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：\n      `echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all`\n/root\n    该目录为系统管理员，也称作超级权限者的用户主目录。\n/sbin\n    s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。\n/selinux\n    这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。\n/srv\n    该目录存放一些服务启动之后需要提取的数据。\n/sys\n    这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。\n/tmp\n    tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。\n/usr\n    usr 是 unix system resources(unix 系统资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。\n/usr/bin\n    系统用户使用的应用程序。\n/usr/sbin\n    超级用户使用的比较高级的管理程序和系统守护程序。\n/usr/src\n    内核源代码默认的放置目录。\n/var\n    var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n/run\n    是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。\n</code></pre>\n"},{"title":"Cortex-M0","toc":true,"_content":"[toc]\n------------------------------\n# Cortex-M0\nCortex-M0简单框图:\n![](./cortex-M0/Cortex-M0处理器简单框图.png)\n# 体系结构\n使用c语言开发Cortex-M0设备，只需了解存储器映射、外设操作方法、异常处理机制和系统模型的一部分\n\n## 系统模型\n\n### 操作模式和状态\n\nCortex-M0包含两种操作模式和两种状态：\n\n* 模式\n\t* Thumb状态\n\t* 调试状态\n* 模式\n\t* 线程模式：执行普通代码\n\t* 处理模式：执行异常处理\n\n### 寄存器和特殊寄存器\nCortex-M0中的寄存器：\n![](./cortex-M0/Cortex-M0的寄存器.png)\n### 寄存器介绍\n* R0~R12  \n为通用寄存器，其初始值未定义。\n* R13  \n    * 作用：为栈寄存器(SP)，用于对栈空间的存取操作\n    * 指令：`push, pop`\n    * 分类：Cortex-M0 在不同的物理位置上有两个栈指针：  \n        * 主栈指针(MSP): 默认指针，用于异常处理\n        * 进程栈指针:只能用在线程模式，可通过配置CONTROL寄存器，选择使用哪个栈指针。\n* R14  \n为链接寄存器，用于存储子程序或函数调用的返回地址。\n* R15  \n程序计数器(PC)，可读可写。读操作返回当前正在执行的指令地址+4，写入会导致程序跳转执行。\n### xPSR 组合程序状态寄存器\n* 该寄存器有三个程序状态寄存器组成:\n    * 用用程序状态寄存器 APSR\n    * 中断程序状态寄存器 IPSR\n    * 执行程序状态寄存器 EPSR\n## 存储器系统\nCortex-M0 有4G的存储器地址空间。在体系结构上，存储器空间被分为一系列的区域，每个区域都有推荐的用途：\n![](./cortex-M0/存储映射.png)\n## 异常和中断\n1. 异常会引起程序控制的变化。当异常发生时，处理器停止当前任务，转而执行异常处理程序，处理完成后继续执行刚才暂停的任务。\n2. 异常分为多种，中断是其中一种，还有一些异常被用于操作系统和错误处理:\n![](./cortex-M0/异常处理类型.png)\n3. 中断事件的异常处理被称为中断服务程序\n## 程序映像和启动流程\n1. 程序映像中的向量表\n![](./cortex-M0/程序映像中的向量表.png)\n2. 复位流程\n![](./cortex-M0/复位流程.png)\n3. MSP和PC初始化示例\n![](./cortex-M0/MSP和PC初始化示例.png)\n# Cortex-M0 编程入门\n## 微控制器启动流程\n程序烧写到Flash存储器后，处理器就可访问了。复位流程如下：\n![](./cortex-M0/处理器复位后的工作步骤.png)\n* 应用程序包含：  \n    * 硬件初始化\n    * 应用程序的处理部分\n    * 中断服务程序\n### 嵌入式程序设计\n* 应用程序处理流程的实现方式\n    * 轮询\n    * 中断驱动\n    * 轮询+中断驱动\n    * 处理并发任务:其中时间片的使用就体现了并发处理的思想\n## 程序映像\nCortex-M0的程序映像包含：  \n* 向量表:和编译器相关\n* C 启动例程:完成数据和堆空间的初始化，完成后跳转到mian()程序\n* 程序代码(应用程序代码和数据)\n* C 库代码(库函数代码，链接时插入)\n## 用C语言操作外设\n* 操作原理：将外设寄存器映射到系统存储器空间，然后通过指针进行访问\n* 访问方法：  \n    * 使用微控制器提供商提供的设备驱动\n    * 直接访问(UART寄存器指针定义以及寄存器访问示例)：\n        ```c\n        // 定义指针\n        #define UART_BAE    0x40003000 // ARM Primecell PL011 的基地址\n        #define UART_DATA   (*((volatile unsingned long *)(UART_BASE + 0x00)))\n        // ...\n        // ...\n        // 使用——发送一个字符\n        int sendchar(int ch)\n        {\n            while(UART_FLAG & 0x20); // 忙，等待\n            UART_DATA = ch;             // 写字符\n            return ch;\n        }\n        ---------------------------------------------------------------\n        // 为了简化代码，可将外设寄存器组定义为结构体，而将外设当作指向这个结构体的指针\n        // 定义\n        typedef struct { // 基于 ARM Primecell PL011\n            volatile unsigned long DATA;    // 0x00\n            volatile unsingned long RSR;    // 0x04\n            // ...\n            // ...\n        } UART_TypeDef;\n\n        #define Uart0 ((UART_TypeDef *)0x40003000)\n        #define Uart1 ((UART_TypeDef *)0x40004000)\n        // 使用——发送一个字符\n        int sendchar(int ch)\n        {\n            while(Uart0->Flag & 0x20);\n            Uart0->Data = ch;\n            return ch;\n        }\n        ```\n# 指令集\n## 指令集列表\n ### 指令集的划分\n根据功能可以将Cortex-M0处理器的指令划分为不同的组：  \n|分类                   |指令                                           |\n|-------------------    |-------------------------------------------    |\n在处理器内部移动数据    |MOV,MOVS,ADDS,MRS, |\n存储器访问              |LDR,STR,|\n栈空间访问              |PUSH,POP,|\n算术运算                |ADDS,|\n逻辑运算                |AND,OR,|\n位移和循环操作          ||\n展开和顺序反转操作      ||\n程序流程控制            ||\n存储器屏障指令          ||\n异常相关指令            |SVC|\n其他功能                |休眠(WFI-等待中断,WFE-等待事件)|\n# 存储器系统\nCortex-M0处理器架构定义的存储器映射:\n![](./cortex-M0/存储器映射.png)\n","source":"_posts/study-notes/architecture/arm/cortex-M0.md","raw":"---\ntitle: Cortex-M0\ntoc: true\n---\n[toc]\n------------------------------\n# Cortex-M0\nCortex-M0简单框图:\n![](./cortex-M0/Cortex-M0处理器简单框图.png)\n# 体系结构\n使用c语言开发Cortex-M0设备，只需了解存储器映射、外设操作方法、异常处理机制和系统模型的一部分\n\n## 系统模型\n\n### 操作模式和状态\n\nCortex-M0包含两种操作模式和两种状态：\n\n* 模式\n\t* Thumb状态\n\t* 调试状态\n* 模式\n\t* 线程模式：执行普通代码\n\t* 处理模式：执行异常处理\n\n### 寄存器和特殊寄存器\nCortex-M0中的寄存器：\n![](./cortex-M0/Cortex-M0的寄存器.png)\n### 寄存器介绍\n* R0~R12  \n为通用寄存器，其初始值未定义。\n* R13  \n    * 作用：为栈寄存器(SP)，用于对栈空间的存取操作\n    * 指令：`push, pop`\n    * 分类：Cortex-M0 在不同的物理位置上有两个栈指针：  \n        * 主栈指针(MSP): 默认指针，用于异常处理\n        * 进程栈指针:只能用在线程模式，可通过配置CONTROL寄存器，选择使用哪个栈指针。\n* R14  \n为链接寄存器，用于存储子程序或函数调用的返回地址。\n* R15  \n程序计数器(PC)，可读可写。读操作返回当前正在执行的指令地址+4，写入会导致程序跳转执行。\n### xPSR 组合程序状态寄存器\n* 该寄存器有三个程序状态寄存器组成:\n    * 用用程序状态寄存器 APSR\n    * 中断程序状态寄存器 IPSR\n    * 执行程序状态寄存器 EPSR\n## 存储器系统\nCortex-M0 有4G的存储器地址空间。在体系结构上，存储器空间被分为一系列的区域，每个区域都有推荐的用途：\n![](./cortex-M0/存储映射.png)\n## 异常和中断\n1. 异常会引起程序控制的变化。当异常发生时，处理器停止当前任务，转而执行异常处理程序，处理完成后继续执行刚才暂停的任务。\n2. 异常分为多种，中断是其中一种，还有一些异常被用于操作系统和错误处理:\n![](./cortex-M0/异常处理类型.png)\n3. 中断事件的异常处理被称为中断服务程序\n## 程序映像和启动流程\n1. 程序映像中的向量表\n![](./cortex-M0/程序映像中的向量表.png)\n2. 复位流程\n![](./cortex-M0/复位流程.png)\n3. MSP和PC初始化示例\n![](./cortex-M0/MSP和PC初始化示例.png)\n# Cortex-M0 编程入门\n## 微控制器启动流程\n程序烧写到Flash存储器后，处理器就可访问了。复位流程如下：\n![](./cortex-M0/处理器复位后的工作步骤.png)\n* 应用程序包含：  \n    * 硬件初始化\n    * 应用程序的处理部分\n    * 中断服务程序\n### 嵌入式程序设计\n* 应用程序处理流程的实现方式\n    * 轮询\n    * 中断驱动\n    * 轮询+中断驱动\n    * 处理并发任务:其中时间片的使用就体现了并发处理的思想\n## 程序映像\nCortex-M0的程序映像包含：  \n* 向量表:和编译器相关\n* C 启动例程:完成数据和堆空间的初始化，完成后跳转到mian()程序\n* 程序代码(应用程序代码和数据)\n* C 库代码(库函数代码，链接时插入)\n## 用C语言操作外设\n* 操作原理：将外设寄存器映射到系统存储器空间，然后通过指针进行访问\n* 访问方法：  \n    * 使用微控制器提供商提供的设备驱动\n    * 直接访问(UART寄存器指针定义以及寄存器访问示例)：\n        ```c\n        // 定义指针\n        #define UART_BAE    0x40003000 // ARM Primecell PL011 的基地址\n        #define UART_DATA   (*((volatile unsingned long *)(UART_BASE + 0x00)))\n        // ...\n        // ...\n        // 使用——发送一个字符\n        int sendchar(int ch)\n        {\n            while(UART_FLAG & 0x20); // 忙，等待\n            UART_DATA = ch;             // 写字符\n            return ch;\n        }\n        ---------------------------------------------------------------\n        // 为了简化代码，可将外设寄存器组定义为结构体，而将外设当作指向这个结构体的指针\n        // 定义\n        typedef struct { // 基于 ARM Primecell PL011\n            volatile unsigned long DATA;    // 0x00\n            volatile unsingned long RSR;    // 0x04\n            // ...\n            // ...\n        } UART_TypeDef;\n\n        #define Uart0 ((UART_TypeDef *)0x40003000)\n        #define Uart1 ((UART_TypeDef *)0x40004000)\n        // 使用——发送一个字符\n        int sendchar(int ch)\n        {\n            while(Uart0->Flag & 0x20);\n            Uart0->Data = ch;\n            return ch;\n        }\n        ```\n# 指令集\n## 指令集列表\n ### 指令集的划分\n根据功能可以将Cortex-M0处理器的指令划分为不同的组：  \n|分类                   |指令                                           |\n|-------------------    |-------------------------------------------    |\n在处理器内部移动数据    |MOV,MOVS,ADDS,MRS, |\n存储器访问              |LDR,STR,|\n栈空间访问              |PUSH,POP,|\n算术运算                |ADDS,|\n逻辑运算                |AND,OR,|\n位移和循环操作          ||\n展开和顺序反转操作      ||\n程序流程控制            ||\n存储器屏障指令          ||\n异常相关指令            |SVC|\n其他功能                |休眠(WFI-等待中断,WFE-等待事件)|\n# 存储器系统\nCortex-M0处理器架构定义的存储器映射:\n![](./cortex-M0/存储器映射.png)\n","slug":"study-notes/architecture/arm/cortex-M0","published":1,"date":"2025-02-02T09:13:27.504Z","updated":"2025-02-02T09:13:27.504Z","_id":"cm6nen6ie0005e3jx90x6csr4","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"[toc]\"></a>[toc]</h2><h1 id=\"Cortex-M0\"><a href=\"#Cortex-M0\" class=\"headerlink\" title=\"Cortex-M0\"></a>Cortex-M0</h1><p>Cortex-M0简单框图:</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/Cortex-M0%E5%A4%84%E7%90%86%E5%99%A8%E7%AE%80%E5%8D%95%E6%A1%86%E5%9B%BE.png\" class=\"\">\n<h1 id=\"体系结构\"><a href=\"#体系结构\" class=\"headerlink\" title=\"体系结构\"></a>体系结构</h1><p>使用c语言开发Cortex-M0设备，只需了解存储器映射、外设操作方法、异常处理机制和系统模型的一部分</p>\n<h2 id=\"系统模型\"><a href=\"#系统模型\" class=\"headerlink\" title=\"系统模型\"></a>系统模型</h2><h3 id=\"操作模式和状态\"><a href=\"#操作模式和状态\" class=\"headerlink\" title=\"操作模式和状态\"></a>操作模式和状态</h3><p>Cortex-M0包含两种操作模式和两种状态：</p>\n<ul>\n<li>模式<ul>\n<li>Thumb状态</li>\n<li>调试状态</li>\n</ul>\n</li>\n<li>模式<ul>\n<li>线程模式：执行普通代码</li>\n<li>处理模式：执行异常处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"寄存器和特殊寄存器\"><a href=\"#寄存器和特殊寄存器\" class=\"headerlink\" title=\"寄存器和特殊寄存器\"></a>寄存器和特殊寄存器</h3><p>Cortex-M0中的寄存器：</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/Cortex-M0%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8.png\" class=\"\">\n<h3 id=\"寄存器介绍\"><a href=\"#寄存器介绍\" class=\"headerlink\" title=\"寄存器介绍\"></a>寄存器介绍</h3><ul>\n<li>R0~R12<br>为通用寄存器，其初始值未定义。</li>\n<li>R13  <ul>\n<li>作用：为栈寄存器(SP)，用于对栈空间的存取操作</li>\n<li>指令：<code>push, pop</code></li>\n<li>分类：Cortex-M0 在不同的物理位置上有两个栈指针：  <ul>\n<li>主栈指针(MSP): 默认指针，用于异常处理</li>\n<li>进程栈指针:只能用在线程模式，可通过配置CONTROL寄存器，选择使用哪个栈指针。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>R14<br>为链接寄存器，用于存储子程序或函数调用的返回地址。</li>\n<li>R15<br>程序计数器(PC)，可读可写。读操作返回当前正在执行的指令地址+4，写入会导致程序跳转执行。</li>\n</ul>\n<h3 id=\"xPSR-组合程序状态寄存器\"><a href=\"#xPSR-组合程序状态寄存器\" class=\"headerlink\" title=\"xPSR 组合程序状态寄存器\"></a>xPSR 组合程序状态寄存器</h3><ul>\n<li>该寄存器有三个程序状态寄存器组成:<ul>\n<li>用用程序状态寄存器 APSR</li>\n<li>中断程序状态寄存器 IPSR</li>\n<li>执行程序状态寄存器 EPSR</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"存储器系统\"><a href=\"#存储器系统\" class=\"headerlink\" title=\"存储器系统\"></a>存储器系统</h2><p>Cortex-M0 有4G的存储器地址空间。在体系结构上，存储器空间被分为一系列的区域，每个区域都有推荐的用途：</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%AD%98%E5%82%A8%E6%98%A0%E5%B0%84.png\" class=\"\">\n<h2 id=\"异常和中断\"><a href=\"#异常和中断\" class=\"headerlink\" title=\"异常和中断\"></a>异常和中断</h2><ol>\n<li>异常会引起程序控制的变化。当异常发生时，处理器停止当前任务，转而执行异常处理程序，处理完成后继续执行刚才暂停的任务。</li>\n<li>异常分为多种，中断是其中一种，还有一些异常被用于操作系统和错误处理:</li>\n</ol>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB%E5%9E%8B.png\" class=\"\">\n<ol start=\"3\">\n<li>中断事件的异常处理被称为中断服务程序</li>\n</ol>\n<h2 id=\"程序映像和启动流程\"><a href=\"#程序映像和启动流程\" class=\"headerlink\" title=\"程序映像和启动流程\"></a>程序映像和启动流程</h2><ol>\n<li>程序映像中的向量表</li>\n</ol>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E7%A8%8B%E5%BA%8F%E6%98%A0%E5%83%8F%E4%B8%AD%E7%9A%84%E5%90%91%E9%87%8F%E8%A1%A8.png\" class=\"\">\n<ol start=\"2\">\n<li>复位流程</li>\n</ol>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%A4%8D%E4%BD%8D%E6%B5%81%E7%A8%8B.png\" class=\"\">\n<ol start=\"3\">\n<li>MSP和PC初始化示例</li>\n</ol>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/MSP%E5%92%8CPC%E5%88%9D%E5%A7%8B%E5%8C%96%E7%A4%BA%E4%BE%8B.png\" class=\"\">\n<h1 id=\"Cortex-M0-编程入门\"><a href=\"#Cortex-M0-编程入门\" class=\"headerlink\" title=\"Cortex-M0 编程入门\"></a>Cortex-M0 编程入门</h1><h2 id=\"微控制器启动流程\"><a href=\"#微控制器启动流程\" class=\"headerlink\" title=\"微控制器启动流程\"></a>微控制器启动流程</h2><p>程序烧写到Flash存储器后，处理器就可访问了。复位流程如下：</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%A4%84%E7%90%86%E5%99%A8%E5%A4%8D%E4%BD%8D%E5%90%8E%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%AD%A5%E9%AA%A4.png\" class=\"\">\n<ul>\n<li>应用程序包含：  <ul>\n<li>硬件初始化</li>\n<li>应用程序的处理部分</li>\n<li>中断服务程序</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"嵌入式程序设计\"><a href=\"#嵌入式程序设计\" class=\"headerlink\" title=\"嵌入式程序设计\"></a>嵌入式程序设计</h3><ul>\n<li>应用程序处理流程的实现方式<ul>\n<li>轮询</li>\n<li>中断驱动</li>\n<li>轮询+中断驱动</li>\n<li>处理并发任务:其中时间片的使用就体现了并发处理的思想</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"程序映像\"><a href=\"#程序映像\" class=\"headerlink\" title=\"程序映像\"></a>程序映像</h2><p>Cortex-M0的程序映像包含：  </p>\n<ul>\n<li>向量表:和编译器相关</li>\n<li>C 启动例程:完成数据和堆空间的初始化，完成后跳转到mian()程序</li>\n<li>程序代码(应用程序代码和数据)</li>\n<li>C 库代码(库函数代码，链接时插入)</li>\n</ul>\n<h2 id=\"用C语言操作外设\"><a href=\"#用C语言操作外设\" class=\"headerlink\" title=\"用C语言操作外设\"></a>用C语言操作外设</h2><ul>\n<li>操作原理：将外设寄存器映射到系统存储器空间，然后通过指针进行访问</li>\n<li>访问方法：  <ul>\n<li>使用微控制器提供商提供的设备驱动</li>\n<li>直接访问(UART寄存器指针定义以及寄存器访问示例)：  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义指针</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> UART_BAE    0x40003000 <span class=\"comment\">// ARM Primecell PL011 的基地址</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> UART_DATA   (*((volatile unsingned long *)(UART_BASE + 0x00)))</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// 使用——发送一个字符</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sendchar</span><span class=\"params\">(<span class=\"type\">int</span> ch)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(UART_FLAG &amp; <span class=\"number\">0x20</span>); <span class=\"comment\">// 忙，等待</span></span><br><span class=\"line\">    UART_DATA = ch;             <span class=\"comment\">// 写字符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">// 为了简化代码，可将外设寄存器组定义为结构体，而将外设当作指向这个结构体的指针</span></span><br><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span> <span class=\"comment\">// 基于 ARM Primecell PL011</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> DATA;    <span class=\"comment\">// 0x00</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> unsingned <span class=\"type\">long</span> RSR;    <span class=\"comment\">// 0x04</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; UART_TypeDef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Uart0 ((UART_TypeDef *)0x40003000)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Uart1 ((UART_TypeDef *)0x40004000)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用——发送一个字符</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sendchar</span><span class=\"params\">(<span class=\"type\">int</span> ch)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Uart0-&gt;Flag &amp; <span class=\"number\">0x20</span>);</span><br><span class=\"line\">    Uart0-&gt;Data = ch;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"指令集\"><a href=\"#指令集\" class=\"headerlink\" title=\"指令集\"></a>指令集</h1><h2 id=\"指令集列表\"><a href=\"#指令集列表\" class=\"headerlink\" title=\"指令集列表\"></a>指令集列表</h2><h3 id=\"指令集的划分\"><a href=\"#指令集的划分\" class=\"headerlink\" title=\"指令集的划分\"></a>指令集的划分</h3><p>根据功能可以将Cortex-M0处理器的指令划分为不同的组：  </p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>指令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>在处理器内部移动数据</td>\n<td>MOV,MOVS,ADDS,MRS,</td>\n</tr>\n<tr>\n<td>存储器访问</td>\n<td>LDR,STR,</td>\n</tr>\n<tr>\n<td>栈空间访问</td>\n<td>PUSH,POP,</td>\n</tr>\n<tr>\n<td>算术运算</td>\n<td>ADDS,</td>\n</tr>\n<tr>\n<td>逻辑运算</td>\n<td>AND,OR,</td>\n</tr>\n<tr>\n<td>位移和循环操作</td>\n<td></td>\n</tr>\n<tr>\n<td>展开和顺序反转操作</td>\n<td></td>\n</tr>\n<tr>\n<td>程序流程控制</td>\n<td></td>\n</tr>\n<tr>\n<td>存储器屏障指令</td>\n<td></td>\n</tr>\n<tr>\n<td>异常相关指令</td>\n<td>SVC</td>\n</tr>\n<tr>\n<td>其他功能</td>\n<td>休眠(WFI-等待中断,WFE-等待事件)</td>\n</tr>\n</tbody></table>\n<h1 id=\"存储器系统-1\"><a href=\"#存储器系统-1\" class=\"headerlink\" title=\"存储器系统\"></a>存储器系统</h1><p>Cortex-M0处理器架构定义的存储器映射:</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%98%A0%E5%B0%84.png\" class=\"\">\n","excerpt":"","more":"<h2 id=\"toc\"><a href=\"#toc\" class=\"headerlink\" title=\"[toc]\"></a>[toc]</h2><h1 id=\"Cortex-M0\"><a href=\"#Cortex-M0\" class=\"headerlink\" title=\"Cortex-M0\"></a>Cortex-M0</h1><p>Cortex-M0简单框图:</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/Cortex-M0%E5%A4%84%E7%90%86%E5%99%A8%E7%AE%80%E5%8D%95%E6%A1%86%E5%9B%BE.png\" class=\"\">\n<h1 id=\"体系结构\"><a href=\"#体系结构\" class=\"headerlink\" title=\"体系结构\"></a>体系结构</h1><p>使用c语言开发Cortex-M0设备，只需了解存储器映射、外设操作方法、异常处理机制和系统模型的一部分</p>\n<h2 id=\"系统模型\"><a href=\"#系统模型\" class=\"headerlink\" title=\"系统模型\"></a>系统模型</h2><h3 id=\"操作模式和状态\"><a href=\"#操作模式和状态\" class=\"headerlink\" title=\"操作模式和状态\"></a>操作模式和状态</h3><p>Cortex-M0包含两种操作模式和两种状态：</p>\n<ul>\n<li>模式<ul>\n<li>Thumb状态</li>\n<li>调试状态</li>\n</ul>\n</li>\n<li>模式<ul>\n<li>线程模式：执行普通代码</li>\n<li>处理模式：执行异常处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"寄存器和特殊寄存器\"><a href=\"#寄存器和特殊寄存器\" class=\"headerlink\" title=\"寄存器和特殊寄存器\"></a>寄存器和特殊寄存器</h3><p>Cortex-M0中的寄存器：</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/Cortex-M0%E7%9A%84%E5%AF%84%E5%AD%98%E5%99%A8.png\" class=\"\">\n<h3 id=\"寄存器介绍\"><a href=\"#寄存器介绍\" class=\"headerlink\" title=\"寄存器介绍\"></a>寄存器介绍</h3><ul>\n<li>R0~R12<br>为通用寄存器，其初始值未定义。</li>\n<li>R13  <ul>\n<li>作用：为栈寄存器(SP)，用于对栈空间的存取操作</li>\n<li>指令：<code>push, pop</code></li>\n<li>分类：Cortex-M0 在不同的物理位置上有两个栈指针：  <ul>\n<li>主栈指针(MSP): 默认指针，用于异常处理</li>\n<li>进程栈指针:只能用在线程模式，可通过配置CONTROL寄存器，选择使用哪个栈指针。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>R14<br>为链接寄存器，用于存储子程序或函数调用的返回地址。</li>\n<li>R15<br>程序计数器(PC)，可读可写。读操作返回当前正在执行的指令地址+4，写入会导致程序跳转执行。</li>\n</ul>\n<h3 id=\"xPSR-组合程序状态寄存器\"><a href=\"#xPSR-组合程序状态寄存器\" class=\"headerlink\" title=\"xPSR 组合程序状态寄存器\"></a>xPSR 组合程序状态寄存器</h3><ul>\n<li>该寄存器有三个程序状态寄存器组成:<ul>\n<li>用用程序状态寄存器 APSR</li>\n<li>中断程序状态寄存器 IPSR</li>\n<li>执行程序状态寄存器 EPSR</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"存储器系统\"><a href=\"#存储器系统\" class=\"headerlink\" title=\"存储器系统\"></a>存储器系统</h2><p>Cortex-M0 有4G的存储器地址空间。在体系结构上，存储器空间被分为一系列的区域，每个区域都有推荐的用途：</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%AD%98%E5%82%A8%E6%98%A0%E5%B0%84.png\" class=\"\">\n<h2 id=\"异常和中断\"><a href=\"#异常和中断\" class=\"headerlink\" title=\"异常和中断\"></a>异常和中断</h2><ol>\n<li>异常会引起程序控制的变化。当异常发生时，处理器停止当前任务，转而执行异常处理程序，处理完成后继续执行刚才暂停的任务。</li>\n<li>异常分为多种，中断是其中一种，还有一些异常被用于操作系统和错误处理:</li>\n</ol>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%B1%BB%E5%9E%8B.png\" class=\"\">\n<ol start=\"3\">\n<li>中断事件的异常处理被称为中断服务程序</li>\n</ol>\n<h2 id=\"程序映像和启动流程\"><a href=\"#程序映像和启动流程\" class=\"headerlink\" title=\"程序映像和启动流程\"></a>程序映像和启动流程</h2><ol>\n<li>程序映像中的向量表</li>\n</ol>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E7%A8%8B%E5%BA%8F%E6%98%A0%E5%83%8F%E4%B8%AD%E7%9A%84%E5%90%91%E9%87%8F%E8%A1%A8.png\" class=\"\">\n<ol start=\"2\">\n<li>复位流程</li>\n</ol>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%A4%8D%E4%BD%8D%E6%B5%81%E7%A8%8B.png\" class=\"\">\n<ol start=\"3\">\n<li>MSP和PC初始化示例</li>\n</ol>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/MSP%E5%92%8CPC%E5%88%9D%E5%A7%8B%E5%8C%96%E7%A4%BA%E4%BE%8B.png\" class=\"\">\n<h1 id=\"Cortex-M0-编程入门\"><a href=\"#Cortex-M0-编程入门\" class=\"headerlink\" title=\"Cortex-M0 编程入门\"></a>Cortex-M0 编程入门</h1><h2 id=\"微控制器启动流程\"><a href=\"#微控制器启动流程\" class=\"headerlink\" title=\"微控制器启动流程\"></a>微控制器启动流程</h2><p>程序烧写到Flash存储器后，处理器就可访问了。复位流程如下：</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%A4%84%E7%90%86%E5%99%A8%E5%A4%8D%E4%BD%8D%E5%90%8E%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%AD%A5%E9%AA%A4.png\" class=\"\">\n<ul>\n<li>应用程序包含：  <ul>\n<li>硬件初始化</li>\n<li>应用程序的处理部分</li>\n<li>中断服务程序</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"嵌入式程序设计\"><a href=\"#嵌入式程序设计\" class=\"headerlink\" title=\"嵌入式程序设计\"></a>嵌入式程序设计</h3><ul>\n<li>应用程序处理流程的实现方式<ul>\n<li>轮询</li>\n<li>中断驱动</li>\n<li>轮询+中断驱动</li>\n<li>处理并发任务:其中时间片的使用就体现了并发处理的思想</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"程序映像\"><a href=\"#程序映像\" class=\"headerlink\" title=\"程序映像\"></a>程序映像</h2><p>Cortex-M0的程序映像包含：  </p>\n<ul>\n<li>向量表:和编译器相关</li>\n<li>C 启动例程:完成数据和堆空间的初始化，完成后跳转到mian()程序</li>\n<li>程序代码(应用程序代码和数据)</li>\n<li>C 库代码(库函数代码，链接时插入)</li>\n</ul>\n<h2 id=\"用C语言操作外设\"><a href=\"#用C语言操作外设\" class=\"headerlink\" title=\"用C语言操作外设\"></a>用C语言操作外设</h2><ul>\n<li>操作原理：将外设寄存器映射到系统存储器空间，然后通过指针进行访问</li>\n<li>访问方法：  <ul>\n<li>使用微控制器提供商提供的设备驱动</li>\n<li>直接访问(UART寄存器指针定义以及寄存器访问示例)：  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义指针</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> UART_BAE    0x40003000 <span class=\"comment\">// ARM Primecell PL011 的基地址</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> UART_DATA   (*((volatile unsingned long *)(UART_BASE + 0x00)))</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// 使用——发送一个字符</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sendchar</span><span class=\"params\">(<span class=\"type\">int</span> ch)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(UART_FLAG &amp; <span class=\"number\">0x20</span>); <span class=\"comment\">// 忙，等待</span></span><br><span class=\"line\">    UART_DATA = ch;             <span class=\"comment\">// 写字符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">// 为了简化代码，可将外设寄存器组定义为结构体，而将外设当作指向这个结构体的指针</span></span><br><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span> <span class=\"comment\">// 基于 ARM Primecell PL011</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> DATA;    <span class=\"comment\">// 0x00</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> unsingned <span class=\"type\">long</span> RSR;    <span class=\"comment\">// 0x04</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; UART_TypeDef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Uart0 ((UART_TypeDef *)0x40003000)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> Uart1 ((UART_TypeDef *)0x40004000)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用——发送一个字符</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">sendchar</span><span class=\"params\">(<span class=\"type\">int</span> ch)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Uart0-&gt;Flag &amp; <span class=\"number\">0x20</span>);</span><br><span class=\"line\">    Uart0-&gt;Data = ch;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"指令集\"><a href=\"#指令集\" class=\"headerlink\" title=\"指令集\"></a>指令集</h1><h2 id=\"指令集列表\"><a href=\"#指令集列表\" class=\"headerlink\" title=\"指令集列表\"></a>指令集列表</h2><h3 id=\"指令集的划分\"><a href=\"#指令集的划分\" class=\"headerlink\" title=\"指令集的划分\"></a>指令集的划分</h3><p>根据功能可以将Cortex-M0处理器的指令划分为不同的组：  </p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>指令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>在处理器内部移动数据</td>\n<td>MOV,MOVS,ADDS,MRS,</td>\n</tr>\n<tr>\n<td>存储器访问</td>\n<td>LDR,STR,</td>\n</tr>\n<tr>\n<td>栈空间访问</td>\n<td>PUSH,POP,</td>\n</tr>\n<tr>\n<td>算术运算</td>\n<td>ADDS,</td>\n</tr>\n<tr>\n<td>逻辑运算</td>\n<td>AND,OR,</td>\n</tr>\n<tr>\n<td>位移和循环操作</td>\n<td></td>\n</tr>\n<tr>\n<td>展开和顺序反转操作</td>\n<td></td>\n</tr>\n<tr>\n<td>程序流程控制</td>\n<td></td>\n</tr>\n<tr>\n<td>存储器屏障指令</td>\n<td></td>\n</tr>\n<tr>\n<td>异常相关指令</td>\n<td>SVC</td>\n</tr>\n<tr>\n<td>其他功能</td>\n<td>休眠(WFI-等待中断,WFE-等待事件)</td>\n</tr>\n</tbody></table>\n<h1 id=\"存储器系统-1\"><a href=\"#存储器系统-1\" class=\"headerlink\" title=\"存储器系统\"></a>存储器系统</h1><p>Cortex-M0处理器架构定义的存储器映射:</p>\n<img src=\"/undefined/study-notes/architecture/arm/cortex-M0/%E5%AD%98%E5%82%A8%E5%99%A8%E6%98%A0%E5%B0%84.png\" class=\"\">\n"},{"title":"cmake","toc":true,"_content":"[toc]\n\n------------------\n# CMake基础  \n## CMakeLists.txt文件结构和基础语法\nCMakeLists.txt通过一系列CMake指令来描述构建过程,如：\n1. 执行CMake的最低版本要求：\n```cmake\ncmake_minimum_required(VERSION <version>)\n#示例\ncmake_minimum_required(VERSION 3.10)\n```\n2. 定义项目名和使用的编程语言\n```cmake\nproject(<project_name> [<language>...])\n#示例\nproject(myobj CXX)\n```\n3. 指定要生成的目标文件和对应的源文件\n```cmake\nadd_executable(<target> <source_files>...)\n# 示例\nadd_executable(myapp main.cpp other.cpp)\n```\n4. 创建一个库以及对应的源文件\n```cmake\nadd_library(<lib_name> <source_files>...)\n# 示例：创建静态库\nadd_library(my_static_lib STATIC library.cpp)\n```\n5. 链接目标文件与其他库\n```cmake\ntarget_link_libraries_(<target> <other_lib_name>...)\n```\n6. 添加头文件搜索路径\n```cmake\ninclude_directories(<dirs>...)\n# 示例\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n```\n7. 设置变量值\n```cmake\nset(<variable> <value>)\n```\n8. 设置目标属性\n```cmake\ntarget_include_directories(TARGET target_name\n                          [BEFORE | AFTER]\n                          [SYSTEM] [PUBLIC | PRIVATE | INTERFACE]\n                          [items1...])\n#示例\ntarget_include_directories(MyExecutable PRIVATE ${PROJECT_SOURCE_DIR}/include)\n```\n9. 安装规则\n```cmake\ninstall(TARGETS target1 [target2 ...]\n        [RUNTIME DESTINATION dir]\n        [LIBRARY DESTINATION dir]\n        [ARCHIVE DESTINATION dir]\n        [INCLUDES DESTINATION [dir ...]]\n        [PRIVATE_HEADER DESTINATION dir]\n        [PUBLIC_HEADER DESTINATION dir])\n# 示例\ninstall(TARGETS MyExecutable RUNTIME DESTINATION bin)\n```\n10. 查找库和包\n```cmake\n# 示例\ncmake_minimum_required(VERSION 3.10)\nproject(MyProject CXX)\n# 查找 Boost 库\nfind_package(Boost REQUIRED)\n# 添加源文件\nadd_executable(MyExecutable main.cpp)\n# 链接 Boost 库\ntarget_link_libraries(MyExecutable Boost::Boost)\n```\n## 变量和缓存\n1. 普通变量\n```cmake\n# 定义\nset(MY_VAR \"Hello World\")\n# 使用\nmessage(STATUS \"MY_VAR=%{MY_VAR}\")\n```\n2. 缓存变量\n缓存变量存储在 CMake 的缓存文件中，用户可以在 CMake 配置时修改这些值。缓存变量通常用于用户输入的设置，例如编译选项和路径。\n```cmake\n#定义\nset(MY_CACHE_VAR \"DefaultValue\" CACHE STRING \"A cache variable\")\n# 使用\nmessage(STATUS \"Cache variable MY_CACHE_VAR is ${MY_CACHE_VAR}\")\n```\n---------------------------------------\n# CMake常用选项  \n```cmake\n# 1. 指定生成器,如Ninja:\ncmake -G \"Ninja\" ..\n# 2. 指定构建类型:\ncmake -DCMAKE_BUILD_TYPE=Release ..\n# 3. cmake生成编译数据库\nccmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON\n```\n\n","source":"_posts/study-notes/building/build/cmake.md","raw":"---\ntitle: cmake\ntoc: true\n---\n[toc]\n\n------------------\n# CMake基础  \n## CMakeLists.txt文件结构和基础语法\nCMakeLists.txt通过一系列CMake指令来描述构建过程,如：\n1. 执行CMake的最低版本要求：\n```cmake\ncmake_minimum_required(VERSION <version>)\n#示例\ncmake_minimum_required(VERSION 3.10)\n```\n2. 定义项目名和使用的编程语言\n```cmake\nproject(<project_name> [<language>...])\n#示例\nproject(myobj CXX)\n```\n3. 指定要生成的目标文件和对应的源文件\n```cmake\nadd_executable(<target> <source_files>...)\n# 示例\nadd_executable(myapp main.cpp other.cpp)\n```\n4. 创建一个库以及对应的源文件\n```cmake\nadd_library(<lib_name> <source_files>...)\n# 示例：创建静态库\nadd_library(my_static_lib STATIC library.cpp)\n```\n5. 链接目标文件与其他库\n```cmake\ntarget_link_libraries_(<target> <other_lib_name>...)\n```\n6. 添加头文件搜索路径\n```cmake\ninclude_directories(<dirs>...)\n# 示例\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n```\n7. 设置变量值\n```cmake\nset(<variable> <value>)\n```\n8. 设置目标属性\n```cmake\ntarget_include_directories(TARGET target_name\n                          [BEFORE | AFTER]\n                          [SYSTEM] [PUBLIC | PRIVATE | INTERFACE]\n                          [items1...])\n#示例\ntarget_include_directories(MyExecutable PRIVATE ${PROJECT_SOURCE_DIR}/include)\n```\n9. 安装规则\n```cmake\ninstall(TARGETS target1 [target2 ...]\n        [RUNTIME DESTINATION dir]\n        [LIBRARY DESTINATION dir]\n        [ARCHIVE DESTINATION dir]\n        [INCLUDES DESTINATION [dir ...]]\n        [PRIVATE_HEADER DESTINATION dir]\n        [PUBLIC_HEADER DESTINATION dir])\n# 示例\ninstall(TARGETS MyExecutable RUNTIME DESTINATION bin)\n```\n10. 查找库和包\n```cmake\n# 示例\ncmake_minimum_required(VERSION 3.10)\nproject(MyProject CXX)\n# 查找 Boost 库\nfind_package(Boost REQUIRED)\n# 添加源文件\nadd_executable(MyExecutable main.cpp)\n# 链接 Boost 库\ntarget_link_libraries(MyExecutable Boost::Boost)\n```\n## 变量和缓存\n1. 普通变量\n```cmake\n# 定义\nset(MY_VAR \"Hello World\")\n# 使用\nmessage(STATUS \"MY_VAR=%{MY_VAR}\")\n```\n2. 缓存变量\n缓存变量存储在 CMake 的缓存文件中，用户可以在 CMake 配置时修改这些值。缓存变量通常用于用户输入的设置，例如编译选项和路径。\n```cmake\n#定义\nset(MY_CACHE_VAR \"DefaultValue\" CACHE STRING \"A cache variable\")\n# 使用\nmessage(STATUS \"Cache variable MY_CACHE_VAR is ${MY_CACHE_VAR}\")\n```\n---------------------------------------\n# CMake常用选项  \n```cmake\n# 1. 指定生成器,如Ninja:\ncmake -G \"Ninja\" ..\n# 2. 指定构建类型:\ncmake -DCMAKE_BUILD_TYPE=Release ..\n# 3. cmake生成编译数据库\nccmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON\n```\n\n","slug":"study-notes/building/build/cmake","published":1,"date":"2025-02-02T09:13:27.515Z","updated":"2025-02-02T09:13:27.515Z","_id":"cm6nen6if0006e3jx1o0z1ko0","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<hr>\n<h1 id=\"CMake基础\"><a href=\"#CMake基础\" class=\"headerlink\" title=\"CMake基础\"></a>CMake基础</h1><h2 id=\"CMakeLists-txt文件结构和基础语法\"><a href=\"#CMakeLists-txt文件结构和基础语法\" class=\"headerlink\" title=\"CMakeLists.txt文件结构和基础语法\"></a>CMakeLists.txt文件结构和基础语法</h2><p>CMakeLists.txt通过一系列CMake指令来描述构建过程,如：</p>\n<ol>\n<li>执行CMake的最低版本要求：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION &lt;version&gt;)</span><br><span class=\"line\"><span class=\"comment\">#示例</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.10</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>定义项目名和使用的编程语言</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">project</span>(&lt;project_name&gt; [&lt;language&gt;...])</span><br><span class=\"line\"><span class=\"comment\">#示例</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(myobj CXX)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>指定要生成的目标文件和对应的源文件</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(&lt;<span class=\"keyword\">target</span>&gt; &lt;source_files&gt;...)</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(myapp main.cpp other.cpp)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>创建一个库以及对应的源文件</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_library</span>(&lt;lib_name&gt; &lt;source_files&gt;...)</span><br><span class=\"line\"><span class=\"comment\"># 示例：创建静态库</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(my_static_lib STATIC library.cpp)</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>链接目标文件与其他库</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_link_libraries_(&lt;<span class=\"keyword\">target</span>&gt; &lt;other_lib_name&gt;...)</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>添加头文件搜索路径</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>(&lt;dirs&gt;...)</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>设置变量值</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(&lt;variable&gt; &lt;value&gt;)</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>设置目标属性</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_include_directories</span>(<span class=\"keyword\">TARGET</span> target_name</span><br><span class=\"line\">                          [BEFORE | AFTER]</span><br><span class=\"line\">                          [SYSTEM] [PUBLIC | PRIVATE | INTERFACE]</span><br><span class=\"line\">                          [items1...])</span><br><span class=\"line\"><span class=\"comment\">#示例</span></span><br><span class=\"line\"><span class=\"keyword\">target_include_directories</span>(MyExecutable PRIVATE <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>安装规则</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS target1 [target2 ...]</span><br><span class=\"line\">        [RUNTIME DESTINATION dir]</span><br><span class=\"line\">        [LIBRARY DESTINATION dir]</span><br><span class=\"line\">        [ARCHIVE DESTINATION dir]</span><br><span class=\"line\">        [INCLUDES DESTINATION [dir ...]]</span><br><span class=\"line\">        [PRIVATE_HEADER DESTINATION dir]</span><br><span class=\"line\">        [PUBLIC_HEADER DESTINATION dir])</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS MyExecutable RUNTIME DESTINATION bin)</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>查找库和包</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.10</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(MyProject CXX)</span><br><span class=\"line\"><span class=\"comment\"># 查找 Boost 库</span></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(Boost REQUIRED)</span><br><span class=\"line\"><span class=\"comment\"># 添加源文件</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(MyExecutable main.cpp)</span><br><span class=\"line\"><span class=\"comment\"># 链接 Boost 库</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(MyExecutable Boost::Boost)</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量和缓存\"><a href=\"#变量和缓存\" class=\"headerlink\" title=\"变量和缓存\"></a>变量和缓存</h2><ol>\n<li>普通变量</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(MY_VAR <span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;MY_VAR=%&#123;MY_VAR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>缓存变量<br>缓存变量存储在 CMake 的缓存文件中，用户可以在 CMake 配置时修改这些值。缓存变量通常用于用户输入的设置，例如编译选项和路径。</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(MY_CACHE_VAR <span class=\"string\">&quot;DefaultValue&quot;</span> CACHE <span class=\"keyword\">STRING</span> <span class=\"string\">&quot;A cache variable&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;Cache variable MY_CACHE_VAR is $&#123;MY_CACHE_VAR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"CMake常用选项\"><a href=\"#CMake常用选项\" class=\"headerlink\" title=\"CMake常用选项\"></a>CMake常用选项</h1><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 指定生成器,如Ninja:</span></span><br><span class=\"line\">cmake -G <span class=\"string\">&quot;Ninja&quot;</span> ..</span><br><span class=\"line\"><span class=\"comment\"># 2. 指定构建类型:</span></span><br><span class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release ..</span><br><span class=\"line\"><span class=\"comment\"># 3. cmake生成编译数据库</span></span><br><span class=\"line\">ccmake -DCMAKE_EXPORT_COMPILE_COMMANDS=<span class=\"keyword\">ON</span></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>[toc]</p>\n<hr>\n<h1 id=\"CMake基础\"><a href=\"#CMake基础\" class=\"headerlink\" title=\"CMake基础\"></a>CMake基础</h1><h2 id=\"CMakeLists-txt文件结构和基础语法\"><a href=\"#CMakeLists-txt文件结构和基础语法\" class=\"headerlink\" title=\"CMakeLists.txt文件结构和基础语法\"></a>CMakeLists.txt文件结构和基础语法</h2><p>CMakeLists.txt通过一系列CMake指令来描述构建过程,如：</p>\n<ol>\n<li>执行CMake的最低版本要求：</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION &lt;version&gt;)</span><br><span class=\"line\"><span class=\"comment\">#示例</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.10</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>定义项目名和使用的编程语言</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">project</span>(&lt;project_name&gt; [&lt;language&gt;...])</span><br><span class=\"line\"><span class=\"comment\">#示例</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(myobj CXX)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>指定要生成的目标文件和对应的源文件</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_executable</span>(&lt;<span class=\"keyword\">target</span>&gt; &lt;source_files&gt;...)</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(myapp main.cpp other.cpp)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>创建一个库以及对应的源文件</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">add_library</span>(&lt;lib_name&gt; &lt;source_files&gt;...)</span><br><span class=\"line\"><span class=\"comment\"># 示例：创建静态库</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(my_static_lib STATIC library.cpp)</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>链接目标文件与其他库</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_link_libraries_(&lt;<span class=\"keyword\">target</span>&gt; &lt;other_lib_name&gt;...)</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>添加头文件搜索路径</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include_directories</span>(&lt;dirs&gt;...)</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>设置变量值</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(&lt;variable&gt; &lt;value&gt;)</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>设置目标属性</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">target_include_directories</span>(<span class=\"keyword\">TARGET</span> target_name</span><br><span class=\"line\">                          [BEFORE | AFTER]</span><br><span class=\"line\">                          [SYSTEM] [PUBLIC | PRIVATE | INTERFACE]</span><br><span class=\"line\">                          [items1...])</span><br><span class=\"line\"><span class=\"comment\">#示例</span></span><br><span class=\"line\"><span class=\"keyword\">target_include_directories</span>(MyExecutable PRIVATE <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>安装规则</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS target1 [target2 ...]</span><br><span class=\"line\">        [RUNTIME DESTINATION dir]</span><br><span class=\"line\">        [LIBRARY DESTINATION dir]</span><br><span class=\"line\">        [ARCHIVE DESTINATION dir]</span><br><span class=\"line\">        [INCLUDES DESTINATION [dir ...]]</span><br><span class=\"line\">        [PRIVATE_HEADER DESTINATION dir]</span><br><span class=\"line\">        [PUBLIC_HEADER DESTINATION dir])</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"keyword\">install</span>(TARGETS MyExecutable RUNTIME DESTINATION bin)</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>查找库和包</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.10</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(MyProject CXX)</span><br><span class=\"line\"><span class=\"comment\"># 查找 Boost 库</span></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(Boost REQUIRED)</span><br><span class=\"line\"><span class=\"comment\"># 添加源文件</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(MyExecutable main.cpp)</span><br><span class=\"line\"><span class=\"comment\"># 链接 Boost 库</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(MyExecutable Boost::Boost)</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量和缓存\"><a href=\"#变量和缓存\" class=\"headerlink\" title=\"变量和缓存\"></a>变量和缓存</h2><ol>\n<li>普通变量</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(MY_VAR <span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;MY_VAR=%&#123;MY_VAR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>缓存变量<br>缓存变量存储在 CMake 的缓存文件中，用户可以在 CMake 配置时修改这些值。缓存变量通常用于用户输入的设置，例如编译选项和路径。</li>\n</ol>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(MY_CACHE_VAR <span class=\"string\">&quot;DefaultValue&quot;</span> CACHE <span class=\"keyword\">STRING</span> <span class=\"string\">&quot;A cache variable&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;Cache variable MY_CACHE_VAR is $&#123;MY_CACHE_VAR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"CMake常用选项\"><a href=\"#CMake常用选项\" class=\"headerlink\" title=\"CMake常用选项\"></a>CMake常用选项</h1><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. 指定生成器,如Ninja:</span></span><br><span class=\"line\">cmake -G <span class=\"string\">&quot;Ninja&quot;</span> ..</span><br><span class=\"line\"><span class=\"comment\"># 2. 指定构建类型:</span></span><br><span class=\"line\">cmake -DCMAKE_BUILD_TYPE=Release ..</span><br><span class=\"line\"><span class=\"comment\"># 3. cmake生成编译数据库</span></span><br><span class=\"line\">ccmake -DCMAKE_EXPORT_COMPILE_COMMANDS=<span class=\"keyword\">ON</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"mysql 管理","toc":true,"_content":"[toc]\n\n# 启动 or 关闭 MySQL服务器\n1. 启动\n```shell\nsudo systemctl start mysql\n```\n2. 关闭\n```shell\nsudo systemctl stop mysql\n```\n3. 重启\n```shell\nsudo systemctl restart mysql\n```\n4. 查看状态\n```shell\nsudo systemctl status mysql\n```\n\n---\n# 用户设置\n## 显示所有用户(使用root权限登陆mysql):\n```sql\nselect User from mysql.user;\n```\n## 查看当前用户\n```sql\nselect current_user();\n#或\nselect user();\n```\n## 创建or 删除用户\n* 创建\n    ```sql\n    create user 'username'@'host' identified by 'password';\n    ```\nusername：用户名。  \nhost：指定用户可以从哪些主机连接。例如，localhost 仅允许本地连接，% 允许从任何主机连接。  \npassword：用户的密码。  \n    \n* 删除\n    ```sql\n    DROP USER 'username'@'host';\n    ```\n* 修改用户名\n```sql\nrename user 'user_name'@'localhost' to 'user_name_1'@'localhost'\n```\n## 授权 or 撤销权限\n```sql\nGRANT privileges ON database_name.* TO 'username'@'host';\n#刷新\nFLUSH PRIVILEGES;\n```\n    privileges：所需的权限，如 ALL PRIVILEGES、SELECT、INSERT、UPDATE、DELETE 等。\n    database_name.*：表示对某个数据库或表授予权限。database_name.* 表示对整个数据库的所有表授予权限，database_name.table_name 表示对指定的表授予权限。\n    TO 'username'@'host'：指定授予权限的用户和主机。\n\n* 撤销\n```sql\nREVOKE privileges ON database_name.* FROM 'username'@'host';\n```\n\n## 查看用户权限\n```sql\nSHOW GRANTS FOR 'username'@'host';\n```\n---\n## MySQL配置文件\n* /etc/my.cnf 文件是 MySQL 配置文件，用于配置 MySQL 服务器的各种参数和选项。\n* 一般情况下，你不需要修改该配置文件.\n\n","source":"_posts/study-notes/database/sql/MySQL管理.md","raw":"---\ntitle: mysql 管理\ntoc: true\n---\n[toc]\n\n# 启动 or 关闭 MySQL服务器\n1. 启动\n```shell\nsudo systemctl start mysql\n```\n2. 关闭\n```shell\nsudo systemctl stop mysql\n```\n3. 重启\n```shell\nsudo systemctl restart mysql\n```\n4. 查看状态\n```shell\nsudo systemctl status mysql\n```\n\n---\n# 用户设置\n## 显示所有用户(使用root权限登陆mysql):\n```sql\nselect User from mysql.user;\n```\n## 查看当前用户\n```sql\nselect current_user();\n#或\nselect user();\n```\n## 创建or 删除用户\n* 创建\n    ```sql\n    create user 'username'@'host' identified by 'password';\n    ```\nusername：用户名。  \nhost：指定用户可以从哪些主机连接。例如，localhost 仅允许本地连接，% 允许从任何主机连接。  \npassword：用户的密码。  \n    \n* 删除\n    ```sql\n    DROP USER 'username'@'host';\n    ```\n* 修改用户名\n```sql\nrename user 'user_name'@'localhost' to 'user_name_1'@'localhost'\n```\n## 授权 or 撤销权限\n```sql\nGRANT privileges ON database_name.* TO 'username'@'host';\n#刷新\nFLUSH PRIVILEGES;\n```\n    privileges：所需的权限，如 ALL PRIVILEGES、SELECT、INSERT、UPDATE、DELETE 等。\n    database_name.*：表示对某个数据库或表授予权限。database_name.* 表示对整个数据库的所有表授予权限，database_name.table_name 表示对指定的表授予权限。\n    TO 'username'@'host'：指定授予权限的用户和主机。\n\n* 撤销\n```sql\nREVOKE privileges ON database_name.* FROM 'username'@'host';\n```\n\n## 查看用户权限\n```sql\nSHOW GRANTS FOR 'username'@'host';\n```\n---\n## MySQL配置文件\n* /etc/my.cnf 文件是 MySQL 配置文件，用于配置 MySQL 服务器的各种参数和选项。\n* 一般情况下，你不需要修改该配置文件.\n\n","slug":"study-notes/database/sql/MySQL管理","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nen6ig0007e3jxd7rub0ci","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"启动-or-关闭-MySQL服务器\"><a href=\"#启动-or-关闭-MySQL服务器\" class=\"headerlink\" title=\"启动 or 关闭 MySQL服务器\"></a>启动 or 关闭 MySQL服务器</h1><ol>\n<li>启动</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start mysql</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>关闭</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop mysql</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>重启</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看状态</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status mysql</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"用户设置\"><a href=\"#用户设置\" class=\"headerlink\" title=\"用户设置\"></a>用户设置</h1><h2 id=\"显示所有用户-使用root权限登陆mysql\"><a href=\"#显示所有用户-使用root权限登陆mysql\" class=\"headerlink\" title=\"显示所有用户(使用root权限登陆mysql):\"></a>显示所有用户(使用root权限登陆mysql):</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">User</span> <span class=\"keyword\">from</span> mysql.user;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看当前用户\"><a href=\"#查看当前用户\" class=\"headerlink\" title=\"查看当前用户\"></a>查看当前用户</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">current_user</span>();</span><br><span class=\"line\">#或</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">user</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建or-删除用户\"><a href=\"#创建or-删除用户\" class=\"headerlink\" title=\"创建or 删除用户\"></a>创建or 删除用户</h2><ul>\n<li><p>创建</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>username：用户名。<br>host：指定用户可以从哪些主机连接。例如，localhost 仅允许本地连接，% 允许从任何主机连接。<br>password：用户的密码。  </p>\n</li>\n<li><p>删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改用户名</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename <span class=\"keyword\">user</span> <span class=\"string\">&#x27;user_name&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> <span class=\"keyword\">to</span> <span class=\"string\">&#x27;user_name_1&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"授权-or-撤销权限\"><a href=\"#授权-or-撤销权限\" class=\"headerlink\" title=\"授权 or 撤销权限\"></a>授权 or 撤销权限</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> privileges <span class=\"keyword\">ON</span> database_name.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span>;</span><br><span class=\"line\">#刷新</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<pre><code>privileges：所需的权限，如 ALL PRIVILEGES、SELECT、INSERT、UPDATE、DELETE 等。\ndatabase_name.*：表示对某个数据库或表授予权限。database_name.* 表示对整个数据库的所有表授予权限，database_name.table_name 表示对指定的表授予权限。\nTO &#39;username&#39;@&#39;host&#39;：指定授予权限的用户和主机。\n</code></pre>\n<ul>\n<li>撤销</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> privileges <span class=\"keyword\">ON</span> database_name.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> GRANTS <span class=\"keyword\">FOR</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"MySQL配置文件\"><a href=\"#MySQL配置文件\" class=\"headerlink\" title=\"MySQL配置文件\"></a>MySQL配置文件</h2><ul>\n<li>&#x2F;etc&#x2F;my.cnf 文件是 MySQL 配置文件，用于配置 MySQL 服务器的各种参数和选项。</li>\n<li>一般情况下，你不需要修改该配置文件.</li>\n</ul>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"启动-or-关闭-MySQL服务器\"><a href=\"#启动-or-关闭-MySQL服务器\" class=\"headerlink\" title=\"启动 or 关闭 MySQL服务器\"></a>启动 or 关闭 MySQL服务器</h1><ol>\n<li>启动</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start mysql</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>关闭</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop mysql</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>重启</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看状态</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status mysql</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"用户设置\"><a href=\"#用户设置\" class=\"headerlink\" title=\"用户设置\"></a>用户设置</h1><h2 id=\"显示所有用户-使用root权限登陆mysql\"><a href=\"#显示所有用户-使用root权限登陆mysql\" class=\"headerlink\" title=\"显示所有用户(使用root权限登陆mysql):\"></a>显示所有用户(使用root权限登陆mysql):</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">User</span> <span class=\"keyword\">from</span> mysql.user;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看当前用户\"><a href=\"#查看当前用户\" class=\"headerlink\" title=\"查看当前用户\"></a>查看当前用户</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">current_user</span>();</span><br><span class=\"line\">#或</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">user</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建or-删除用户\"><a href=\"#创建or-删除用户\" class=\"headerlink\" title=\"创建or 删除用户\"></a>创建or 删除用户</h2><ul>\n<li><p>创建</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>username：用户名。<br>host：指定用户可以从哪些主机连接。例如，localhost 仅允许本地连接，% 允许从任何主机连接。<br>password：用户的密码。  </p>\n</li>\n<li><p>删除</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改用户名</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename <span class=\"keyword\">user</span> <span class=\"string\">&#x27;user_name&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> <span class=\"keyword\">to</span> <span class=\"string\">&#x27;user_name_1&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"授权-or-撤销权限\"><a href=\"#授权-or-撤销权限\" class=\"headerlink\" title=\"授权 or 撤销权限\"></a>授权 or 撤销权限</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> privileges <span class=\"keyword\">ON</span> database_name.<span class=\"operator\">*</span> <span class=\"keyword\">TO</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span>;</span><br><span class=\"line\">#刷新</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<pre><code>privileges：所需的权限，如 ALL PRIVILEGES、SELECT、INSERT、UPDATE、DELETE 等。\ndatabase_name.*：表示对某个数据库或表授予权限。database_name.* 表示对整个数据库的所有表授予权限，database_name.table_name 表示对指定的表授予权限。\nTO &#39;username&#39;@&#39;host&#39;：指定授予权限的用户和主机。\n</code></pre>\n<ul>\n<li>撤销</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">REVOKE</span> privileges <span class=\"keyword\">ON</span> database_name.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> GRANTS <span class=\"keyword\">FOR</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"MySQL配置文件\"><a href=\"#MySQL配置文件\" class=\"headerlink\" title=\"MySQL配置文件\"></a>MySQL配置文件</h2><ul>\n<li>&#x2F;etc&#x2F;my.cnf 文件是 MySQL 配置文件，用于配置 MySQL 服务器的各种参数和选项。</li>\n<li>一般情况下，你不需要修改该配置文件.</li>\n</ul>\n"},{"title":"数据库管理","toc":true,"_content":"[toc]\n\n* 创建数据库\n```sql\nCREATE DATABASE 数据库名;\n```\n\n* 删除数据库\n```sql\nDROP DATABASE <database_name>;        -- 直接删除数据库，不检查是否存在\n或\nDROP DATABASE [IF EXISTS] <database_name>;\n\n```\n\n* 列出数据库列表\n```sql\nshow databases;\n```\n\n* 使用数据库\n```sql\nuse  databases_name;\n```\n","source":"_posts/study-notes/database/sql/数据库操作.md","raw":"---\ntitle: 数据库管理\ntoc: true\n---\n[toc]\n\n* 创建数据库\n```sql\nCREATE DATABASE 数据库名;\n```\n\n* 删除数据库\n```sql\nDROP DATABASE <database_name>;        -- 直接删除数据库，不检查是否存在\n或\nDROP DATABASE [IF EXISTS] <database_name>;\n\n```\n\n* 列出数据库列表\n```sql\nshow databases;\n```\n\n* 使用数据库\n```sql\nuse  databases_name;\n```\n","slug":"study-notes/database/sql/数据库操作","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nen6ih0008e3jx1xpnfvu1","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<ul>\n<li>创建数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE <span class=\"operator\">&lt;</span>database_name<span class=\"operator\">&gt;</span>;        <span class=\"comment\">-- 直接删除数据库，不检查是否存在</span></span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE [IF <span class=\"keyword\">EXISTS</span>] <span class=\"operator\">&lt;</span>database_name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列出数据库列表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use  databases_name;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<ul>\n<li>创建数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE 数据库名;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE <span class=\"operator\">&lt;</span>database_name<span class=\"operator\">&gt;</span>;        <span class=\"comment\">-- 直接删除数据库，不检查是否存在</span></span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE [IF <span class=\"keyword\">EXISTS</span>] <span class=\"operator\">&lt;</span>database_name<span class=\"operator\">&gt;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>列出数据库列表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> databases;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use  databases_name;</span><br></pre></td></tr></table></figure>\n"},{"title":"数据操作","toc":true,"_content":"[toc]\n\n# 插入数据\n```sql\nINSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n```\n---\n# 数据更新\n```sql\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n---\n# 数据删除\n```sql\nDELETE FROM table_name\nWHERE condition;\n```\n---\n# 读取数据\n```sql\nselect * from table_name;\n```\n---\n# 数据筛选\n```sql\nSELECT column1, column2, ...\nFROM table_name\n[WHERE condition]\n[ORDER BY column_name [ASC | DESC]]\n[LIMIT number];\n```\n    column1, column2, ... :想要选择的列的名称，如果使用 * 表示选择所有列。\n    table_name :要从中查询数据的表的名称。\n    WHERE condition :一个可选的子句，用于指定过滤条件，只返回符合条件的行。\n    ORDER BY column_name [ASC | DESC] :一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。\n    LIMIT number :一个可选的子句，用于限制返回的行数。\n1. 在WHERE 后使用精准筛选`select * from table_name where column1='pattern`\n1. 在WHERE 后使用模糊筛选`select * from table_name where column1 LIKE '匹配字符串'`\n    pattern的匹配可取：\n        `%`:表示一个或多个字符\n        `_`:表示一个字符\n\n---\n# 连表查询\n    UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合，并去除重复的行。\n```sql\nSELECT column1, column2, ...\nFROM table1\nWHERE condition1\nUNION\nSELECT column1, column2, ...\nFROM table2\nWHERE condition2\n[ORDER BY column1, column2, ...];\n```\n","source":"_posts/study-notes/database/sql/数据操作.md","raw":"---\ntitle: 数据操作\ntoc: true\n---\n[toc]\n\n# 插入数据\n```sql\nINSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n```\n---\n# 数据更新\n```sql\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n---\n# 数据删除\n```sql\nDELETE FROM table_name\nWHERE condition;\n```\n---\n# 读取数据\n```sql\nselect * from table_name;\n```\n---\n# 数据筛选\n```sql\nSELECT column1, column2, ...\nFROM table_name\n[WHERE condition]\n[ORDER BY column_name [ASC | DESC]]\n[LIMIT number];\n```\n    column1, column2, ... :想要选择的列的名称，如果使用 * 表示选择所有列。\n    table_name :要从中查询数据的表的名称。\n    WHERE condition :一个可选的子句，用于指定过滤条件，只返回符合条件的行。\n    ORDER BY column_name [ASC | DESC] :一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。\n    LIMIT number :一个可选的子句，用于限制返回的行数。\n1. 在WHERE 后使用精准筛选`select * from table_name where column1='pattern`\n1. 在WHERE 后使用模糊筛选`select * from table_name where column1 LIKE '匹配字符串'`\n    pattern的匹配可取：\n        `%`:表示一个或多个字符\n        `_`:表示一个字符\n\n---\n# 连表查询\n    UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合，并去除重复的行。\n```sql\nSELECT column1, column2, ...\nFROM table1\nWHERE condition1\nUNION\nSELECT column1, column2, ...\nFROM table2\nWHERE condition2\n[ORDER BY column1, column2, ...];\n```\n","slug":"study-notes/database/sql/数据操作","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nen6ii0009e3jxdpme44t2","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> table_name (column1, column2, column3, ...)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"数据更新\"><a href=\"#数据更新\" class=\"headerlink\" title=\"数据更新\"></a>数据更新</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2, ...</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"数据删除\"><a href=\"#数据删除\" class=\"headerlink\" title=\"数据删除\"></a>数据删除</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> table_name;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"数据筛选\"><a href=\"#数据筛选\" class=\"headerlink\" title=\"数据筛选\"></a>数据筛选</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column_name [<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>]]</span><br><span class=\"line\">[LIMIT number];</span><br></pre></td></tr></table></figure>\n<pre><code>column1, column2, ... :想要选择的列的名称，如果使用 * 表示选择所有列。\ntable_name :要从中查询数据的表的名称。\nWHERE condition :一个可选的子句，用于指定过滤条件，只返回符合条件的行。\nORDER BY column_name [ASC | DESC] :一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。\nLIMIT number :一个可选的子句，用于限制返回的行数。\n</code></pre>\n<ol>\n<li>在WHERE 后使用精准筛选<code>select * from table_name where column1=&#39;pattern</code></li>\n<li>在WHERE 后使用模糊筛选<code>select * from table_name where column1 LIKE &#39;匹配字符串&#39;</code><br> pattern的匹配可取：<br> <code>%</code>:表示一个或多个字符<br> <code>_</code>:表示一个字符</li>\n</ol>\n<hr>\n<h1 id=\"连表查询\"><a href=\"#连表查询\" class=\"headerlink\" title=\"连表查询\"></a>连表查询</h1><pre><code>UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合，并去除重复的行。\n</code></pre>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> condition1</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> condition2</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column1, column2, ...];</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> table_name (column1, column2, column3, ...)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"数据更新\"><a href=\"#数据更新\" class=\"headerlink\" title=\"数据更新\"></a>数据更新</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2, ...</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"数据删除\"><a href=\"#数据删除\" class=\"headerlink\" title=\"数据删除\"></a>数据删除</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> table_name;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"数据筛选\"><a href=\"#数据筛选\" class=\"headerlink\" title=\"数据筛选\"></a>数据筛选</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> <span class=\"keyword\">condition</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column_name [<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>]]</span><br><span class=\"line\">[LIMIT number];</span><br></pre></td></tr></table></figure>\n<pre><code>column1, column2, ... :想要选择的列的名称，如果使用 * 表示选择所有列。\ntable_name :要从中查询数据的表的名称。\nWHERE condition :一个可选的子句，用于指定过滤条件，只返回符合条件的行。\nORDER BY column_name [ASC | DESC] :一个可选的子句，用于指定结果集的排序顺序，默认是升序（ASC）。\nLIMIT number :一个可选的子句，用于限制返回的行数。\n</code></pre>\n<ol>\n<li>在WHERE 后使用精准筛选<code>select * from table_name where column1=&#39;pattern</code></li>\n<li>在WHERE 后使用模糊筛选<code>select * from table_name where column1 LIKE &#39;匹配字符串&#39;</code><br> pattern的匹配可取：<br> <code>%</code>:表示一个或多个字符<br> <code>_</code>:表示一个字符</li>\n</ol>\n<hr>\n<h1 id=\"连表查询\"><a href=\"#连表查询\" class=\"headerlink\" title=\"连表查询\"></a>连表查询</h1><pre><code>UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合，并去除重复的行。\n</code></pre>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> condition1</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2, ...</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table2</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> condition2</span><br><span class=\"line\">[<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column1, column2, ...];</span><br></pre></td></tr></table></figure>\n"},{"title":"表操作","toc":true,"_content":"[toc]\n\n\n# 创建\n```sql\nCREATE TABLE table_name (\n        column1 datatype,\n        column2 datatype,\n        ...\n        );\n```\n\n# 删除\n```sql\nDROP TABLE table_name;     -- 直接删除表，不检查是否存在\nDROP TABLE [IF EXISTS] table_name;  -- 会检查是否存在，如果存在则删除\n```\n","source":"_posts/study-notes/database/sql/表操作.md","raw":"---\ntitle: 表操作\ntoc: true\n---\n[toc]\n\n\n# 创建\n```sql\nCREATE TABLE table_name (\n        column1 datatype,\n        column2 datatype,\n        ...\n        );\n```\n\n# 删除\n```sql\nDROP TABLE table_name;     -- 直接删除表，不检查是否存在\nDROP TABLE [IF EXISTS] table_name;  -- 会检查是否存在，如果存在则删除\n```\n","slug":"study-notes/database/sql/表操作","published":1,"date":"2025-02-02T09:13:27.516Z","updated":"2025-02-02T09:13:27.516Z","_id":"cm6nen6ii000ae3jxa08hbzs9","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> table_name (</span><br><span class=\"line\">        column1 datatype,</span><br><span class=\"line\">        column2 datatype,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> table_name;     <span class=\"comment\">-- 直接删除表，不检查是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> [IF <span class=\"keyword\">EXISTS</span>] table_name;  <span class=\"comment\">-- 会检查是否存在，如果存在则删除</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> table_name (</span><br><span class=\"line\">        column1 datatype,</span><br><span class=\"line\">        column2 datatype,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> table_name;     <span class=\"comment\">-- 直接删除表，不检查是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> [IF <span class=\"keyword\">EXISTS</span>] table_name;  <span class=\"comment\">-- 会检查是否存在，如果存在则删除</span></span><br></pre></td></tr></table></figure>\n"},{"title":"c++ 进阶","toc":true,"_content":"[toc]\n\n# 异常处理\n## 1. 简介  \nc++异常是指在程序运行过程中产生的特殊情况，通常这些特殊情况需要得到特殊处理。\n\n## 2. C++异常处理涉及到三个关键字：try、catch、throw:\n    * **throw**: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。\n    * **catch**: 在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。\n    * **try**: try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。\n\n## 3. 结构\n```c++\ntry\n{\n    // 保护代码\n}catch( ExceptionName e1 )\n{\n    // catch 块\n}catch( ExceptionName e2 )\n{\n    // catch 块\n}catch( ExceptionName eN )\n{\n    // catch 块\n}\n```\n## 4. 示例\n```c++\n#include <iostream>\nusing namespace std;\n\ndouble division(int a, int b)\n{\n    if( b == 0 )\n    {\n        throw \"Division by zero condition!\";\n    }\n    return ((double)a / b);\n}\n\nint main ()\n{\n    int x = 50;\n    int y = 0;\n    double z = 0;\n\n    try {\n        z = division(x, y);\n        cout << z << endl;\n    }catch (const char* msg) {\n        cerr << msg << endl;\n    }\n\n    return 0;\n}\n```\n\n* c++标准的异常<exception>\n这些标准异常通过父子类层次结构组织起来，如下图所示：\n![异常处理](./pictures/c++进阶-异常处理-标准异常组织结构图.png)\n\n|异常                   |表述                                                                       |\n|:----------------------|:--------------------------------------------------------------------------|\n|std\\:\\:exception       |该异常是所有标准 C++ 异常的父类。                                          |\n|std::bad_alloc         |该异常可以通过 new 抛出。                                                  |\n|std::bad_cast|该异常可以通过 dynamic_cast 抛出。                                                   |\n|std::bad_typeid    |该异常可以通过 typeid 抛出。                                                   |\n|std::bad_exception|这在处理 C++ 程序中无法预期的异常时非常有用。                                   |\n|std::logic_error       |理论上可以通过读取代码来检测到的异常。                                     |\n|std::domain_error|当使用了一个无效的数学域时，会抛出该异常。                                       |\n|std::invalid_argument  |当使用了无效的参数时，会抛出该异常。                                       |\n|std::length_error      |当创建了太长的 std::string 时，会抛出该异常。                              |\n|std::out_of_range      |该异常可以通过方法抛出，例如 std::vector 和 std::bitset<>::operator\\[]()。 |\n|std::runtime_error     |理论上不可以通过读取代码来检测到的异常。                                   |\n|std::overflow_error    |当发生数学上溢时，会抛出该异常。                                           |\n|std::range_error       |当尝试存储超出范围的值时，会抛出该异常。                                   |\n|std::underflow_error   |当发生数学下溢时，会抛出该异常。                                           |\n\n---\n# 模板  \n\n模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板可以用来定义函数和类：\n## 1. 函数模板\n定义形式：  \n```C++\ntemplate <typename type> ret-type func-name(parameter list)\n{\n   // 函数的主体\n}\n```\n示例  \n```C++\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\ntemplate <typename T>\ninline T const& Max (T const& a, T const& b) \n{ \n\treturn a < b ? b:a; \n} \nint main ()\n{\n\n\tint i = 39;\n\tint j = 20;\n\tcout << \"Max(i, j): \" << Max(i, j) << endl; \n\n\tdouble f1 = 13.5; \n\tdouble f2 = 20.7; \n\tcout << \"Max(f1, f2): \" << Max(f1, f2) << endl; \n\n\tstring s1 = \"Hello\"; \n\tstring s2 = \"World\"; \n\tcout << \"Max(s1, s2): \" << Max(s1, s2) << endl; \n\n\treturn 0;\n}\n```\n\n## 2. 类模板\n定义形式：\n```C++\ntemplate <class type> class class-name {\n\n}\n```\n示例：\n```C++\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <string>\n#include <stdexcept>\n\nusing namespace std;\n\ntemplate <class T>\nclass Stack { \n\tprivate: \n\t\tvector<T> elems;     // 元素 \n\n\tpublic: \n\t\tvoid push(T const&);  // 入栈\n\t\tvoid pop();               // 出栈\n\t\tT top() const;            // 返回栈顶元素\n\t\tbool empty() const{       // 如果为空则返回真。\n\t\t\treturn elems.empty(); \n\t\t} \n}; \n\n\ttemplate <class T>\nvoid Stack<T>::push (T const& elem) \n{ \n\t// 追加传入元素的副本\n\telems.push_back(elem);    \n} \n\n\ttemplate <class T>\nvoid Stack<T>::pop () \n{ \n\tif (elems.empty()) { \n\t\tthrow out_of_range(\"Stack<>::pop(): empty stack\"); \n\t}\n\t// 删除最后一个元素\n\telems.pop_back();         \n} \n\ntemplate <class T>\nT Stack<T>::top () const \n{ \n\tif (elems.empty()) { \n\t\tthrow out_of_range(\"Stack<>::top(): empty stack\"); \n\t}\n\t// 返回最后一个元素的副本 \n\treturn elems.back();      \n} \n\nint main() \n{\n\ttry { \n\t\tStack<int>         intStack;  // int 类型的栈 \n\t\tStack<string> stringStack;    // string 类型的栈 \n\n\t\t// 操作 int 类型的栈 \n\t\tintStack.push(7); \n\t\tcout << intStack.top() <<endl; \n\n\t\t// 操作 string 类型的栈 \n\t\tstringStack.push(\"hello\"); \n\t\tcout << stringStack.top() << std::endl; \n\t\tstringStack.pop(); \n\t\tstringStack.pop(); \n\t} \n\tcatch (exception const& ex) { \n\t\tcerr << \"Exception: \" << ex.what() <<endl; \n\t\treturn -1;\n\t} \n}\n```\n# 自定义namespace\n在单独的文件中自定义的'namespace'是无法在全局命名空间中使用的因为它不在全局命名空间中.若想在 main.c 中使用该'namespace'中定义的内容,就需要一个'myNmaespace.h'的头文件中进行声明,然后在mian.c中引用。\n","source":"_posts/study-notes/language/c++/c++adbanced.md","raw":"---\ntitle: c++ 进阶\ntoc: true\n---\n[toc]\n\n# 异常处理\n## 1. 简介  \nc++异常是指在程序运行过程中产生的特殊情况，通常这些特殊情况需要得到特殊处理。\n\n## 2. C++异常处理涉及到三个关键字：try、catch、throw:\n    * **throw**: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。\n    * **catch**: 在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。\n    * **try**: try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。\n\n## 3. 结构\n```c++\ntry\n{\n    // 保护代码\n}catch( ExceptionName e1 )\n{\n    // catch 块\n}catch( ExceptionName e2 )\n{\n    // catch 块\n}catch( ExceptionName eN )\n{\n    // catch 块\n}\n```\n## 4. 示例\n```c++\n#include <iostream>\nusing namespace std;\n\ndouble division(int a, int b)\n{\n    if( b == 0 )\n    {\n        throw \"Division by zero condition!\";\n    }\n    return ((double)a / b);\n}\n\nint main ()\n{\n    int x = 50;\n    int y = 0;\n    double z = 0;\n\n    try {\n        z = division(x, y);\n        cout << z << endl;\n    }catch (const char* msg) {\n        cerr << msg << endl;\n    }\n\n    return 0;\n}\n```\n\n* c++标准的异常<exception>\n这些标准异常通过父子类层次结构组织起来，如下图所示：\n![异常处理](./pictures/c++进阶-异常处理-标准异常组织结构图.png)\n\n|异常                   |表述                                                                       |\n|:----------------------|:--------------------------------------------------------------------------|\n|std\\:\\:exception       |该异常是所有标准 C++ 异常的父类。                                          |\n|std::bad_alloc         |该异常可以通过 new 抛出。                                                  |\n|std::bad_cast|该异常可以通过 dynamic_cast 抛出。                                                   |\n|std::bad_typeid    |该异常可以通过 typeid 抛出。                                                   |\n|std::bad_exception|这在处理 C++ 程序中无法预期的异常时非常有用。                                   |\n|std::logic_error       |理论上可以通过读取代码来检测到的异常。                                     |\n|std::domain_error|当使用了一个无效的数学域时，会抛出该异常。                                       |\n|std::invalid_argument  |当使用了无效的参数时，会抛出该异常。                                       |\n|std::length_error      |当创建了太长的 std::string 时，会抛出该异常。                              |\n|std::out_of_range      |该异常可以通过方法抛出，例如 std::vector 和 std::bitset<>::operator\\[]()。 |\n|std::runtime_error     |理论上不可以通过读取代码来检测到的异常。                                   |\n|std::overflow_error    |当发生数学上溢时，会抛出该异常。                                           |\n|std::range_error       |当尝试存储超出范围的值时，会抛出该异常。                                   |\n|std::underflow_error   |当发生数学下溢时，会抛出该异常。                                           |\n\n---\n# 模板  \n\n模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板可以用来定义函数和类：\n## 1. 函数模板\n定义形式：  \n```C++\ntemplate <typename type> ret-type func-name(parameter list)\n{\n   // 函数的主体\n}\n```\n示例  \n```C++\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\ntemplate <typename T>\ninline T const& Max (T const& a, T const& b) \n{ \n\treturn a < b ? b:a; \n} \nint main ()\n{\n\n\tint i = 39;\n\tint j = 20;\n\tcout << \"Max(i, j): \" << Max(i, j) << endl; \n\n\tdouble f1 = 13.5; \n\tdouble f2 = 20.7; \n\tcout << \"Max(f1, f2): \" << Max(f1, f2) << endl; \n\n\tstring s1 = \"Hello\"; \n\tstring s2 = \"World\"; \n\tcout << \"Max(s1, s2): \" << Max(s1, s2) << endl; \n\n\treturn 0;\n}\n```\n\n## 2. 类模板\n定义形式：\n```C++\ntemplate <class type> class class-name {\n\n}\n```\n示例：\n```C++\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <string>\n#include <stdexcept>\n\nusing namespace std;\n\ntemplate <class T>\nclass Stack { \n\tprivate: \n\t\tvector<T> elems;     // 元素 \n\n\tpublic: \n\t\tvoid push(T const&);  // 入栈\n\t\tvoid pop();               // 出栈\n\t\tT top() const;            // 返回栈顶元素\n\t\tbool empty() const{       // 如果为空则返回真。\n\t\t\treturn elems.empty(); \n\t\t} \n}; \n\n\ttemplate <class T>\nvoid Stack<T>::push (T const& elem) \n{ \n\t// 追加传入元素的副本\n\telems.push_back(elem);    \n} \n\n\ttemplate <class T>\nvoid Stack<T>::pop () \n{ \n\tif (elems.empty()) { \n\t\tthrow out_of_range(\"Stack<>::pop(): empty stack\"); \n\t}\n\t// 删除最后一个元素\n\telems.pop_back();         \n} \n\ntemplate <class T>\nT Stack<T>::top () const \n{ \n\tif (elems.empty()) { \n\t\tthrow out_of_range(\"Stack<>::top(): empty stack\"); \n\t}\n\t// 返回最后一个元素的副本 \n\treturn elems.back();      \n} \n\nint main() \n{\n\ttry { \n\t\tStack<int>         intStack;  // int 类型的栈 \n\t\tStack<string> stringStack;    // string 类型的栈 \n\n\t\t// 操作 int 类型的栈 \n\t\tintStack.push(7); \n\t\tcout << intStack.top() <<endl; \n\n\t\t// 操作 string 类型的栈 \n\t\tstringStack.push(\"hello\"); \n\t\tcout << stringStack.top() << std::endl; \n\t\tstringStack.pop(); \n\t\tstringStack.pop(); \n\t} \n\tcatch (exception const& ex) { \n\t\tcerr << \"Exception: \" << ex.what() <<endl; \n\t\treturn -1;\n\t} \n}\n```\n# 自定义namespace\n在单独的文件中自定义的'namespace'是无法在全局命名空间中使用的因为它不在全局命名空间中.若想在 main.c 中使用该'namespace'中定义的内容,就需要一个'myNmaespace.h'的头文件中进行声明,然后在mian.c中引用。\n","slug":"study-notes/language/c++/c++adbanced","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nen6ij000be3jx18fsarqx","comments":1,"layout":"post","photos":[],"content":"<p>[toc]</p>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>c++异常是指在程序运行过程中产生的特殊情况，通常这些特殊情况需要得到特殊处理。</p>\n<h2 id=\"2-C-异常处理涉及到三个关键字：try、catch、throw\"><a href=\"#2-C-异常处理涉及到三个关键字：try、catch、throw\" class=\"headerlink\" title=\"2. C++异常处理涉及到三个关键字：try、catch、throw:\"></a>2. C++异常处理涉及到三个关键字：try、catch、throw:</h2><pre><code>* **throw**: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。\n* **catch**: 在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。\n* **try**: try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。\n</code></pre>\n<h2 id=\"3-结构\"><a href=\"#3-结构\" class=\"headerlink\" title=\"3. 结构\"></a>3. 结构</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保护代码</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">catch</span>( ExceptionName e1 )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// catch 块</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">catch</span>( ExceptionName e2 )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// catch 块</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">catch</span>( ExceptionName eN )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// catch 块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">division</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( b == <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Division by zero condition!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((<span class=\"type\">double</span>)a / b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">50</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> z = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        z = <span class=\"built_in\">division</span>(x, y);</span><br><span class=\"line\">        cout &lt;&lt; z &lt;&lt; endl;</span><br><span class=\"line\">    &#125;<span class=\"built_in\">catch</span> (<span class=\"type\">const</span> <span class=\"type\">char</span>* msg) &#123;</span><br><span class=\"line\">        cerr &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>c++标准的异常<exception><br>这些标准异常通过父子类层次结构组织起来，如下图所示：</li>\n</ul>\n\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">异常</th>\n<th align=\"left\">表述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">std::exception</td>\n<td align=\"left\">该异常是所有标准 C++ 异常的父类。</td>\n</tr>\n<tr>\n<td align=\"left\">std::bad_alloc</td>\n<td align=\"left\">该异常可以通过 new 抛出。</td>\n</tr>\n<tr>\n<td align=\"left\">std::bad_cast</td>\n<td align=\"left\">该异常可以通过 dynamic_cast 抛出。</td>\n</tr>\n<tr>\n<td align=\"left\">std::bad_typeid</td>\n<td align=\"left\">该异常可以通过 typeid 抛出。</td>\n</tr>\n<tr>\n<td align=\"left\">std::bad_exception</td>\n<td align=\"left\">这在处理 C++ 程序中无法预期的异常时非常有用。</td>\n</tr>\n<tr>\n<td align=\"left\">std::logic_error</td>\n<td align=\"left\">理论上可以通过读取代码来检测到的异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::domain_error</td>\n<td align=\"left\">当使用了一个无效的数学域时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::invalid_argument</td>\n<td align=\"left\">当使用了无效的参数时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::length_error</td>\n<td align=\"left\">当创建了太长的 std::string 时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::out_of_range</td>\n<td align=\"left\">该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator[]()。</td>\n</tr>\n<tr>\n<td align=\"left\">std::runtime_error</td>\n<td align=\"left\">理论上不可以通过读取代码来检测到的异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::overflow_error</td>\n<td align=\"left\">当发生数学上溢时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::range_error</td>\n<td align=\"left\">当尝试存储超出范围的值时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::underflow_error</td>\n<td align=\"left\">当发生数学下溢时，会抛出该异常。</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h1><p>模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板可以用来定义函数和类：</p>\n<h2 id=\"1-函数模板\"><a href=\"#1-函数模板\" class=\"headerlink\" title=\"1. 函数模板\"></a>1. 函数模板</h2><p>定义形式：  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> type&gt; ret-type func-<span class=\"built_in\">name</span>(parameter list)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 函数的主体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> T <span class=\"type\">const</span>&amp; <span class=\"title\">Max</span> <span class=\"params\">(T <span class=\"type\">const</span>&amp; a, T <span class=\"type\">const</span>&amp; b)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; b ? b:a; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">39</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Max(i, j): &quot;</span> &lt;&lt; <span class=\"built_in\">Max</span>(i, j) &lt;&lt; endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">double</span> f1 = <span class=\"number\">13.5</span>; </span><br><span class=\"line\">\t<span class=\"type\">double</span> f2 = <span class=\"number\">20.7</span>; </span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Max(f1, f2): &quot;</span> &lt;&lt; <span class=\"built_in\">Max</span>(f1, f2) &lt;&lt; endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\tstring s1 = <span class=\"string\">&quot;Hello&quot;</span>; </span><br><span class=\"line\">\tstring s2 = <span class=\"string\">&quot;World&quot;</span>; </span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Max(s1, s2): &quot;</span> &lt;&lt; <span class=\"built_in\">Max</span>(s1, s2) &lt;&lt; endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-类模板\"><a href=\"#2-类模板\" class=\"headerlink\" title=\"2. 类模板\"></a>2. 类模板</h2><p>定义形式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">type</span>&gt; <span class=\"keyword\">class</span> <span class=\"title class_\">class</span>-name &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdexcept&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span>: </span><br><span class=\"line\">\t\tvector&lt;T&gt; elems;     <span class=\"comment\">// 元素 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>: </span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(T <span class=\"type\">const</span>&amp;)</span></span>;  <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>;               <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">\t\t<span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;            <span class=\"comment\">// 返回栈顶元素</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>&#123;       <span class=\"comment\">// 如果为空则返回真。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> elems.<span class=\"built_in\">empty</span>(); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Stack&lt;T&gt;::<span class=\"built_in\">push</span> (T <span class=\"type\">const</span>&amp; elem) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 追加传入元素的副本</span></span><br><span class=\"line\">\telems.<span class=\"built_in\">push_back</span>(elem);    </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Stack&lt;T&gt;::<span class=\"built_in\">pop</span> () </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (elems.<span class=\"built_in\">empty</span>()) &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">out_of_range</span>(<span class=\"string\">&quot;Stack&lt;&gt;::pop(): empty stack&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 删除最后一个元素</span></span><br><span class=\"line\">\telems.<span class=\"built_in\">pop_back</span>();         </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T Stack&lt;T&gt;::<span class=\"built_in\">top</span> () <span class=\"type\">const</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (elems.<span class=\"built_in\">empty</span>()) &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">out_of_range</span>(<span class=\"string\">&quot;Stack&lt;&gt;::top(): empty stack&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回最后一个元素的副本 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> elems.<span class=\"built_in\">back</span>();      </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">\t\tStack&lt;<span class=\"type\">int</span>&gt;         intStack;  <span class=\"comment\">// int 类型的栈 </span></span><br><span class=\"line\">\t\tStack&lt;string&gt; stringStack;    <span class=\"comment\">// string 类型的栈 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 操作 int 类型的栈 </span></span><br><span class=\"line\">\t\tintStack.<span class=\"built_in\">push</span>(<span class=\"number\">7</span>); </span><br><span class=\"line\">\t\tcout &lt;&lt; intStack.<span class=\"built_in\">top</span>() &lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 操作 string 类型的栈 </span></span><br><span class=\"line\">\t\tstringStack.<span class=\"built_in\">push</span>(<span class=\"string\">&quot;hello&quot;</span>); </span><br><span class=\"line\">\t\tcout &lt;&lt; stringStack.<span class=\"built_in\">top</span>() &lt;&lt; std::endl; </span><br><span class=\"line\">\t\tstringStack.<span class=\"built_in\">pop</span>(); </span><br><span class=\"line\">\t\tstringStack.<span class=\"built_in\">pop</span>(); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (exception <span class=\"type\">const</span>&amp; ex) &#123; </span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;Exception: &quot;</span> &lt;&lt; ex.<span class=\"built_in\">what</span>() &lt;&lt;endl; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"自定义namespace\"><a href=\"#自定义namespace\" class=\"headerlink\" title=\"自定义namespace\"></a>自定义namespace</h1><p>在单独的文件中自定义的’namespace’是无法在全局命名空间中使用的因为它不在全局命名空间中.若想在 main.c 中使用该’namespace’中定义的内容,就需要一个’myNmaespace.h’的头文件中进行声明,然后在mian.c中引用。</p>\n","excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>c++异常是指在程序运行过程中产生的特殊情况，通常这些特殊情况需要得到特殊处理。</p>\n<h2 id=\"2-C-异常处理涉及到三个关键字：try、catch、throw\"><a href=\"#2-C-异常处理涉及到三个关键字：try、catch、throw\" class=\"headerlink\" title=\"2. C++异常处理涉及到三个关键字：try、catch、throw:\"></a>2. C++异常处理涉及到三个关键字：try、catch、throw:</h2><pre><code>* **throw**: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。\n* **catch**: 在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕获异常。\n* **try**: try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。\n</code></pre>\n<h2 id=\"3-结构\"><a href=\"#3-结构\" class=\"headerlink\" title=\"3. 结构\"></a>3. 结构</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保护代码</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">catch</span>( ExceptionName e1 )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// catch 块</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">catch</span>( ExceptionName e2 )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// catch 块</span></span><br><span class=\"line\">&#125;<span class=\"built_in\">catch</span>( ExceptionName eN )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// catch 块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">division</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( b == <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Division by zero condition!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((<span class=\"type\">double</span>)a / b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">50</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> z = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        z = <span class=\"built_in\">division</span>(x, y);</span><br><span class=\"line\">        cout &lt;&lt; z &lt;&lt; endl;</span><br><span class=\"line\">    &#125;<span class=\"built_in\">catch</span> (<span class=\"type\">const</span> <span class=\"type\">char</span>* msg) &#123;</span><br><span class=\"line\">        cerr &lt;&lt; msg &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>c++标准的异常<exception><br>这些标准异常通过父子类层次结构组织起来，如下图所示：</li>\n</ul>\n\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">异常</th>\n<th align=\"left\">表述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">std::exception</td>\n<td align=\"left\">该异常是所有标准 C++ 异常的父类。</td>\n</tr>\n<tr>\n<td align=\"left\">std::bad_alloc</td>\n<td align=\"left\">该异常可以通过 new 抛出。</td>\n</tr>\n<tr>\n<td align=\"left\">std::bad_cast</td>\n<td align=\"left\">该异常可以通过 dynamic_cast 抛出。</td>\n</tr>\n<tr>\n<td align=\"left\">std::bad_typeid</td>\n<td align=\"left\">该异常可以通过 typeid 抛出。</td>\n</tr>\n<tr>\n<td align=\"left\">std::bad_exception</td>\n<td align=\"left\">这在处理 C++ 程序中无法预期的异常时非常有用。</td>\n</tr>\n<tr>\n<td align=\"left\">std::logic_error</td>\n<td align=\"left\">理论上可以通过读取代码来检测到的异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::domain_error</td>\n<td align=\"left\">当使用了一个无效的数学域时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::invalid_argument</td>\n<td align=\"left\">当使用了无效的参数时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::length_error</td>\n<td align=\"left\">当创建了太长的 std::string 时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::out_of_range</td>\n<td align=\"left\">该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator[]()。</td>\n</tr>\n<tr>\n<td align=\"left\">std::runtime_error</td>\n<td align=\"left\">理论上不可以通过读取代码来检测到的异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::overflow_error</td>\n<td align=\"left\">当发生数学上溢时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::range_error</td>\n<td align=\"left\">当尝试存储超出范围的值时，会抛出该异常。</td>\n</tr>\n<tr>\n<td align=\"left\">std::underflow_error</td>\n<td align=\"left\">当发生数学下溢时，会抛出该异常。</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h1><p>模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。模板可以用来定义函数和类：</p>\n<h2 id=\"1-函数模板\"><a href=\"#1-函数模板\" class=\"headerlink\" title=\"1. 函数模板\"></a>1. 函数模板</h2><p>定义形式：  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> type&gt; ret-type func-<span class=\"built_in\">name</span>(parameter list)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 函数的主体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> T <span class=\"type\">const</span>&amp; <span class=\"title\">Max</span> <span class=\"params\">(T <span class=\"type\">const</span>&amp; a, T <span class=\"type\">const</span>&amp; b)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; b ? b:a; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">39</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> j = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Max(i, j): &quot;</span> &lt;&lt; <span class=\"built_in\">Max</span>(i, j) &lt;&lt; endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">double</span> f1 = <span class=\"number\">13.5</span>; </span><br><span class=\"line\">\t<span class=\"type\">double</span> f2 = <span class=\"number\">20.7</span>; </span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Max(f1, f2): &quot;</span> &lt;&lt; <span class=\"built_in\">Max</span>(f1, f2) &lt;&lt; endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\tstring s1 = <span class=\"string\">&quot;Hello&quot;</span>; </span><br><span class=\"line\">\tstring s2 = <span class=\"string\">&quot;World&quot;</span>; </span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;Max(s1, s2): &quot;</span> &lt;&lt; <span class=\"built_in\">Max</span>(s1, s2) &lt;&lt; endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-类模板\"><a href=\"#2-类模板\" class=\"headerlink\" title=\"2. 类模板\"></a>2. 类模板</h2><p>定义形式：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">type</span>&gt; <span class=\"keyword\">class</span> <span class=\"title class_\">class</span>-name &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdexcept&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span>: </span><br><span class=\"line\">\t\tvector&lt;T&gt; elems;     <span class=\"comment\">// 元素 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>: </span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(T <span class=\"type\">const</span>&amp;)</span></span>;  <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>;               <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">\t\t<span class=\"function\">T <span class=\"title\">top</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;            <span class=\"comment\">// 返回栈顶元素</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>&#123;       <span class=\"comment\">// 如果为空则返回真。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> elems.<span class=\"built_in\">empty</span>(); </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Stack&lt;T&gt;::<span class=\"built_in\">push</span> (T <span class=\"type\">const</span>&amp; elem) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"comment\">// 追加传入元素的副本</span></span><br><span class=\"line\">\telems.<span class=\"built_in\">push_back</span>(elem);    </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\"><span class=\"type\">void</span> Stack&lt;T&gt;::<span class=\"built_in\">pop</span> () </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (elems.<span class=\"built_in\">empty</span>()) &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">out_of_range</span>(<span class=\"string\">&quot;Stack&lt;&gt;::pop(): empty stack&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 删除最后一个元素</span></span><br><span class=\"line\">\telems.<span class=\"built_in\">pop_back</span>();         </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">T Stack&lt;T&gt;::<span class=\"built_in\">top</span> () <span class=\"type\">const</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (elems.<span class=\"built_in\">empty</span>()) &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"built_in\">out_of_range</span>(<span class=\"string\">&quot;Stack&lt;&gt;::top(): empty stack&quot;</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回最后一个元素的副本 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> elems.<span class=\"built_in\">back</span>();      </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">\t\tStack&lt;<span class=\"type\">int</span>&gt;         intStack;  <span class=\"comment\">// int 类型的栈 </span></span><br><span class=\"line\">\t\tStack&lt;string&gt; stringStack;    <span class=\"comment\">// string 类型的栈 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 操作 int 类型的栈 </span></span><br><span class=\"line\">\t\tintStack.<span class=\"built_in\">push</span>(<span class=\"number\">7</span>); </span><br><span class=\"line\">\t\tcout &lt;&lt; intStack.<span class=\"built_in\">top</span>() &lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 操作 string 类型的栈 </span></span><br><span class=\"line\">\t\tstringStack.<span class=\"built_in\">push</span>(<span class=\"string\">&quot;hello&quot;</span>); </span><br><span class=\"line\">\t\tcout &lt;&lt; stringStack.<span class=\"built_in\">top</span>() &lt;&lt; std::endl; </span><br><span class=\"line\">\t\tstringStack.<span class=\"built_in\">pop</span>(); </span><br><span class=\"line\">\t\tstringStack.<span class=\"built_in\">pop</span>(); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"built_in\">catch</span> (exception <span class=\"type\">const</span>&amp; ex) &#123; </span><br><span class=\"line\">\t\tcerr &lt;&lt; <span class=\"string\">&quot;Exception: &quot;</span> &lt;&lt; ex.<span class=\"built_in\">what</span>() &lt;&lt;endl; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"自定义namespace\"><a href=\"#自定义namespace\" class=\"headerlink\" title=\"自定义namespace\"></a>自定义namespace</h1><p>在单独的文件中自定义的’namespace’是无法在全局命名空间中使用的因为它不在全局命名空间中.若想在 main.c 中使用该’namespace’中定义的内容,就需要一个’myNmaespace.h’的头文件中进行声明,然后在mian.c中引用。</p>\n"},{"title":"shell","toc":true,"_content":"# 目录\n[TOC]\n---\n# 变量类型(变量赋值时`=`两边不能有空格)\n\n* 字符串\n```sh\nvar_name='string'\nvar_name=\"string\"\n```\n* 整型 \n```sh\ndeclare -i var_name = value\n```\n* 数组\n```sh\narr_name=(val1 val2 val3)\n```\n* 关联数组\n```sh\ndeclare arr_name\narr_name[\"arr_nam\"]=\"zhangsir\"\narr_name[\"age\"]=18\n```\n* 环境变量\n```sh\nPATH\n```\n* 获取变量数值\n```sh\n$var_name\n```\n---\n# 字符串处理\n## 字符串拼接\n```sh\nstr1=\"hello\"\nstr2=\"world\"\n# 1. 使用双引号拼接\nstr3=\"$str1$str2\"\n# 2. 使用单引号拼接\nstr='$str1$str2'\n```\n## 获取字符串长度\n```sh\nstr='abcde'\necho ${#str}\n```\n## 提取子串\n```sh\nstr='this is a string'\necho ${str:0:6} #表示从第0个字符开始，取长度为6的子串\n```\n---\n# 数组处理\n## 读取数组元素\n```sh\narr=(1 2 3 4 5)\necho ${arr[0]} # 读取数组第1个元素\necho ${arr[@]} # 读取数组所有元素\n```\n## 获取数组长度\n```sh\narr=(1 2 3 4 5)\necho ${#arr[@]}\n```\n---\n* 传参\n```sh\n$0 #执行的文件名\n$# #参数的个数\n$1 #第一个参数\n$2 #第二个参数\n$$ #当前脚本运行的PID\n$? #显示命令的退出状态\n```\n---\n# 算术运行\n* 运算符\n|运算符     |说明   |举例                           |\n|-          |-      |-                              |\n|'+'\t    |加法\t|`expr $a + $b` 结果为 30。     |\n|'-'\t    |减法\t|`expr $a - $b` 结果为 -10。    |\n|'*'\t    |乘法\t|`expr $a \\* $b` 结果为  200。  |\n|'/'        |除法\t|`expr $b / $a` 结果为 2。      |\n|'%'\t    |取余\t|`expr $b % $a` 结果为 0。      |\n|'='\t    |赋值\t|a=$b 把变量 b 的值赋给 a。     |\n|'=='\t    |相等\t|[ $a == $b ] 返回 false。      |\n|'!='\t    |不相等 |[ $a != $b ] 返回 true。       |\n* 运算\n```sh\nvar1=1\nvar2=2\n\nvar3=`expr $var1 / $var2`\n#也可以：\nvar3=$((var1 + var2))\n\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nfi\nif [ $a != $b ]\nthen\n   echo \"a 不等于 b\"\nfi\n```\n---\n# 关系运行\n* 运算符\n-eq\t检测两个数是否相等\t        [ $a -eq $b ] 返回 false。\n-ne\t检测两个数是否不等\t        [ $a -ne $b ] 返回 true。\n-gt\t检测左边是否大于右边\t    [ $a -gt $b ] 返回 false。\n-lt\t检测左边是否小于右边\t    [ $a -lt $b ] 返回 true。\n-ge\t检测左边是否大于等于右边\t[ $a -ge $b ] 返回 false。\n-le\t检测左边是否小于等于右边\t[ $a -le $b ] 返回 true。\n* 运算\n```sh\na=1\nb=2\n\nif [ $a -eq $b ]\nthen\n\techo \"a=b\"\nelif [ $a -ne $b ]\nthen\n\techo \"a!=b\"\nfi\n```\n---\n# 布尔运算\n* 运算符\n!\t非运算\t[ ! false ] 返回 true。\n-o\t或运算\t[ $a -lt 20 -o $b -gt 100 ] 返回 true。\n-a\t与运算\t[ $a -lt 20 -a $b -gt 100 ] 返回 false。\n* 运算\n```sh\na=1\nb=2\nif [ $a -ne $b -a $a -lt 1 ]\nthen\n    echo \"something\"\nfi\n```\n---\n# 逻辑运算\n* 运算符\n&&\t逻辑的 AND\t[[ $a -lt 100 && $b -gt 100 ]] 返回 false\n||\t逻辑的 OR\t[[ $a -lt 100 || $b -gt 100 ]] 返回 true\n* 运算\n```sh\na=10\nb=20\n\nif [[ $a -lt 100 && $b -gt 100 ]]\nthen\n   echo \"返回 true\"\nelse\n   echo \"返回 false\"\nfi\n```\n---\n# 字符串运算\n* 运算法\n=\t检测两个字符串是否相等，相等返回 true。\t[ $a = $b ] 返回 false。\n!=\t检测两个字符串是否不相等，不相等返回 true。\t[ $a != $b ] 返回 true。\n-z\t检测字符串长度是否为0，为0返回 true。\t[ -z $a ] 返回 false。\n-n\t检测字符串长度是否不为 0，不为 0 返回 true。\t[ -n \"$a\" ] 返回 true。\n$\t检测字符串是否不为空，不为空返回 true。\t[ $a ] 返回 true。\n* 运算\n```sh\na=\"abc\"\nb=\"efg\"\n\nif [ $a = $b ]\nthen\n   echo \"$a = $b : a 等于 b\"\nelse\n   echo \"$a = $b: a 不等于 b\"\nfi\n```\n---\n# 函数\n```sh\nmyfun ()\n{\n\techo '输入 1 到 4 之间的数字:'\n\techo '你输入的数字为:'\n\tread aNum\n\tcase $aNum in\n\t\t1)  echo '你选择了 1'\n\t\t\t;;\n\t\t2)  echo '你选择了 2'\n\t\t\t;;\n\t\t3)  echo '你选择了 3'\n\t\t\t;;\n\t\t4)  echo '你选择了 4'\n\t\t\t;;\n\t\t*)  echo '你没有输入 1 到 4 之间的数字'\n\t\t\t;;\n\tesac\n}\n\nmyfun\n```\n---\n# 流程控制\n* if lese\n```sh\na=10\nb=20\n\nif (( $a == $b )); then\n\techo \"a=b\"\nelif (( $a > $b )); then\n\techo \"a>b\"\nelse\n\techo \"a<b\"\nfi\n\n```\n* for 循环\n```sh\narr=(1 2 3 4 5)\nfor var in ${arr[*]}\ndo\n\techo $var\ndone\n#-----------------------------------\nfor (( var=1 ; var < 10 ; var+=1))\ndo\n\techo \"var=$var\"\n\tsleep 1\ndone\n\n```\n* while 循环\n```sh\nwhile :\ndo\n\techo \"hello world\"\n\tsleep 1\ndone\n```\n* case ... esac\n```sh\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n\t1)  echo '你选择了 1'\n\t\t;;\n\t2)  echo '你选择了 2'\n\t\t;;\n\t3)  echo '你选择了 3'\n\t\t;;\n\t4)  echo '你选择了 4'\n\t\t;;\n\t*)  echo '你没有输入 1 到 4 之间的数字'\n\t\t;;\nesac\n```\n* 跳出循环\n```sh\n# 1.\nbreak\n#2 \ncontinue\n```\n---\n# 文件包含  \n**注**:被包含文件不具备执行权限**\n```sh\n# 1. \n. file_path\n# 2.\nsource file_path\n```\n","source":"_posts/study-notes/language/shell/shell.md","raw":"---\ntitle: shell\ntoc: true\n---\n# 目录\n[TOC]\n---\n# 变量类型(变量赋值时`=`两边不能有空格)\n\n* 字符串\n```sh\nvar_name='string'\nvar_name=\"string\"\n```\n* 整型 \n```sh\ndeclare -i var_name = value\n```\n* 数组\n```sh\narr_name=(val1 val2 val3)\n```\n* 关联数组\n```sh\ndeclare arr_name\narr_name[\"arr_nam\"]=\"zhangsir\"\narr_name[\"age\"]=18\n```\n* 环境变量\n```sh\nPATH\n```\n* 获取变量数值\n```sh\n$var_name\n```\n---\n# 字符串处理\n## 字符串拼接\n```sh\nstr1=\"hello\"\nstr2=\"world\"\n# 1. 使用双引号拼接\nstr3=\"$str1$str2\"\n# 2. 使用单引号拼接\nstr='$str1$str2'\n```\n## 获取字符串长度\n```sh\nstr='abcde'\necho ${#str}\n```\n## 提取子串\n```sh\nstr='this is a string'\necho ${str:0:6} #表示从第0个字符开始，取长度为6的子串\n```\n---\n# 数组处理\n## 读取数组元素\n```sh\narr=(1 2 3 4 5)\necho ${arr[0]} # 读取数组第1个元素\necho ${arr[@]} # 读取数组所有元素\n```\n## 获取数组长度\n```sh\narr=(1 2 3 4 5)\necho ${#arr[@]}\n```\n---\n* 传参\n```sh\n$0 #执行的文件名\n$# #参数的个数\n$1 #第一个参数\n$2 #第二个参数\n$$ #当前脚本运行的PID\n$? #显示命令的退出状态\n```\n---\n# 算术运行\n* 运算符\n|运算符     |说明   |举例                           |\n|-          |-      |-                              |\n|'+'\t    |加法\t|`expr $a + $b` 结果为 30。     |\n|'-'\t    |减法\t|`expr $a - $b` 结果为 -10。    |\n|'*'\t    |乘法\t|`expr $a \\* $b` 结果为  200。  |\n|'/'        |除法\t|`expr $b / $a` 结果为 2。      |\n|'%'\t    |取余\t|`expr $b % $a` 结果为 0。      |\n|'='\t    |赋值\t|a=$b 把变量 b 的值赋给 a。     |\n|'=='\t    |相等\t|[ $a == $b ] 返回 false。      |\n|'!='\t    |不相等 |[ $a != $b ] 返回 true。       |\n* 运算\n```sh\nvar1=1\nvar2=2\n\nvar3=`expr $var1 / $var2`\n#也可以：\nvar3=$((var1 + var2))\n\nif [ $a == $b ]\nthen\n   echo \"a 等于 b\"\nfi\nif [ $a != $b ]\nthen\n   echo \"a 不等于 b\"\nfi\n```\n---\n# 关系运行\n* 运算符\n-eq\t检测两个数是否相等\t        [ $a -eq $b ] 返回 false。\n-ne\t检测两个数是否不等\t        [ $a -ne $b ] 返回 true。\n-gt\t检测左边是否大于右边\t    [ $a -gt $b ] 返回 false。\n-lt\t检测左边是否小于右边\t    [ $a -lt $b ] 返回 true。\n-ge\t检测左边是否大于等于右边\t[ $a -ge $b ] 返回 false。\n-le\t检测左边是否小于等于右边\t[ $a -le $b ] 返回 true。\n* 运算\n```sh\na=1\nb=2\n\nif [ $a -eq $b ]\nthen\n\techo \"a=b\"\nelif [ $a -ne $b ]\nthen\n\techo \"a!=b\"\nfi\n```\n---\n# 布尔运算\n* 运算符\n!\t非运算\t[ ! false ] 返回 true。\n-o\t或运算\t[ $a -lt 20 -o $b -gt 100 ] 返回 true。\n-a\t与运算\t[ $a -lt 20 -a $b -gt 100 ] 返回 false。\n* 运算\n```sh\na=1\nb=2\nif [ $a -ne $b -a $a -lt 1 ]\nthen\n    echo \"something\"\nfi\n```\n---\n# 逻辑运算\n* 运算符\n&&\t逻辑的 AND\t[[ $a -lt 100 && $b -gt 100 ]] 返回 false\n||\t逻辑的 OR\t[[ $a -lt 100 || $b -gt 100 ]] 返回 true\n* 运算\n```sh\na=10\nb=20\n\nif [[ $a -lt 100 && $b -gt 100 ]]\nthen\n   echo \"返回 true\"\nelse\n   echo \"返回 false\"\nfi\n```\n---\n# 字符串运算\n* 运算法\n=\t检测两个字符串是否相等，相等返回 true。\t[ $a = $b ] 返回 false。\n!=\t检测两个字符串是否不相等，不相等返回 true。\t[ $a != $b ] 返回 true。\n-z\t检测字符串长度是否为0，为0返回 true。\t[ -z $a ] 返回 false。\n-n\t检测字符串长度是否不为 0，不为 0 返回 true。\t[ -n \"$a\" ] 返回 true。\n$\t检测字符串是否不为空，不为空返回 true。\t[ $a ] 返回 true。\n* 运算\n```sh\na=\"abc\"\nb=\"efg\"\n\nif [ $a = $b ]\nthen\n   echo \"$a = $b : a 等于 b\"\nelse\n   echo \"$a = $b: a 不等于 b\"\nfi\n```\n---\n# 函数\n```sh\nmyfun ()\n{\n\techo '输入 1 到 4 之间的数字:'\n\techo '你输入的数字为:'\n\tread aNum\n\tcase $aNum in\n\t\t1)  echo '你选择了 1'\n\t\t\t;;\n\t\t2)  echo '你选择了 2'\n\t\t\t;;\n\t\t3)  echo '你选择了 3'\n\t\t\t;;\n\t\t4)  echo '你选择了 4'\n\t\t\t;;\n\t\t*)  echo '你没有输入 1 到 4 之间的数字'\n\t\t\t;;\n\tesac\n}\n\nmyfun\n```\n---\n# 流程控制\n* if lese\n```sh\na=10\nb=20\n\nif (( $a == $b )); then\n\techo \"a=b\"\nelif (( $a > $b )); then\n\techo \"a>b\"\nelse\n\techo \"a<b\"\nfi\n\n```\n* for 循环\n```sh\narr=(1 2 3 4 5)\nfor var in ${arr[*]}\ndo\n\techo $var\ndone\n#-----------------------------------\nfor (( var=1 ; var < 10 ; var+=1))\ndo\n\techo \"var=$var\"\n\tsleep 1\ndone\n\n```\n* while 循环\n```sh\nwhile :\ndo\n\techo \"hello world\"\n\tsleep 1\ndone\n```\n* case ... esac\n```sh\necho '输入 1 到 4 之间的数字:'\necho '你输入的数字为:'\nread aNum\ncase $aNum in\n\t1)  echo '你选择了 1'\n\t\t;;\n\t2)  echo '你选择了 2'\n\t\t;;\n\t3)  echo '你选择了 3'\n\t\t;;\n\t4)  echo '你选择了 4'\n\t\t;;\n\t*)  echo '你没有输入 1 到 4 之间的数字'\n\t\t;;\nesac\n```\n* 跳出循环\n```sh\n# 1.\nbreak\n#2 \ncontinue\n```\n---\n# 文件包含  \n**注**:被包含文件不具备执行权限**\n```sh\n# 1. \n. file_path\n# 2.\nsource file_path\n```\n","slug":"study-notes/language/shell/shell","published":1,"date":"2025-02-02T09:13:27.517Z","updated":"2025-02-02T09:13:27.517Z","_id":"cm6nen6il000ce3jxhoth4c4k","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><h2 id=\"TOC\"><a href=\"#TOC\" class=\"headerlink\" title=\"[TOC]\"></a>[TOC]</h2><h1 id=\"变量类型-变量赋值时-两边不能有空格\"><a href=\"#变量类型-变量赋值时-两边不能有空格\" class=\"headerlink\" title=\"变量类型(变量赋值时=两边不能有空格)\"></a>变量类型(变量赋值时<code>=</code>两边不能有空格)</h1><ul>\n<li>字符串</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_name=<span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;string&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>整型</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">declare</span> -i var_name = value</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr_name=(val1 val2 val3)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>关联数组</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">declare</span> arr_name</span><br><span class=\"line\">arr_name[<span class=\"string\">&quot;arr_nam&quot;</span>]=<span class=\"string\">&quot;zhangsir&quot;</span></span><br><span class=\"line\">arr_name[<span class=\"string\">&quot;age&quot;</span>]=18</span><br></pre></td></tr></table></figure>\n<ul>\n<li>环境变量</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获取变量数值</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$var_name</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h1><h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1=<span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">str2=<span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 使用双引号拼接</span></span><br><span class=\"line\">str3=<span class=\"string\">&quot;$str1<span class=\"variable\">$str2</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 使用单引号拼接</span></span><br><span class=\"line\">str=<span class=\"string\">&#x27;$str1$str2&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"获取字符串长度\"><a href=\"#获取字符串长度\" class=\"headerlink\" title=\"获取字符串长度\"></a>获取字符串长度</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=<span class=\"string\">&#x27;abcde&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#str&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"提取子串\"><a href=\"#提取子串\" class=\"headerlink\" title=\"提取子串\"></a>提取子串</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=<span class=\"string\">&#x27;this is a string&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;str:0:6&#125;</span> <span class=\"comment\">#表示从第0个字符开始，取长度为6的子串</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"数组处理\"><a href=\"#数组处理\" class=\"headerlink\" title=\"数组处理\"></a>数组处理</h1><h2 id=\"读取数组元素\"><a href=\"#读取数组元素\" class=\"headerlink\" title=\"读取数组元素\"></a>读取数组元素</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2 3 4 5)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;arr[0]&#125;</span> <span class=\"comment\"># 读取数组第1个元素</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;arr[@]&#125;</span> <span class=\"comment\"># 读取数组所有元素</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"获取数组长度\"><a href=\"#获取数组长度\" class=\"headerlink\" title=\"获取数组长度\"></a>获取数组长度</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2 3 4 5)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#arr[@]&#125;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>传参</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$0</span> <span class=\"comment\">#执行的文件名</span></span><br><span class=\"line\"><span class=\"variable\">$#</span> <span class=\"comment\">#参数的个数</span></span><br><span class=\"line\"><span class=\"variable\">$1</span> <span class=\"comment\">#第一个参数</span></span><br><span class=\"line\"><span class=\"variable\">$2</span> <span class=\"comment\">#第二个参数</span></span><br><span class=\"line\">$$ <span class=\"comment\">#当前脚本运行的PID</span></span><br><span class=\"line\">$? <span class=\"comment\">#显示命令的退出状态</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"算术运行\"><a href=\"#算术运行\" class=\"headerlink\" title=\"算术运行\"></a>算术运行</h1><ul>\n<li>运算符<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n</table>\n</li>\n</ul>\n<p>|’+’\t    |加法\t|<code>expr $a + $b</code> 结果为 30。     |<br>|’-‘\t    |减法\t|<code>expr $a - $b</code> 结果为 -10。    |<br>|’*’\t    |乘法\t|<code>expr $a \\* $b</code> 结果为  200。  |<br>|’&#x2F;‘        |除法\t|<code>expr $b / $a</code> 结果为 2。      |<br>|’%’\t    |取余\t|<code>expr $b % $a</code> 结果为 0。      |<br>|’&#x3D;’\t    |赋值\t|a&#x3D;$b 把变量 b 的值赋给 a。     |<br>|’&#x3D;&#x3D;’\t    |相等\t|[ $a &#x3D;&#x3D; $b ] 返回 false。      |<br>|’!&#x3D;’\t    |不相等 |[ $a !&#x3D; $b ] 返回 true。       |</p>\n<ul>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var1=1</span><br><span class=\"line\">var2=2</span><br><span class=\"line\"></span><br><span class=\"line\">var3=`<span class=\"built_in\">expr</span> <span class=\"variable\">$var1</span> / <span class=\"variable\">$var2</span>`</span><br><span class=\"line\"><span class=\"comment\">#也可以：</span></span><br><span class=\"line\">var3=$((var1 + var2))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 不等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"关系运行\"><a href=\"#关系运行\" class=\"headerlink\" title=\"关系运行\"></a>关系运行</h1><ul>\n<li>运算符<br>-eq\t检测两个数是否相等\t        [ $a -eq $b ] 返回 false。<br>-ne\t检测两个数是否不等\t        [ $a -ne $b ] 返回 true。<br>-gt\t检测左边是否大于右边\t    [ $a -gt $b ] 返回 false。<br>-lt\t检测左边是否小于右边\t    [ $a -lt $b ] 返回 true。<br>-ge\t检测左边是否大于等于右边\t[ $a -ge $b ] 返回 false。<br>-le\t检测左边是否小于等于右边\t[ $a -le $b ] 返回 true。</li>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=1</span><br><span class=\"line\">b=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a=b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a!=b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"布尔运算\"><a href=\"#布尔运算\" class=\"headerlink\" title=\"布尔运算\"></a>布尔运算</h1><ul>\n<li>运算符<br>!\t非运算\t[ ! false ] 返回 true。<br>-o\t或运算\t[ $a -lt 20 -o $b -gt 100 ] 返回 true。</li>\n</ul>\n<p>-a\t与运算\t[ $a -lt 20 -a $b -gt 100 ] 返回 false。</p>\n<ul>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=1</span><br><span class=\"line\">b=2</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> -a <span class=\"variable\">$a</span> -lt 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;something&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h1><ul>\n<li>运算符<br>&amp;&amp;\t逻辑的 AND\t[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</li>\n</ul>\n<p>||\t逻辑的 OR\t[[ $a -lt 100 || $b -gt 100 ]] 返回 true</p>\n<ul>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> -lt 100 &amp;&amp; <span class=\"variable\">$b</span> -gt 100 ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;返回 true&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;返回 false&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"字符串运算\"><a href=\"#字符串运算\" class=\"headerlink\" title=\"字符串运算\"></a>字符串运算</h1><ul>\n<li>运算法<br>&#x3D;\t检测两个字符串是否相等，相等返回 true。\t[ $a &#x3D; $b ] 返回 false。<br>!&#x3D;\t检测两个字符串是否不相等，不相等返回 true。\t[ $a !&#x3D; $b ] 返回 true。</li>\n</ul>\n<p>-z\t检测字符串长度是否为0，为0返回 true。\t[ -z $a ] 返回 false。<br>-n\t检测字符串长度是否不为 0，不为 0 返回 true。\t[ -n “$a” ] 返回 true。<br>$\t检测字符串是否不为空，不为空返回 true。\t[ $a ] 返回 true。</p>\n<ul>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">b=<span class=\"string\">&quot;efg&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> : a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> = <span class=\"variable\">$b</span>: a 不等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">myfun</span></span> ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;输入 1 到 4 之间的数字:&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你输入的数字为:&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">read</span> aNum</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t1)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 1&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t2)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 2&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t3)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 3&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t4)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 4&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t<span class=\"keyword\">esac</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myfun</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><ul>\n<li>if lese</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (( <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> )); <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a=b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (( <span class=\"variable\">$a</span> &gt; <span class=\"variable\">$b</span> )); <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a&gt;b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a&lt;b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>for 循环</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2 3 4 5)</span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;arr[*]&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$var</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( var=<span class=\"number\">1</span> ; var &lt; <span class=\"number\">10</span> ; var+=<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;var=<span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>while 循环</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>case … esac</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;输入 1 到 4 之间的数字:&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你输入的数字为:&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> aNum</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t1)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 1&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t2)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 2&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t3)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 3&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t4)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 4&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t*)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>跳出循环</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\"><span class=\"built_in\">break</span></span><br><span class=\"line\"><span class=\"comment\">#2 </span></span><br><span class=\"line\"><span class=\"built_in\">continue</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h1><p><strong>注</strong>:被包含文件不具备执行权限**</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. </span></span><br><span class=\"line\">. file_path</span><br><span class=\"line\"><span class=\"comment\"># 2.</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> file_path</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><h2 id=\"TOC\"><a href=\"#TOC\" class=\"headerlink\" title=\"[TOC]\"></a>[TOC]</h2><h1 id=\"变量类型-变量赋值时-两边不能有空格\"><a href=\"#变量类型-变量赋值时-两边不能有空格\" class=\"headerlink\" title=\"变量类型(变量赋值时=两边不能有空格)\"></a>变量类型(变量赋值时<code>=</code>两边不能有空格)</h1><ul>\n<li>字符串</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_name=<span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">var_name=<span class=\"string\">&quot;string&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>整型</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">declare</span> -i var_name = value</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr_name=(val1 val2 val3)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>关联数组</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">declare</span> arr_name</span><br><span class=\"line\">arr_name[<span class=\"string\">&quot;arr_nam&quot;</span>]=<span class=\"string\">&quot;zhangsir&quot;</span></span><br><span class=\"line\">arr_name[<span class=\"string\">&quot;age&quot;</span>]=18</span><br></pre></td></tr></table></figure>\n<ul>\n<li>环境变量</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获取变量数值</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$var_name</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h1><h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1=<span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">str2=<span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 使用双引号拼接</span></span><br><span class=\"line\">str3=<span class=\"string\">&quot;$str1<span class=\"variable\">$str2</span>&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 使用单引号拼接</span></span><br><span class=\"line\">str=<span class=\"string\">&#x27;$str1$str2&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"获取字符串长度\"><a href=\"#获取字符串长度\" class=\"headerlink\" title=\"获取字符串长度\"></a>获取字符串长度</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=<span class=\"string\">&#x27;abcde&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#str&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"提取子串\"><a href=\"#提取子串\" class=\"headerlink\" title=\"提取子串\"></a>提取子串</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str=<span class=\"string\">&#x27;this is a string&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;str:0:6&#125;</span> <span class=\"comment\">#表示从第0个字符开始，取长度为6的子串</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"数组处理\"><a href=\"#数组处理\" class=\"headerlink\" title=\"数组处理\"></a>数组处理</h1><h2 id=\"读取数组元素\"><a href=\"#读取数组元素\" class=\"headerlink\" title=\"读取数组元素\"></a>读取数组元素</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2 3 4 5)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;arr[0]&#125;</span> <span class=\"comment\"># 读取数组第1个元素</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;arr[@]&#125;</span> <span class=\"comment\"># 读取数组所有元素</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"获取数组长度\"><a href=\"#获取数组长度\" class=\"headerlink\" title=\"获取数组长度\"></a>获取数组长度</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2 3 4 5)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#arr[@]&#125;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>传参</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$0</span> <span class=\"comment\">#执行的文件名</span></span><br><span class=\"line\"><span class=\"variable\">$#</span> <span class=\"comment\">#参数的个数</span></span><br><span class=\"line\"><span class=\"variable\">$1</span> <span class=\"comment\">#第一个参数</span></span><br><span class=\"line\"><span class=\"variable\">$2</span> <span class=\"comment\">#第二个参数</span></span><br><span class=\"line\">$$ <span class=\"comment\">#当前脚本运行的PID</span></span><br><span class=\"line\">$? <span class=\"comment\">#显示命令的退出状态</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"算术运行\"><a href=\"#算术运行\" class=\"headerlink\" title=\"算术运行\"></a>算术运行</h1><ul>\n<li>运算符<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n</table>\n</li>\n</ul>\n<p>|’+’\t    |加法\t|<code>expr $a + $b</code> 结果为 30。     |<br>|’-‘\t    |减法\t|<code>expr $a - $b</code> 结果为 -10。    |<br>|’*’\t    |乘法\t|<code>expr $a \\* $b</code> 结果为  200。  |<br>|’&#x2F;‘        |除法\t|<code>expr $b / $a</code> 结果为 2。      |<br>|’%’\t    |取余\t|<code>expr $b % $a</code> 结果为 0。      |<br>|’&#x3D;’\t    |赋值\t|a&#x3D;$b 把变量 b 的值赋给 a。     |<br>|’&#x3D;&#x3D;’\t    |相等\t|[ $a &#x3D;&#x3D; $b ] 返回 false。      |<br>|’!&#x3D;’\t    |不相等 |[ $a !&#x3D; $b ] 返回 true。       |</p>\n<ul>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var1=1</span><br><span class=\"line\">var2=2</span><br><span class=\"line\"></span><br><span class=\"line\">var3=`<span class=\"built_in\">expr</span> <span class=\"variable\">$var1</span> / <span class=\"variable\">$var2</span>`</span><br><span class=\"line\"><span class=\"comment\">#也可以：</span></span><br><span class=\"line\">var3=$((var1 + var2))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;a 不等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"关系运行\"><a href=\"#关系运行\" class=\"headerlink\" title=\"关系运行\"></a>关系运行</h1><ul>\n<li>运算符<br>-eq\t检测两个数是否相等\t        [ $a -eq $b ] 返回 false。<br>-ne\t检测两个数是否不等\t        [ $a -ne $b ] 返回 true。<br>-gt\t检测左边是否大于右边\t    [ $a -gt $b ] 返回 false。<br>-lt\t检测左边是否小于右边\t    [ $a -lt $b ] 返回 true。<br>-ge\t检测左边是否大于等于右边\t[ $a -ge $b ] 返回 false。<br>-le\t检测左边是否小于等于右边\t[ $a -le $b ] 返回 true。</li>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=1</span><br><span class=\"line\">b=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a=b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a!=b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"布尔运算\"><a href=\"#布尔运算\" class=\"headerlink\" title=\"布尔运算\"></a>布尔运算</h1><ul>\n<li>运算符<br>!\t非运算\t[ ! false ] 返回 true。<br>-o\t或运算\t[ $a -lt 20 -o $b -gt 100 ] 返回 true。</li>\n</ul>\n<p>-a\t与运算\t[ $a -lt 20 -a $b -gt 100 ] 返回 false。</p>\n<ul>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=1</span><br><span class=\"line\">b=2</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -ne <span class=\"variable\">$b</span> -a <span class=\"variable\">$a</span> -lt 1 ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;something&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h1><ul>\n<li>运算符<br>&amp;&amp;\t逻辑的 AND\t[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</li>\n</ul>\n<p>||\t逻辑的 OR\t[[ $a -lt 100 || $b -gt 100 ]] 返回 true</p>\n<ul>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> -lt 100 &amp;&amp; <span class=\"variable\">$b</span> -gt 100 ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;返回 true&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;返回 false&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"字符串运算\"><a href=\"#字符串运算\" class=\"headerlink\" title=\"字符串运算\"></a>字符串运算</h1><ul>\n<li>运算法<br>&#x3D;\t检测两个字符串是否相等，相等返回 true。\t[ $a &#x3D; $b ] 返回 false。<br>!&#x3D;\t检测两个字符串是否不相等，不相等返回 true。\t[ $a !&#x3D; $b ] 返回 true。</li>\n</ul>\n<p>-z\t检测字符串长度是否为0，为0返回 true。\t[ -z $a ] 返回 false。<br>-n\t检测字符串长度是否不为 0，不为 0 返回 true。\t[ -n “$a” ] 返回 true。<br>$\t检测字符串是否不为空，不为空返回 true。\t[ $a ] 返回 true。</p>\n<ul>\n<li>运算</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">b=<span class=\"string\">&quot;efg&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> : a 等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$a</span> = <span class=\"variable\">$b</span>: a 不等于 b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">myfun</span></span> ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;输入 1 到 4 之间的数字:&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你输入的数字为:&#x27;</span></span><br><span class=\"line\">\t<span class=\"built_in\">read</span> aNum</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\t1)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 1&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t2)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 2&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t3)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 3&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t4)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 4&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t<span class=\"keyword\">esac</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myfun</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h1><ul>\n<li>if lese</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (( <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> )); <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a=b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (( <span class=\"variable\">$a</span> &gt; <span class=\"variable\">$b</span> )); <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a&gt;b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;a&lt;b&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>for 循环</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr=(1 2 3 4 5)</span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;arr[*]&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$var</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( var=<span class=\"number\">1</span> ; var &lt; <span class=\"number\">10</span> ; var+=<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;var=<span class=\"variable\">$var</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>while 循环</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">\t<span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>case … esac</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;输入 1 到 4 之间的数字:&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你输入的数字为:&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> aNum</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t1)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 1&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t2)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 2&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t3)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 3&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t4)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你选择了 4&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\">\t*)  <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;你没有输入 1 到 4 之间的数字&#x27;</span></span><br><span class=\"line\">\t\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>跳出循环</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.</span></span><br><span class=\"line\"><span class=\"built_in\">break</span></span><br><span class=\"line\"><span class=\"comment\">#2 </span></span><br><span class=\"line\"><span class=\"built_in\">continue</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h1><p><strong>注</strong>:被包含文件不具备执行权限**</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. </span></span><br><span class=\"line\">. file_path</span><br><span class=\"line\"><span class=\"comment\"># 2.</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> file_path</span><br></pre></td></tr></table></figure>\n"},{"title":"qemu 基础","toc":true,"_content":"# 索引\n## qemu的使用方式\n* [系统模拟](./system-emulation.md):可以提供整个机器（cpu、内存、模拟设备）的虚拟环境来运行客户操作系统\n* 用户模式模拟：可以在一个cpu上启动另一个cpu上编译的进程。\n* 命令行实用程序：如qemu-img允许创建、转换和修改磁盘映像的磁盘映像实用程序\n","source":"_posts/study-notes/virtual/qemu/qemu.md","raw":"---\ntitle: qemu 基础\ntoc: true\n---\n# 索引\n## qemu的使用方式\n* [系统模拟](./system-emulation.md):可以提供整个机器（cpu、内存、模拟设备）的虚拟环境来运行客户操作系统\n* 用户模式模拟：可以在一个cpu上启动另一个cpu上编译的进程。\n* 命令行实用程序：如qemu-img允许创建、转换和修改磁盘映像的磁盘映像实用程序\n","slug":"study-notes/virtual/qemu/qemu","published":1,"date":"2025-02-02T09:13:27.518Z","updated":"2025-02-02T09:13:27.518Z","_id":"cm6nen6in000de3jx1o1t7wj4","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><h2 id=\"qemu的使用方式\"><a href=\"#qemu的使用方式\" class=\"headerlink\" title=\"qemu的使用方式\"></a>qemu的使用方式</h2><ul>\n<li><a href=\"./system-emulation.md\">系统模拟</a>:可以提供整个机器（cpu、内存、模拟设备）的虚拟环境来运行客户操作系统</li>\n<li>用户模式模拟：可以在一个cpu上启动另一个cpu上编译的进程。</li>\n<li>命令行实用程序：如qemu-img允许创建、转换和修改磁盘映像的磁盘映像实用程序</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><h2 id=\"qemu的使用方式\"><a href=\"#qemu的使用方式\" class=\"headerlink\" title=\"qemu的使用方式\"></a>qemu的使用方式</h2><ul>\n<li><a href=\"./system-emulation.md\">系统模拟</a>:可以提供整个机器（cpu、内存、模拟设备）的虚拟环境来运行客户操作系统</li>\n<li>用户模式模拟：可以在一个cpu上启动另一个cpu上编译的进程。</li>\n<li>命令行实用程序：如qemu-img允许创建、转换和修改磁盘映像的磁盘映像实用程序</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/blog/c-function-arg/compiling.png","slug":"compiling.png","post":"cm64sykf70001vvjxfc2rg5zq","modified":0,"renderable":0},{"_id":"source/_posts/blog/chrome-for-android/apk-downloader-ui.png","slug":"apk-downloader-ui.png","post":"cm64sykf70002vvjx34jq7oiv","modified":0,"renderable":0},{"_id":"source/_posts/blog/chrome-for-android/click-chrome.png","slug":"click-chrome.png","post":"cm64sykf70002vvjx34jq7oiv","modified":0,"renderable":0},{"_id":"source/_posts/blog/chrome-for-android/download-chrome.png","slug":"download-chrome.png","post":"cm64sykf70002vvjx34jq7oiv","modified":0,"renderable":0},{"_id":"source/_posts/blog/chrome-for-android/get-chrome-url.png","slug":"get-chrome-url.png","post":"cm64sykf70002vvjx34jq7oiv","modified":0,"renderable":0},{"_id":"source/_posts/blog/chrome-for-android/google-play-url.png","slug":"google-play-url.png","post":"cm64sykf70002vvjx34jq7oiv","modified":0,"renderable":0},{"_id":"source/_posts/blog/chrome-for-android/search-chrome.png","slug":"search-chrome.png","post":"cm64sykf70002vvjx34jq7oiv","modified":0,"renderable":0},{"_id":"source/_posts/blog/chrome-for-android/share-url.png","slug":"share-url.png","post":"cm64sykf70002vvjx34jq7oiv","modified":0,"renderable":0},{"_id":"source/_posts/blog/cloud-server/abeiyum.png","slug":"abeiyum.png","post":"cm64sykf80003vvjxgvh36lit","modified":0,"renderable":0},{"_id":"source/_posts/blog/cloud-server/abeiyun-free_version-performance.png","slug":"abeiyun-free_version-performance.png","post":"cm64sykf80003vvjxgvh36lit","modified":0,"renderable":0},{"_id":"source/_posts/blog/create-google-account/base-info.png","slug":"base-info.png","post":"cm64sykf90004vvjx6am3fghw","modified":0,"renderable":0},{"_id":"source/_posts/blog/create-google-account/create-a-google-account.png","slug":"create-a-google-account.png","post":"cm64sykf90004vvjx6am3fghw","modified":0,"renderable":0},{"_id":"source/_posts/blog/create-google-account/gen-email.png","slug":"gen-email.png","post":"cm64sykf90004vvjx6am3fghw","modified":0,"renderable":0},{"_id":"source/_posts/blog/create-google-account/recovery-email.png","slug":"recovery-email.png","post":"cm64sykf90004vvjx6am3fghw","modified":0,"renderable":0},{"_id":"source/_posts/blog/create-google-account/user-password.png","slug":"user-password.png","post":"cm64sykf90004vvjx6am3fghw","modified":0,"renderable":0},{"_id":"source/_posts/blog/create-google-account/usrname.png","slug":"usrname.png","post":"cm64sykf90004vvjx6am3fghw","modified":0,"renderable":0},{"_id":"source/_posts/blog/termux-for-android/install-termux.png","slug":"install-termux.png","post":"cm64sykf90005vvjx80lscp26","modified":0,"renderable":0},{"_id":"source/_posts/blog/termux-for-android/install-ubuntu.png","slug":"install-ubuntu.png","post":"cm64sykf90005vvjx80lscp26","modified":0,"renderable":0},{"_id":"source/_posts/blog/termux-for-android/login-ubuntu.png","slug":"login-ubuntu.png","post":"cm64sykf90005vvjx80lscp26","modified":0,"renderable":0},{"_id":"source/_posts/blog/termux-for-android/open-termux.png","slug":"open-termux.png","post":"cm64sykf90005vvjx80lscp26","modified":0,"renderable":0},{"_id":"source/_posts/blog/termux-for-android/open-web-termux.png","slug":"open-web-termux.png","post":"cm64sykf90005vvjx80lscp26","modified":0,"renderable":0},{"_id":"source/_posts/blog/termux-for-android/remote-login.png","slug":"remote-login.png","post":"cm64sykf90005vvjx80lscp26","modified":0,"renderable":0},{"_id":"source/_posts/blog/termux-for-android/termux.png","slug":"termux.png","post":"cm64sykf90005vvjx80lscp26","modified":0,"renderable":0},{"_id":"source/_posts/tools/flameshot/ubunt-add-shotkey.png","slug":"ubunt-add-shotkey.png","post":"cm6ndmahm000080jx65xt1h2s","modified":0,"renderable":0},{"_id":"source/_posts/tools/flameshot/ubuntu-shotkey.png","slug":"ubuntu-shotkey.png","post":"cm6ndmahm000080jx65xt1h2s","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/Cortex-M0处理器简单框图.png","slug":"Cortex-M0处理器简单框图.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/Cortex-M0的寄存器.png","slug":"Cortex-M0的寄存器.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/MSP和PC初始化示例.png","slug":"MSP和PC初始化示例.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/处理器复位后的工作步骤.png","slug":"处理器复位后的工作步骤.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/复位流程.png","slug":"复位流程.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/存储器映射.png","slug":"存储器映射.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/存储映射.png","slug":"存储映射.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/异常处理类型.png","slug":"异常处理类型.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0},{"_id":"source/_posts/study-notes/architecture/arm/cortex-M0/程序映像中的向量表.png","slug":"程序映像中的向量表.png","post":"cm6nen6ie0005e3jx90x6csr4","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm61wyhxa0000kdjxagpz1rik","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64tckd20000jbjxel5bahiy"},{"post_id":"cm64sykf50000vvjx4jspazdy","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64tckd30001jbjx3dyzbpfu"},{"post_id":"cm61wyhxe0001kdjx0tbn2gfm","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64tckd30002jbjx9zflf6l0"},{"post_id":"cm61wyhxg0002kdjxdz6jgi7k","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64tckd40003jbjx81yv8aaf"},{"post_id":"cm64sykf70001vvjxfc2rg5zq","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64tckda0004jbjxaaq38a7e"},{"post_id":"cm64sykf70002vvjx34jq7oiv","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64tckdb0005jbjxgi6g8t0p"},{"post_id":"cm64sykf80003vvjxgvh36lit","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64tckdb0006jbjx8dprft96"},{"post_id":"cm64sykf90004vvjx6am3fghw","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64tckdc0007jbjx1rkla6fa"},{"post_id":"cm64v9a0i0000mqjxbjja5jyd","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64v9a230001mqjxdgwugbua"},{"post_id":"cm64sykf90005vvjx80lscp26","category_id":"cm61x1a4m0000u8jxc9bk7g88","_id":"cm64v9a270002mqjxezx6e5i5"},{"post_id":"cm6nbsy5q0000uvjxcmuj9242","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nbsy8h000vuvjx4f7o0tc8"},{"post_id":"cm6nd3llo0012oxjx8wtph54q","category_id":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6ndmajk000a80jx8bt9hj3d"},{"post_id":"cm6ndmahv000180jx4phf5y4n","category_id":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6ndmajk000b80jx172y9ewg"},{"post_id":"cm6ndmahx000280jx4bh424nq","category_id":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6ndmajt000d80jx3sbi80wn"},{"post_id":"cm6ndmahz000380jxgbt69hqy","category_id":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6ndmajt000e80jxe288asbp"},{"post_id":"cm6ndmahz000380jxgbt69hqy","category_id":"cm6ndmajn000c80jx2s76bxxt","_id":"cm6ndmajt000f80jxbkfp54qz"},{"post_id":"cm6ndmahm000080jx65xt1h2s","category_id":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6ndmajv000g80jx38ae4qkq"},{"post_id":"cm6nd3le4000eoxjxbi706xzl","category_id":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6ndqca50006l9jxcbp46g7a"},{"post_id":"cm6nd3le4000eoxjxbi706xzl","category_id":"cm6nd3lek000moxjxfapqfyta","_id":"cm6ndqca50007l9jxhxk9bhs4"},{"post_id":"cm6nd3le5000foxjxg9qb7acz","category_id":"cm6nd3le3000doxjx9l5vf4ru","_id":"cm6ndqca50008l9jx7g63gtxz"},{"post_id":"cm6nd3le5000foxjxg9qb7acz","category_id":"cm6nd3lek000moxjxfapqfyta","_id":"cm6ndqca50009l9jx698ta018"},{"post_id":"cm6nbsy5t0001uvjx9ktz9d2n","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kf000ee3jx8sw2gcvn"},{"post_id":"cm6nbsy5y0002uvjx85zkdm71","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kg000fe3jx7mib7h4y"},{"post_id":"cm6nbsy5z0003uvjx90ze1dty","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kg000ge3jxgd8m1z50"},{"post_id":"cm6nen6i30000e3jx0tkh7aax","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kh000he3jx3b7m4oge"},{"post_id":"cm6nbsy610004uvjxdkkh7ik4","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6km000je3jxf9fd5e53"},{"post_id":"cm6nbsy650007uvjx3yczgvuk","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kn000ke3jxe9jb73wq"},{"post_id":"cm6nbsy650007uvjx3yczgvuk","category_id":"cm6nbsy8l0011uvjx3uzfga27","_id":"cm6nen6ko000le3jx2e7212g8"},{"post_id":"cm6nen6i70002e3jx8oy18dtr","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kp000me3jxetc89gs7"},{"post_id":"cm6nen6i70002e3jx8oy18dtr","category_id":"cm6nbsy8n0015uvjxgv2x1uqj","_id":"cm6nen6kq000oe3jx8lsu30j6"},{"post_id":"cm6nen6i80003e3jx6l9ney8h","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kq000pe3jxd9o92wqv"},{"post_id":"cm6nen6i80003e3jx6l9ney8h","category_id":"cm6nbsy8n0015uvjxgv2x1uqj","_id":"cm6nen6kr000qe3jx7bx80wkf"},{"post_id":"cm6nen6i50001e3jxgh8mc9z6","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6ks000re3jx3wuahexe"},{"post_id":"cm6nen6i50001e3jxgh8mc9z6","category_id":"cm6nen6kh000ie3jx8syic9yk","_id":"cm6nen6kt000se3jx84wgcwwi"},{"post_id":"cm6nbsy670008uvjxfgx9dnvg","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6ku000te3jx1e6qekge"},{"post_id":"cm6nbsy670008uvjxfgx9dnvg","category_id":"cm6nbsy8n0015uvjxgv2x1uqj","_id":"cm6nen6kw000ve3jx2boq8fkx"},{"post_id":"cm6nbsy690009uvjx9woy1oqx","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6kx000we3jxdve07vqx"},{"post_id":"cm6nbsy690009uvjx9woy1oqx","category_id":"cm6nbsy8o0018uvjx51qo7doq","_id":"cm6nen6ky000xe3jx12dwe3q5"},{"post_id":"cm6nbsy6b000auvjxfhsmhdil","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6l1000ze3jxgccwdvmq"},{"post_id":"cm6nbsy6b000auvjxfhsmhdil","category_id":"cm6nbsy8o0018uvjx51qo7doq","_id":"cm6nen6l20010e3jx5za6472f"},{"post_id":"cm6nen6ib0004e3jxe43kdmb0","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6l40012e3jxa8n08w9t"},{"post_id":"cm6nen6ib0004e3jxe43kdmb0","category_id":"cm6nen6kp000ne3jxafbmg8x5","_id":"cm6nen6l50013e3jx631r8rfr"},{"post_id":"cm6nen6if0006e3jx1o0z1ko0","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6l60014e3jxarc7alxt"},{"post_id":"cm6nen6if0006e3jx1o0z1ko0","category_id":"cm6nbsy8r001duvjxb9pxel7b","_id":"cm6nen6l70015e3jx52pe315u"},{"post_id":"cm6nen6if0006e3jx1o0z1ko0","category_id":"cm6nccyp7000b8ijx72yq4iy0","_id":"cm6nen6l90017e3jx7yird0ki"},{"post_id":"cm6nccynj00008ijx3wte13zl","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6la0018e3jxgrzs46md"},{"post_id":"cm6nccynj00008ijx3wte13zl","category_id":"cm6nbsy8r001duvjxb9pxel7b","_id":"cm6nen6lb0019e3jxatumagtc"},{"post_id":"cm6nccynj00008ijx3wte13zl","category_id":"cm6nccyp7000b8ijx72yq4iy0","_id":"cm6nen6lb001ae3jx628bah31"},{"post_id":"cm6nbsy6d000buvjx0rnf2wlv","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6lc001be3jx8c641lo6"},{"post_id":"cm6nbsy6d000buvjx0rnf2wlv","category_id":"cm6nbsy8r001duvjxb9pxel7b","_id":"cm6nen6lc001ce3jx9j1p76kc"},{"post_id":"cm6nbsy6d000buvjx0rnf2wlv","category_id":"cm6nbsy8v001quvjx3n5k9888","_id":"cm6nen6lc001de3jx056pgb3q"},{"post_id":"cm6nen6ii000ae3jxa08hbzs9","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6lc001ee3jxayp77ijj"},{"post_id":"cm6nen6ii000ae3jxa08hbzs9","category_id":"cm6nbsy8h000xuvjxejnt85e5","_id":"cm6nen6lc001fe3jx7yqxf0da"},{"post_id":"cm6nen6ii000ae3jxa08hbzs9","category_id":"cm6nen6kv000ue3jx1dwp5ym3","_id":"cm6nen6lc001ge3jx8kju201c"},{"post_id":"cm6nen6ig0007e3jxd7rub0ci","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6lc001he3jxfogs9i3i"},{"post_id":"cm6nen6ig0007e3jxd7rub0ci","category_id":"cm6nbsy8h000xuvjxejnt85e5","_id":"cm6nen6lc001ie3jx5onxhaib"},{"post_id":"cm6nen6ig0007e3jxd7rub0ci","category_id":"cm6nen6kv000ue3jx1dwp5ym3","_id":"cm6nen6lc001je3jx5q6if9sf"},{"post_id":"cm6nbsy6e000cuvjxfhg486rt","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6ld001ke3jx8jem2fu1"},{"post_id":"cm6nbsy6e000cuvjxfhg486rt","category_id":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nen6ld001le3jx9x1t7q06"},{"post_id":"cm6nbsy6e000cuvjxfhg486rt","category_id":"cm6nbsy8w001ruvjx4n2g7xo6","_id":"cm6nen6ld001me3jx9yra9r98"},{"post_id":"cm6nen6ij000be3jx18fsarqx","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6ld001ne3jxd95negs8"},{"post_id":"cm6nen6ij000be3jx18fsarqx","category_id":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nen6ld001oe3jx8v0shiqa"},{"post_id":"cm6nen6ij000be3jx18fsarqx","category_id":"cm6nbsy8w001tuvjxc3hl1toy","_id":"cm6nen6ld001pe3jx1s099sil"},{"post_id":"cm6nen6ih0008e3jx1xpnfvu1","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6ld001qe3jxcxhr2lbu"},{"post_id":"cm6nen6ih0008e3jx1xpnfvu1","category_id":"cm6nbsy8h000xuvjxejnt85e5","_id":"cm6nen6ld001re3jxcxp7cp34"},{"post_id":"cm6nen6ih0008e3jx1xpnfvu1","category_id":"cm6nen6kv000ue3jx1dwp5ym3","_id":"cm6nen6ld001se3jx16e66zbo"},{"post_id":"cm6nbsy6f000duvjx3i2i5buw","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6ld001te3jxdnyb0xpu"},{"post_id":"cm6nbsy6f000duvjx3i2i5buw","category_id":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nen6ld001ue3jx9ld29pyq"},{"post_id":"cm6nbsy6f000duvjx3i2i5buw","category_id":"cm6nbsy8w001tuvjxc3hl1toy","_id":"cm6nen6ld001ve3jx3fd618a1"},{"post_id":"cm6nbsy6h000euvjx8rv7etxd","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6ld001we3jxalvf2qwx"},{"post_id":"cm6nbsy6h000euvjx8rv7etxd","category_id":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nen6ld001xe3jxefofasf3"},{"post_id":"cm6nbsy6h000euvjx8rv7etxd","category_id":"cm6nbsy8w001tuvjxc3hl1toy","_id":"cm6nen6ld001ye3jx9w2z5yep"},{"post_id":"cm6nen6ii0009e3jxdpme44t2","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6le001ze3jx4k5p0tjq"},{"post_id":"cm6nen6ii0009e3jxdpme44t2","category_id":"cm6nbsy8h000xuvjxejnt85e5","_id":"cm6nen6le0020e3jx95v08xic"},{"post_id":"cm6nen6ii0009e3jxdpme44t2","category_id":"cm6nen6kv000ue3jx1dwp5ym3","_id":"cm6nen6le0021e3jxhko30mlz"},{"post_id":"cm6nbsy6i000fuvjx12652ehy","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6le0022e3jx53hff5wr"},{"post_id":"cm6nbsy6i000fuvjx12652ehy","category_id":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nen6le0023e3jxeq4t1djt"},{"post_id":"cm6nbsy6i000fuvjx12652ehy","category_id":"cm6nbsy8x001zuvjxhc3nby41","_id":"cm6nen6le0024e3jxd3uo98f2"},{"post_id":"cm6nbsy6i000guvjxan65cfs5","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6le0025e3jxhiq39qgd"},{"post_id":"cm6nbsy6i000guvjxan65cfs5","category_id":"cm6nbsy8t001muvjx7nxk48im","_id":"cm6nen6le0026e3jx61fkgpzi"},{"post_id":"cm6nbsy6i000guvjxan65cfs5","category_id":"cm6nbsy8y0022uvjxdz6ad6wq","_id":"cm6nen6le0027e3jx5qcbd7nl"},{"post_id":"cm6nbsy6j000huvjx3bws37xq","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6le0028e3jx37qlgq7k"},{"post_id":"cm6nbsy6j000huvjx3bws37xq","category_id":"cm6nbsy8t001muvjx7nxk48im","_id":"cm6nen6le0029e3jx6rjxhg4d"},{"post_id":"cm6nbsy6j000huvjx3bws37xq","category_id":"cm6nbsy8y0025uvjx3bql8lhf","_id":"cm6nen6le002ae3jxgwqr128m"},{"post_id":"cm6nen6in000de3jx1o1t7wj4","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6le002be3jxbbaha7ja"},{"post_id":"cm6nen6in000de3jx1o1t7wj4","category_id":"cm6nbsy8t001muvjx7nxk48im","_id":"cm6nen6le002ce3jxcwdbdb4m"},{"post_id":"cm6nen6in000de3jx1o1t7wj4","category_id":"cm6nbsy8z0029uvjx2d6fbx2o","_id":"cm6nen6lf002de3jxd5xrh8k9"},{"post_id":"cm6nen6il000ce3jxhoth4c4k","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6lf002ee3jx7ngn6k9f"},{"post_id":"cm6nen6il000ce3jxhoth4c4k","category_id":"cm6nbsy8r001huvjx44qz8p2d","_id":"cm6nen6lf002fe3jxfg8c61jd"},{"post_id":"cm6nen6il000ce3jxhoth4c4k","category_id":"cm6nen6l80016e3jxdu04ewgz","_id":"cm6nen6lf002ge3jx5i3w6tli"},{"post_id":"cm6nbsy6l000juvjxbkjabtgy","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6lf002he3jx1ecl12ff"},{"post_id":"cm6nbsy6l000juvjxbkjabtgy","category_id":"cm6nbsy8t001muvjx7nxk48im","_id":"cm6nen6lf002ie3jx293c7bbk"},{"post_id":"cm6nbsy6l000juvjxbkjabtgy","category_id":"cm6nbsy8z0029uvjx2d6fbx2o","_id":"cm6nen6lf002je3jx0zga8fqw"},{"post_id":"cm6nen6ie0005e3jx90x6csr4","category_id":"cm6nbsy88000ruvjx01km2xih","_id":"cm6nen6ln002me3jx97dv7l68"},{"post_id":"cm6nen6ie0005e3jx90x6csr4","category_id":"cm6nen6lm002ke3jxhwiab0mx","_id":"cm6nen6ln002ne3jx7uoc0lss"},{"post_id":"cm6nen6ie0005e3jx90x6csr4","category_id":"cm6nen6ln002le3jx0zna8biy","_id":"cm6nen6ln002oe3jx746m5bac"}],"PostTag":[],"Tag":[]}}